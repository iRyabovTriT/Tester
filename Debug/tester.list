
tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08003988  08003988  00013988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ad4  08003ad4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003ad4  08003ad4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ad4  08003ad4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ad8  08003ad8  00013ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  08003b4c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08003b4c  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d985  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c80  00000000  00000000  0002da1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  0002f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be0  00000000  00000000  00030338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010e29  00000000  00000000  00030f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec56  00000000  00000000  00041d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000693f0  00000000  00000000  00050997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b9d87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003110  00000000  00000000  000b9dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003970 	.word	0x08003970

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003970 	.word	0x08003970

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000246:	46de      	mov	lr, fp
 8000248:	4657      	mov	r7, sl
 800024a:	464e      	mov	r6, r9
 800024c:	4645      	mov	r5, r8
 800024e:	b5e0      	push	{r5, r6, r7, lr}
 8000250:	b0f5      	sub	sp, #468	; 0x1d4
 8000252:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 ffaa 	bl	80011ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f960 	bl	800051c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f000 fa94 	bl	8000788 <MX_GPIO_Init>
  MX_RTC_Init();
 8000260:	f000 f9f2 	bl	8000648 <MX_RTC_Init>
  MX_TIM6_Init();
 8000264:	f000 fa16 	bl	8000694 <MX_TIM6_Init>
  MX_TIM14_Init();
 8000268:	f000 fa38 	bl	80006dc <MX_TIM14_Init>
  MX_USART1_UART_Init();
 800026c:	f000 fa5c 	bl	8000728 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000270:	f000 f9bc 	bl	80005ec <MX_NVIC_Init>

    /* USER CODE BEGIN 3 */

	  //sprintf(str, "Результат теста:\n %x \n", dataTx);
	  //HAL_UART_Transmit(&huart1, str, strlen((char *)str), 50);
	  if(arrayCount < 11)
 8000274:	4b9f      	ldr	r3, [pc, #636]	; (80004f4 <main+0x2b0>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b0a      	cmp	r3, #10
 800027a:	dc30      	bgt.n	80002de <main+0x9a>
	  {
		  HAL_GPIO_WritePin(GetPort(arrayCount), Cabel_Pin[arrayCount], GPIO_PIN_SET);
 800027c:	4b9d      	ldr	r3, [pc, #628]	; (80004f4 <main+0x2b0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	b29b      	uxth	r3, r3
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fdba 	bl	8000dfc <GetPort>
 8000288:	4b9a      	ldr	r3, [pc, #616]	; (80004f4 <main+0x2b0>)
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b9a      	ldr	r3, [pc, #616]	; (80004f8 <main+0x2b4>)
 800028e:	0052      	lsls	r2, r2, #1
 8000290:	5ad3      	ldrh	r3, [r2, r3]
 8000292:	2201      	movs	r2, #1
 8000294:	0019      	movs	r1, r3
 8000296:	f001 fa5f 	bl	8001758 <HAL_GPIO_WritePin>
		  //HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);

		  HAL_Delay(150);
 800029a:	2096      	movs	r0, #150	; 0x96
 800029c:	f000 ffea 	bl	8001274 <HAL_Delay>

		  HAL_GPIO_WritePin(GetPort(arrayCount), Cabel_Pin[arrayCount], GPIO_PIN_RESET);
 80002a0:	4b94      	ldr	r3, [pc, #592]	; (80004f4 <main+0x2b0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fda8 	bl	8000dfc <GetPort>
 80002ac:	4b91      	ldr	r3, [pc, #580]	; (80004f4 <main+0x2b0>)
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	4b91      	ldr	r3, [pc, #580]	; (80004f8 <main+0x2b4>)
 80002b2:	0052      	lsls	r2, r2, #1
 80002b4:	5ad3      	ldrh	r3, [r2, r3]
 80002b6:	2200      	movs	r2, #0
 80002b8:	0019      	movs	r1, r3
 80002ba:	f001 fa4d 	bl	8001758 <HAL_GPIO_WritePin>
				  ShortCut = 1;
			  }
			  break;
		  }
	*/
		  count++;
 80002be:	4b8f      	ldr	r3, [pc, #572]	; (80004fc <main+0x2b8>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	1c5a      	adds	r2, r3, #1
 80002c4:	4b8d      	ldr	r3, [pc, #564]	; (80004fc <main+0x2b8>)
 80002c6:	601a      	str	r2, [r3, #0]
		  arrayCount++;
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <main+0x2b0>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	1c5a      	adds	r2, r3, #1
 80002ce:	4b89      	ldr	r3, [pc, #548]	; (80004f4 <main+0x2b0>)
 80002d0:	601a      	str	r2, [r3, #0]
		  countCabelInter = 0;
 80002d2:	4b8b      	ldr	r3, [pc, #556]	; (8000500 <main+0x2bc>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
		  countCabelInterIndivid = 0;
 80002d8:	4b8a      	ldr	r3, [pc, #552]	; (8000504 <main+0x2c0>)
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
	  }

	  if(arrayCount == 11)
 80002de:	4b85      	ldr	r3, [pc, #532]	; (80004f4 <main+0x2b0>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2b0b      	cmp	r3, #11
 80002e4:	d1c6      	bne.n	8000274 <main+0x30>
	  {
		  uint16_t ResTestUART;
		  for(int i = 0; i < 11; i++)
 80002e6:	2300      	movs	r3, #0
 80002e8:	22cc      	movs	r2, #204	; 0xcc
 80002ea:	0052      	lsls	r2, r2, #1
 80002ec:	2108      	movs	r1, #8
 80002ee:	1852      	adds	r2, r2, r1
 80002f0:	19d2      	adds	r2, r2, r7
 80002f2:	6013      	str	r3, [r2, #0]
 80002f4:	e02e      	b.n	8000354 <main+0x110>
		  {
			  ResTestUART = (ResTestUART << i) | ResPinTest[i];
 80002f6:	24cf      	movs	r4, #207	; 0xcf
 80002f8:	0064      	lsls	r4, r4, #1
 80002fa:	2508      	movs	r5, #8
 80002fc:	1963      	adds	r3, r4, r5
 80002fe:	19db      	adds	r3, r3, r7
 8000300:	881a      	ldrh	r2, [r3, #0]
 8000302:	20cc      	movs	r0, #204	; 0xcc
 8000304:	0040      	lsls	r0, r0, #1
 8000306:	1943      	adds	r3, r0, r5
 8000308:	19db      	adds	r3, r3, r7
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	409a      	lsls	r2, r3
 800030e:	0013      	movs	r3, r2
 8000310:	b21a      	sxth	r2, r3
 8000312:	4b7d      	ldr	r3, [pc, #500]	; (8000508 <main+0x2c4>)
 8000314:	1941      	adds	r1, r0, r5
 8000316:	19c9      	adds	r1, r1, r7
 8000318:	6809      	ldr	r1, [r1, #0]
 800031a:	0049      	lsls	r1, r1, #1
 800031c:	5acb      	ldrh	r3, [r1, r3]
 800031e:	b21b      	sxth	r3, r3
 8000320:	4313      	orrs	r3, r2
 8000322:	b21a      	sxth	r2, r3
 8000324:	1963      	adds	r3, r4, r5
 8000326:	19db      	adds	r3, r3, r7
 8000328:	801a      	strh	r2, [r3, #0]
			  if(ResPinTest[i] == 0)
 800032a:	4b77      	ldr	r3, [pc, #476]	; (8000508 <main+0x2c4>)
 800032c:	1942      	adds	r2, r0, r5
 800032e:	19d2      	adds	r2, r2, r7
 8000330:	6812      	ldr	r2, [r2, #0]
 8000332:	0052      	lsls	r2, r2, #1
 8000334:	5ad3      	ldrh	r3, [r2, r3]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d102      	bne.n	8000340 <main+0xfc>
			  {
				  ErrorTest = 1;
 800033a:	4b74      	ldr	r3, [pc, #464]	; (800050c <main+0x2c8>)
 800033c:	2201      	movs	r2, #1
 800033e:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 11; i++)
 8000340:	22cc      	movs	r2, #204	; 0xcc
 8000342:	0052      	lsls	r2, r2, #1
 8000344:	2108      	movs	r1, #8
 8000346:	1853      	adds	r3, r2, r1
 8000348:	19db      	adds	r3, r3, r7
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	3301      	adds	r3, #1
 800034e:	1852      	adds	r2, r2, r1
 8000350:	19d2      	adds	r2, r2, r7
 8000352:	6013      	str	r3, [r2, #0]
 8000354:	23cc      	movs	r3, #204	; 0xcc
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	2008      	movs	r0, #8
 800035a:	181b      	adds	r3, r3, r0
 800035c:	19db      	adds	r3, r3, r7
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b0a      	cmp	r3, #10
 8000362:	ddc8      	ble.n	80002f6 <main+0xb2>
			  }
		  }
		  uint8_t str[400];
		  sprintf(str, "Result test: \n CAN1H = %x \n CAN1L = %x \n CAN2H = %x \n CAN2L = %x \n GND = %x \n +12V = %x \n U_Power = %x \n IGN1 = %x \n Start = %x \n IGN2 = %x \n LIN = %x \n" , ResPinTest[0], ResPinTest[1], ResPinTest[2], ResPinTest[3], ResPinTest[4], ResPinTest[5], ResPinTest[6], ResPinTest[7], ResPinTest[8], ResPinTest[9], ResPinTest[10] );
 8000364:	4b68      	ldr	r3, [pc, #416]	; (8000508 <main+0x2c4>)
 8000366:	881b      	ldrh	r3, [r3, #0]
 8000368:	469b      	mov	fp, r3
 800036a:	4b67      	ldr	r3, [pc, #412]	; (8000508 <main+0x2c4>)
 800036c:	885b      	ldrh	r3, [r3, #2]
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	4b65      	ldr	r3, [pc, #404]	; (8000508 <main+0x2c4>)
 8000372:	889b      	ldrh	r3, [r3, #4]
 8000374:	001a      	movs	r2, r3
 8000376:	4b64      	ldr	r3, [pc, #400]	; (8000508 <main+0x2c4>)
 8000378:	88db      	ldrh	r3, [r3, #6]
 800037a:	001c      	movs	r4, r3
 800037c:	4b62      	ldr	r3, [pc, #392]	; (8000508 <main+0x2c4>)
 800037e:	891b      	ldrh	r3, [r3, #8]
 8000380:	001d      	movs	r5, r3
 8000382:	4b61      	ldr	r3, [pc, #388]	; (8000508 <main+0x2c4>)
 8000384:	895b      	ldrh	r3, [r3, #10]
 8000386:	001e      	movs	r6, r3
 8000388:	4b5f      	ldr	r3, [pc, #380]	; (8000508 <main+0x2c4>)
 800038a:	899b      	ldrh	r3, [r3, #12]
 800038c:	469c      	mov	ip, r3
 800038e:	4b5e      	ldr	r3, [pc, #376]	; (8000508 <main+0x2c4>)
 8000390:	89db      	ldrh	r3, [r3, #14]
 8000392:	4698      	mov	r8, r3
 8000394:	4b5c      	ldr	r3, [pc, #368]	; (8000508 <main+0x2c4>)
 8000396:	8a1b      	ldrh	r3, [r3, #16]
 8000398:	4699      	mov	r9, r3
 800039a:	4b5b      	ldr	r3, [pc, #364]	; (8000508 <main+0x2c4>)
 800039c:	8a5b      	ldrh	r3, [r3, #18]
 800039e:	469a      	mov	sl, r3
 80003a0:	4b59      	ldr	r3, [pc, #356]	; (8000508 <main+0x2c4>)
 80003a2:	8a9b      	ldrh	r3, [r3, #20]
 80003a4:	495a      	ldr	r1, [pc, #360]	; (8000510 <main+0x2cc>)
 80003a6:	1838      	adds	r0, r7, r0
 80003a8:	9308      	str	r3, [sp, #32]
 80003aa:	4653      	mov	r3, sl
 80003ac:	9307      	str	r3, [sp, #28]
 80003ae:	464b      	mov	r3, r9
 80003b0:	9306      	str	r3, [sp, #24]
 80003b2:	4643      	mov	r3, r8
 80003b4:	9305      	str	r3, [sp, #20]
 80003b6:	4663      	mov	r3, ip
 80003b8:	9304      	str	r3, [sp, #16]
 80003ba:	9603      	str	r6, [sp, #12]
 80003bc:	9502      	str	r5, [sp, #8]
 80003be:	9401      	str	r4, [sp, #4]
 80003c0:	9200      	str	r2, [sp, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	465a      	mov	r2, fp
 80003c6:	f002 fe69 	bl	800309c <siprintf>

		  HAL_UART_Transmit(&huart1, str, strlen((char *)str), 100);
 80003ca:	2408      	movs	r4, #8
 80003cc:	193b      	adds	r3, r7, r4
 80003ce:	0018      	movs	r0, r3
 80003d0:	f7ff fe9a 	bl	8000108 <strlen>
 80003d4:	0003      	movs	r3, r0
 80003d6:	b29a      	uxth	r2, r3
 80003d8:	1939      	adds	r1, r7, r4
 80003da:	484e      	ldr	r0, [pc, #312]	; (8000514 <main+0x2d0>)
 80003dc:	2364      	movs	r3, #100	; 0x64
 80003de:	f002 fa81 	bl	80028e4 <HAL_UART_Transmit>
		  arrayCount++;
 80003e2:	4b44      	ldr	r3, [pc, #272]	; (80004f4 <main+0x2b0>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	4b42      	ldr	r3, [pc, #264]	; (80004f4 <main+0x2b0>)
 80003ea:	601a      	str	r2, [r3, #0]
		  if(ErrorTest)
 80003ec:	4b47      	ldr	r3, [pc, #284]	; (800050c <main+0x2c8>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d100      	bne.n	80003f6 <main+0x1b2>
 80003f4:	e075      	b.n	80004e2 <main+0x29e>
		  {



			  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80003f6:	2390      	movs	r3, #144	; 0x90
 80003f8:	05db      	lsls	r3, r3, #23
 80003fa:	2200      	movs	r2, #0
 80003fc:	2108      	movs	r1, #8
 80003fe:	0018      	movs	r0, r3
 8000400:	f001 f9aa 	bl	8001758 <HAL_GPIO_WritePin>
			  if(ShortCut == 1)
 8000404:	4b44      	ldr	r3, [pc, #272]	; (8000518 <main+0x2d4>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d12d      	bne.n	8000468 <main+0x224>
			  {
				  for(int i = 0; i < 3; i++)
 800040c:	2300      	movs	r3, #0
 800040e:	22ca      	movs	r2, #202	; 0xca
 8000410:	0052      	lsls	r2, r2, #1
 8000412:	1912      	adds	r2, r2, r4
 8000414:	19d2      	adds	r2, r2, r7
 8000416:	6013      	str	r3, [r2, #0]
 8000418:	e01d      	b.n	8000456 <main+0x212>
				  {
				  		HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, GPIO_PIN_SET);
 800041a:	2390      	movs	r3, #144	; 0x90
 800041c:	05db      	lsls	r3, r3, #23
 800041e:	2201      	movs	r2, #1
 8000420:	2104      	movs	r1, #4
 8000422:	0018      	movs	r0, r3
 8000424:	f001 f998 	bl	8001758 <HAL_GPIO_WritePin>
				  		HAL_Delay(250);
 8000428:	20fa      	movs	r0, #250	; 0xfa
 800042a:	f000 ff23 	bl	8001274 <HAL_Delay>
				  		HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, GPIO_PIN_RESET);
 800042e:	2390      	movs	r3, #144	; 0x90
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	2200      	movs	r2, #0
 8000434:	2104      	movs	r1, #4
 8000436:	0018      	movs	r0, r3
 8000438:	f001 f98e 	bl	8001758 <HAL_GPIO_WritePin>
				  		HAL_Delay(250);
 800043c:	20fa      	movs	r0, #250	; 0xfa
 800043e:	f000 ff19 	bl	8001274 <HAL_Delay>
				  for(int i = 0; i < 3; i++)
 8000442:	22ca      	movs	r2, #202	; 0xca
 8000444:	0052      	lsls	r2, r2, #1
 8000446:	2108      	movs	r1, #8
 8000448:	1853      	adds	r3, r2, r1
 800044a:	19db      	adds	r3, r3, r7
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	3301      	adds	r3, #1
 8000450:	1852      	adds	r2, r2, r1
 8000452:	19d2      	adds	r2, r2, r7
 8000454:	6013      	str	r3, [r2, #0]
 8000456:	23ca      	movs	r3, #202	; 0xca
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	2208      	movs	r2, #8
 800045c:	189b      	adds	r3, r3, r2
 800045e:	19db      	adds	r3, r3, r7
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b02      	cmp	r3, #2
 8000464:	ddd9      	ble.n	800041a <main+0x1d6>
 8000466:	e705      	b.n	8000274 <main+0x30>
				  }
			  }
			  else
			  {

				  for(int i = 0; i < 3; i++)
 8000468:	2300      	movs	r3, #0
 800046a:	22c8      	movs	r2, #200	; 0xc8
 800046c:	0052      	lsls	r2, r2, #1
 800046e:	2108      	movs	r1, #8
 8000470:	1852      	adds	r2, r2, r1
 8000472:	19d2      	adds	r2, r2, r7
 8000474:	6013      	str	r3, [r2, #0]
 8000476:	e02b      	b.n	80004d0 <main+0x28c>
				  {
				  	HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, GPIO_PIN_SET);
 8000478:	2390      	movs	r3, #144	; 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	2201      	movs	r2, #1
 800047e:	2104      	movs	r1, #4
 8000480:	0018      	movs	r0, r3
 8000482:	f001 f969 	bl	8001758 <HAL_GPIO_WritePin>
				  	if(i == 2)
 8000486:	23c8      	movs	r3, #200	; 0xc8
 8000488:	005b      	lsls	r3, r3, #1
 800048a:	2208      	movs	r2, #8
 800048c:	189b      	adds	r3, r3, r2
 800048e:	19db      	adds	r3, r3, r7
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	2b02      	cmp	r3, #2
 8000494:	d105      	bne.n	80004a2 <main+0x25e>
				  	{
				  		HAL_Delay(1000);
 8000496:	23fa      	movs	r3, #250	; 0xfa
 8000498:	009b      	lsls	r3, r3, #2
 800049a:	0018      	movs	r0, r3
 800049c:	f000 feea 	bl	8001274 <HAL_Delay>
 80004a0:	e002      	b.n	80004a8 <main+0x264>
				  	}else
				  	{
				  		HAL_Delay(250);
 80004a2:	20fa      	movs	r0, #250	; 0xfa
 80004a4:	f000 fee6 	bl	8001274 <HAL_Delay>
				  	}

				  	HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, GPIO_PIN_RESET);
 80004a8:	2390      	movs	r3, #144	; 0x90
 80004aa:	05db      	lsls	r3, r3, #23
 80004ac:	2200      	movs	r2, #0
 80004ae:	2104      	movs	r1, #4
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 f951 	bl	8001758 <HAL_GPIO_WritePin>
				  	HAL_Delay(250);
 80004b6:	20fa      	movs	r0, #250	; 0xfa
 80004b8:	f000 fedc 	bl	8001274 <HAL_Delay>
				  for(int i = 0; i < 3; i++)
 80004bc:	22c8      	movs	r2, #200	; 0xc8
 80004be:	0052      	lsls	r2, r2, #1
 80004c0:	2108      	movs	r1, #8
 80004c2:	1853      	adds	r3, r2, r1
 80004c4:	19db      	adds	r3, r3, r7
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	3301      	adds	r3, #1
 80004ca:	1852      	adds	r2, r2, r1
 80004cc:	19d2      	adds	r2, r2, r7
 80004ce:	6013      	str	r3, [r2, #0]
 80004d0:	23c8      	movs	r3, #200	; 0xc8
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	2208      	movs	r2, #8
 80004d6:	189b      	adds	r3, r3, r2
 80004d8:	19db      	adds	r3, r3, r7
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b02      	cmp	r3, #2
 80004de:	ddcb      	ble.n	8000478 <main+0x234>
 80004e0:	e6c8      	b.n	8000274 <main+0x30>
			  }

		  }
		  else
		  {
			  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 80004e2:	2390      	movs	r3, #144	; 0x90
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2200      	movs	r2, #0
 80004e8:	2102      	movs	r1, #2
 80004ea:	0018      	movs	r0, r3
 80004ec:	f001 f934 	bl	8001758 <HAL_GPIO_WritePin>
	  if(arrayCount < 11)
 80004f0:	e6c0      	b.n	8000274 <main+0x30>
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	200001e8 	.word	0x200001e8
 80004f8:	08003a44 	.word	0x08003a44
 80004fc:	200001dc 	.word	0x200001dc
 8000500:	200001e0 	.word	0x200001e0
 8000504:	200001e4 	.word	0x200001e4
 8000508:	200001c4 	.word	0x200001c4
 800050c:	200001c0 	.word	0x200001c0
 8000510:	08003988 	.word	0x08003988
 8000514:	2000013c 	.word	0x2000013c
 8000518:	200001ec 	.word	0x200001ec

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b095      	sub	sp, #84	; 0x54
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	2420      	movs	r4, #32
 8000524:	193b      	adds	r3, r7, r4
 8000526:	0018      	movs	r0, r3
 8000528:	2330      	movs	r3, #48	; 0x30
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f002 fdad 	bl	800308c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000532:	2310      	movs	r3, #16
 8000534:	18fb      	adds	r3, r7, r3
 8000536:	0018      	movs	r0, r3
 8000538:	2310      	movs	r3, #16
 800053a:	001a      	movs	r2, r3
 800053c:	2100      	movs	r1, #0
 800053e:	f002 fda5 	bl	800308c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000542:	003b      	movs	r3, r7
 8000544:	0018      	movs	r0, r3
 8000546:	2310      	movs	r3, #16
 8000548:	001a      	movs	r2, r3
 800054a:	2100      	movs	r1, #0
 800054c:	f002 fd9e 	bl	800308c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000550:	0021      	movs	r1, r4
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2209      	movs	r2, #9
 8000556:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2201      	movs	r2, #1
 800055c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2201      	movs	r2, #1
 8000562:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2202      	movs	r2, #2
 8000568:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2280      	movs	r2, #128	; 0x80
 800056e:	0252      	lsls	r2, r2, #9
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2280      	movs	r2, #128	; 0x80
 8000576:	0352      	lsls	r2, r2, #13
 8000578:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2200      	movs	r2, #0
 800057e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	187b      	adds	r3, r7, r1
 8000582:	0018      	movs	r0, r3
 8000584:	f001 f922 	bl	80017cc <HAL_RCC_OscConfig>
 8000588:	1e03      	subs	r3, r0, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800058c:	f000 fc7e 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	2110      	movs	r1, #16
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2207      	movs	r2, #7
 8000596:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2202      	movs	r2, #2
 800059c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2101      	movs	r1, #1
 80005ae:	0018      	movs	r0, r3
 80005b0:	f001 fc26 	bl	8001e00 <HAL_RCC_ClockConfig>
 80005b4:	1e03      	subs	r3, r0, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80005b8:	f000 fc68 	bl	8000e8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 80005bc:	003b      	movs	r3, r7
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <SystemClock_Config+0xcc>)
 80005c0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80005c2:	003b      	movs	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005c8:	003b      	movs	r3, r7
 80005ca:	2280      	movs	r2, #128	; 0x80
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005d0:	003b      	movs	r3, r7
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 fd66 	bl	80020a4 <HAL_RCCEx_PeriphCLKConfig>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 fc56 	bl	8000e8c <Error_Handler>
  }
}
 80005e0:	46c0      	nop			; (mov r8, r8)
 80005e2:	46bd      	mov	sp, r7
 80005e4:	b015      	add	sp, #84	; 0x54
 80005e6:	bd90      	pop	{r4, r7, pc}
 80005e8:	00010001 	.word	0x00010001

080005ec <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2005      	movs	r0, #5
 80005f6:	f000 ff0d 	bl	8001414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80005fa:	2005      	movs	r0, #5
 80005fc:	f000 ff1f 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* EXTI2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	2006      	movs	r0, #6
 8000606:	f000 ff05 	bl	8001414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800060a:	2006      	movs	r0, #6
 800060c:	f000 ff17 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2100      	movs	r1, #0
 8000614:	2007      	movs	r0, #7
 8000616:	f000 fefd 	bl	8001414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800061a:	2007      	movs	r0, #7
 800061c:	f000 ff0f 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* TIM6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	2011      	movs	r0, #17
 8000626:	f000 fef5 	bl	8001414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800062a:	2011      	movs	r0, #17
 800062c:	f000 ff07 	bl	800143e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000630:	2200      	movs	r2, #0
 8000632:	2100      	movs	r1, #0
 8000634:	2004      	movs	r0, #4
 8000636:	f000 feed 	bl	8001414 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800063a:	2004      	movs	r0, #4
 800063c:	f000 feff 	bl	800143e <HAL_NVIC_EnableIRQ>
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_RTC_Init+0x44>)
 800064e:	4a10      	ldr	r2, [pc, #64]	; (8000690 <MX_RTC_Init+0x48>)
 8000650:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000652:	4b0e      	ldr	r3, [pc, #56]	; (800068c <MX_RTC_Init+0x44>)
 8000654:	2200      	movs	r2, #0
 8000656:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_RTC_Init+0x44>)
 800065a:	227f      	movs	r2, #127	; 0x7f
 800065c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_RTC_Init+0x44>)
 8000660:	22ff      	movs	r2, #255	; 0xff
 8000662:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_RTC_Init+0x44>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_RTC_Init+0x44>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_RTC_Init+0x44>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_RTC_Init+0x44>)
 8000678:	0018      	movs	r0, r3
 800067a:	f001 fde1 	bl	8002240 <HAL_RTC_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000682:	f000 fc03 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000008c 	.word	0x2000008c
 8000690:	40002800 	.word	0x40002800

08000694 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <MX_TIM6_Init+0x3c>)
 800069a:	4a0e      	ldr	r2, [pc, #56]	; (80006d4 <MX_TIM6_Init+0x40>)
 800069c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 359;
 800069e:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_TIM6_Init+0x3c>)
 80006a0:	2268      	movs	r2, #104	; 0x68
 80006a2:	32ff      	adds	r2, #255	; 0xff
 80006a4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <MX_TIM6_Init+0x3c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 80006ac:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_TIM6_Init+0x3c>)
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <MX_TIM6_Init+0x44>)
 80006b0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006b2:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_TIM6_Init+0x3c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <MX_TIM6_Init+0x3c>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f001 fea9 	bl	8002412 <HAL_TIM_Base_Init>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM6_Init+0x34>
  {
    Error_Handler();
 80006c4:	f000 fbe2 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80006c8:	46c0      	nop			; (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	200000ac 	.word	0x200000ac
 80006d4:	40001000 	.word	0x40001000
 80006d8:	00002710 	.word	0x00002710

080006dc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_TIM14_Init+0x40>)
 80006e2:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <MX_TIM14_Init+0x44>)
 80006e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <MX_TIM14_Init+0x40>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_TIM14_Init+0x40>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_TIM14_Init+0x40>)
 80006f4:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <MX_TIM14_Init+0x48>)
 80006f6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_TIM14_Init+0x40>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_TIM14_Init+0x40>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <MX_TIM14_Init+0x40>)
 8000706:	0018      	movs	r0, r3
 8000708:	f001 fe83 	bl	8002412 <HAL_TIM_Base_Init>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d001      	beq.n	8000714 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000710:	f000 fbbc 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	200000f4 	.word	0x200000f4
 8000720:	40002000 	.word	0x40002000
 8000724:	0000ffff 	.word	0x0000ffff

08000728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_USART1_UART_Init+0x58>)
 800072e:	4a15      	ldr	r2, [pc, #84]	; (8000784 <MX_USART1_UART_Init+0x5c>)
 8000730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MX_USART1_UART_Init+0x58>)
 8000734:	22e1      	movs	r2, #225	; 0xe1
 8000736:	0252      	lsls	r2, r2, #9
 8000738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART1_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_USART1_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART1_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART1_UART_Init+0x58>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART1_UART_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART1_UART_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART1_UART_Init+0x58>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART1_UART_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076a:	4b05      	ldr	r3, [pc, #20]	; (8000780 <MX_USART1_UART_Init+0x58>)
 800076c:	0018      	movs	r0, r3
 800076e:	f002 f865 	bl	800283c <HAL_UART_Init>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 fb89 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	2000013c 	.word	0x2000013c
 8000784:	40013800 	.word	0x40013800

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b08b      	sub	sp, #44	; 0x2c
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	2414      	movs	r4, #20
 8000790:	193b      	adds	r3, r7, r4
 8000792:	0018      	movs	r0, r3
 8000794:	2314      	movs	r3, #20
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	f002 fc77 	bl	800308c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4bbf      	ldr	r3, [pc, #764]	; (8000a9c <MX_GPIO_Init+0x314>)
 80007a0:	695a      	ldr	r2, [r3, #20]
 80007a2:	4bbe      	ldr	r3, [pc, #760]	; (8000a9c <MX_GPIO_Init+0x314>)
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	0309      	lsls	r1, r1, #12
 80007a8:	430a      	orrs	r2, r1
 80007aa:	615a      	str	r2, [r3, #20]
 80007ac:	4bbb      	ldr	r3, [pc, #748]	; (8000a9c <MX_GPIO_Init+0x314>)
 80007ae:	695a      	ldr	r2, [r3, #20]
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	031b      	lsls	r3, r3, #12
 80007b4:	4013      	ands	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ba:	4bb8      	ldr	r3, [pc, #736]	; (8000a9c <MX_GPIO_Init+0x314>)
 80007bc:	695a      	ldr	r2, [r3, #20]
 80007be:	4bb7      	ldr	r3, [pc, #732]	; (8000a9c <MX_GPIO_Init+0x314>)
 80007c0:	2180      	movs	r1, #128	; 0x80
 80007c2:	03c9      	lsls	r1, r1, #15
 80007c4:	430a      	orrs	r2, r1
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	4bb4      	ldr	r3, [pc, #720]	; (8000a9c <MX_GPIO_Init+0x314>)
 80007ca:	695a      	ldr	r2, [r3, #20]
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	03db      	lsls	r3, r3, #15
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4bb1      	ldr	r3, [pc, #708]	; (8000a9c <MX_GPIO_Init+0x314>)
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	4bb0      	ldr	r3, [pc, #704]	; (8000a9c <MX_GPIO_Init+0x314>)
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	0289      	lsls	r1, r1, #10
 80007e0:	430a      	orrs	r2, r1
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	4bad      	ldr	r3, [pc, #692]	; (8000a9c <MX_GPIO_Init+0x314>)
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	029b      	lsls	r3, r3, #10
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4baa      	ldr	r3, [pc, #680]	; (8000a9c <MX_GPIO_Init+0x314>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	4ba9      	ldr	r3, [pc, #676]	; (8000a9c <MX_GPIO_Init+0x314>)
 80007f8:	2180      	movs	r1, #128	; 0x80
 80007fa:	02c9      	lsls	r1, r1, #11
 80007fc:	430a      	orrs	r2, r1
 80007fe:	615a      	str	r2, [r3, #20]
 8000800:	4ba6      	ldr	r3, [pc, #664]	; (8000a9c <MX_GPIO_Init+0x314>)
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	02db      	lsls	r3, r3, #11
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	4ba3      	ldr	r3, [pc, #652]	; (8000a9c <MX_GPIO_Init+0x314>)
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	4ba2      	ldr	r3, [pc, #648]	; (8000a9c <MX_GPIO_Init+0x314>)
 8000814:	2180      	movs	r1, #128	; 0x80
 8000816:	0349      	lsls	r1, r1, #13
 8000818:	430a      	orrs	r2, r1
 800081a:	615a      	str	r2, [r3, #20]
 800081c:	4b9f      	ldr	r3, [pc, #636]	; (8000a9c <MX_GPIO_Init+0x314>)
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	2380      	movs	r3, #128	; 0x80
 8000822:	035b      	lsls	r3, r3, #13
 8000824:	4013      	ands	r3, r2
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED8_Pin|LED3_Pin|LED1_Pin|LED5_Pin, GPIO_PIN_SET);
 800082a:	23f0      	movs	r3, #240	; 0xf0
 800082c:	019b      	lsls	r3, r3, #6
 800082e:	489c      	ldr	r0, [pc, #624]	; (8000aa0 <MX_GPIO_Init+0x318>)
 8000830:	2201      	movs	r2, #1
 8000832:	0019      	movs	r1, r3
 8000834:	f000 ff90 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_LED_Pin|RED_LED_Pin|LED7_Pin, GPIO_PIN_SET);
 8000838:	499a      	ldr	r1, [pc, #616]	; (8000aa4 <MX_GPIO_Init+0x31c>)
 800083a:	2390      	movs	r3, #144	; 0x90
 800083c:	05db      	lsls	r3, r3, #23
 800083e:	2201      	movs	r2, #1
 8000840:	0018      	movs	r0, r3
 8000842:	f000 ff89 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPEAKER_Pin|CABEL9_O_Pin|CABEL10_O_Pin|CABEL8_O_Pin
 8000846:	2390      	movs	r3, #144	; 0x90
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	2200      	movs	r2, #0
 800084c:	21f4      	movs	r1, #244	; 0xf4
 800084e:	0018      	movs	r0, r3
 8000850:	f000 ff82 	bl	8001758 <HAL_GPIO_WritePin>
                          |CABEL6_O_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CABEL11_O_Pin|CABEL2_O_Pin, GPIO_PIN_RESET);
 8000854:	4b92      	ldr	r3, [pc, #584]	; (8000aa0 <MX_GPIO_Init+0x318>)
 8000856:	2200      	movs	r2, #0
 8000858:	2130      	movs	r1, #48	; 0x30
 800085a:	0018      	movs	r0, r3
 800085c:	f000 ff7c 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CABEL4_O_Pin|CABEL5_O_Pin|CABEL1_O_Pin|CABEL3_O_Pin
 8000860:	4991      	ldr	r1, [pc, #580]	; (8000aa8 <MX_GPIO_Init+0x320>)
 8000862:	4b92      	ldr	r3, [pc, #584]	; (8000aac <MX_GPIO_Init+0x324>)
 8000864:	2200      	movs	r2, #0
 8000866:	0018      	movs	r0, r3
 8000868:	f000 ff76 	bl	8001758 <HAL_GPIO_WritePin>
                          |CABEL7_O_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800086c:	4b90      	ldr	r3, [pc, #576]	; (8000ab0 <MX_GPIO_Init+0x328>)
 800086e:	2201      	movs	r2, #1
 8000870:	2104      	movs	r1, #4
 8000872:	0018      	movs	r0, r3
 8000874:	f000 ff70 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED9_Pin|LED10_Pin|LED11_Pin
 8000878:	23ce      	movs	r3, #206	; 0xce
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	488b      	ldr	r0, [pc, #556]	; (8000aac <MX_GPIO_Init+0x324>)
 800087e:	2201      	movs	r2, #1
 8000880:	0019      	movs	r1, r3
 8000882:	f000 ff69 	bl	8001758 <HAL_GPIO_WritePin>
                          |LED6_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : LED8_Pin */
  GPIO_InitStruct.Pin = LED8_Pin;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	0192      	lsls	r2, r2, #6
 800088c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2201      	movs	r2, #1
 8000892:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2201      	movs	r2, #1
 8000898:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	193b      	adds	r3, r7, r4
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED8_GPIO_Port, &GPIO_InitStruct);
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	4a7f      	ldr	r2, [pc, #508]	; (8000aa0 <MX_GPIO_Init+0x318>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f000 fde6 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : CABEL1_I_Pin CABEL3_I_Pin CABEL7_I_Pin */
  GPIO_InitStruct.Pin = CABEL1_I_Pin|CABEL3_I_Pin|CABEL7_I_Pin;
 80008ac:	0021      	movs	r1, r4
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2207      	movs	r2, #7
 80008b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2288      	movs	r2, #136	; 0x88
 80008b8:	0352      	lsls	r2, r2, #13
 80008ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008bc:	000c      	movs	r4, r1
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2202      	movs	r2, #2
 80008c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	4a76      	ldr	r2, [pc, #472]	; (8000aa0 <MX_GPIO_Init+0x318>)
 80008c8:	0019      	movs	r1, r3
 80008ca:	0010      	movs	r0, r2
 80008cc:	f000 fdd4 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 80008d0:	193b      	adds	r3, r7, r4
 80008d2:	220a      	movs	r2, #10
 80008d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	2201      	movs	r2, #1
 80008da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	2201      	movs	r2, #1
 80008e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	2203      	movs	r2, #3
 80008e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	193a      	adds	r2, r7, r4
 80008ea:	2390      	movs	r3, #144	; 0x90
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 fdc1 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPEAKER_Pin CABEL9_O_Pin CABEL10_O_Pin CABEL8_O_Pin
                           CABEL6_O_Pin */
  GPIO_InitStruct.Pin = SPEAKER_Pin|CABEL9_O_Pin|CABEL10_O_Pin|CABEL8_O_Pin
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	22f4      	movs	r2, #244	; 0xf4
 80008fa:	601a      	str	r2, [r3, #0]
                          |CABEL6_O_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	193b      	adds	r3, r7, r4
 80008fe:	2201      	movs	r2, #1
 8000900:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2202      	movs	r2, #2
 8000906:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	193a      	adds	r2, r7, r4
 8000910:	2390      	movs	r3, #144	; 0x90
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	0011      	movs	r1, r2
 8000916:	0018      	movs	r0, r3
 8000918:	f000 fdae 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800091c:	0021      	movs	r1, r4
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2210      	movs	r2, #16
 8000922:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2284      	movs	r2, #132	; 0x84
 8000928:	0392      	lsls	r2, r2, #14
 800092a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800092c:	000c      	movs	r4, r1
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2201      	movs	r2, #1
 8000932:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000934:	193b      	adds	r3, r7, r4
 8000936:	4a5f      	ldr	r2, [pc, #380]	; (8000ab4 <MX_GPIO_Init+0x32c>)
 8000938:	0019      	movs	r1, r3
 800093a:	0010      	movs	r0, r2
 800093c:	f000 fd9c 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : CABEL11_O_Pin CABEL2_O_Pin */
  GPIO_InitStruct.Pin = CABEL11_O_Pin|CABEL2_O_Pin;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2230      	movs	r2, #48	; 0x30
 8000944:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2201      	movs	r2, #1
 800094a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2202      	movs	r2, #2
 8000950:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000958:	193b      	adds	r3, r7, r4
 800095a:	4a51      	ldr	r2, [pc, #324]	; (8000aa0 <MX_GPIO_Init+0x318>)
 800095c:	0019      	movs	r1, r3
 800095e:	0010      	movs	r0, r2
 8000960:	f000 fd8a 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : CABEL4_O_Pin CABEL5_O_Pin CABEL1_O_Pin CABEL3_O_Pin
                           CABEL7_O_Pin */
  GPIO_InitStruct.Pin = CABEL4_O_Pin|CABEL5_O_Pin|CABEL1_O_Pin|CABEL3_O_Pin
 8000964:	193b      	adds	r3, r7, r4
 8000966:	4a50      	ldr	r2, [pc, #320]	; (8000aa8 <MX_GPIO_Init+0x320>)
 8000968:	601a      	str	r2, [r3, #0]
                          |CABEL7_O_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2201      	movs	r2, #1
 800096e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000970:	193b      	adds	r3, r7, r4
 8000972:	2202      	movs	r2, #2
 8000974:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	193b      	adds	r3, r7, r4
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	193b      	adds	r3, r7, r4
 800097e:	4a4b      	ldr	r2, [pc, #300]	; (8000aac <MX_GPIO_Init+0x324>)
 8000980:	0019      	movs	r1, r3
 8000982:	0010      	movs	r0, r2
 8000984:	f000 fd78 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : CABEL5_I_Pin CABEL4_I_Pin CABEL2_I_Pin */
  GPIO_InitStruct.Pin = CABEL5_I_Pin|CABEL4_I_Pin|CABEL2_I_Pin;
 8000988:	193b      	adds	r3, r7, r4
 800098a:	22e0      	movs	r2, #224	; 0xe0
 800098c:	01d2      	lsls	r2, r2, #7
 800098e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2288      	movs	r2, #136	; 0x88
 8000994:	0352      	lsls	r2, r2, #13
 8000996:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2202      	movs	r2, #2
 800099c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	4a42      	ldr	r2, [pc, #264]	; (8000aac <MX_GPIO_Init+0x324>)
 80009a2:	0019      	movs	r1, r3
 80009a4:	0010      	movs	r0, r2
 80009a6:	f000 fd67 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : CABEL9_I_Pin CABEL10_I_Pin CABEL8_I_Pin */
  GPIO_InitStruct.Pin = CABEL9_I_Pin|CABEL10_I_Pin|CABEL8_I_Pin;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	22e0      	movs	r2, #224	; 0xe0
 80009ae:	0112      	lsls	r2, r2, #4
 80009b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2288      	movs	r2, #136	; 0x88
 80009b6:	0352      	lsls	r2, r2, #13
 80009b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2202      	movs	r2, #2
 80009be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	193a      	adds	r2, r7, r4
 80009c2:	2390      	movs	r3, #144	; 0x90
 80009c4:	05db      	lsls	r3, r3, #23
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 fd55 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : CABEL6_I_Pin CABEL11_I_Pin */
  GPIO_InitStruct.Pin = CABEL6_I_Pin|CABEL11_I_Pin;
 80009ce:	0021      	movs	r1, r4
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	22c0      	movs	r2, #192	; 0xc0
 80009d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2288      	movs	r2, #136	; 0x88
 80009da:	0352      	lsls	r2, r2, #13
 80009dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2202      	movs	r2, #2
 80009e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009e4:	000c      	movs	r4, r1
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	4a32      	ldr	r2, [pc, #200]	; (8000ab4 <MX_GPIO_Init+0x32c>)
 80009ea:	0019      	movs	r1, r3
 80009ec:	0010      	movs	r0, r2
 80009ee:	f000 fd43 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED7_Pin */
  GPIO_InitStruct.Pin = LED7_Pin;
 80009f2:	0021      	movs	r1, r4
 80009f4:	187b      	adds	r3, r7, r1
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	0212      	lsls	r2, r2, #8
 80009fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	000c      	movs	r4, r1
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2201      	movs	r2, #1
 8000a02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2201      	movs	r2, #1
 8000a08:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED7_GPIO_Port, &GPIO_InitStruct);
 8000a10:	193a      	adds	r2, r7, r4
 8000a12:	2390      	movs	r3, #144	; 0x90
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	0011      	movs	r1, r2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f000 fd2d 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED1_Pin LED5_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED1_Pin|LED5_Pin;
 8000a1e:	0021      	movs	r1, r4
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	22e0      	movs	r2, #224	; 0xe0
 8000a24:	0152      	lsls	r2, r2, #5
 8000a26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	000c      	movs	r4, r1
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2201      	movs	r2, #1
 8000a34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2203      	movs	r2, #3
 8000a3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <MX_GPIO_Init+0x318>)
 8000a40:	0019      	movs	r1, r3
 8000a42:	0010      	movs	r0, r2
 8000a44:	f000 fd18 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2204      	movs	r2, #4
 8000a4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2201      	movs	r2, #1
 8000a52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	2201      	movs	r2, #1
 8000a58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5a:	193b      	adds	r3, r7, r4
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <MX_GPIO_Init+0x328>)
 8000a64:	0019      	movs	r1, r3
 8000a66:	0010      	movs	r0, r2
 8000a68:	f000 fd06 	bl	8001478 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED9_Pin LED10_Pin LED11_Pin
                           LED6_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED9_Pin|LED10_Pin|LED11_Pin
 8000a6c:	0021      	movs	r1, r4
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	22ce      	movs	r2, #206	; 0xce
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	601a      	str	r2, [r3, #0]
                          |LED6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2201      	movs	r2, #1
 8000a7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2201      	movs	r2, #1
 8000a80:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2203      	movs	r2, #3
 8000a86:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	4a08      	ldr	r2, [pc, #32]	; (8000aac <MX_GPIO_Init+0x324>)
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	0010      	movs	r0, r2
 8000a90:	f000 fcf2 	bl	8001478 <HAL_GPIO_Init>

}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b00b      	add	sp, #44	; 0x2c
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	48000800 	.word	0x48000800
 8000aa4:	0000800a 	.word	0x0000800a
 8000aa8:	00000c07 	.word	0x00000c07
 8000aac:	48000400 	.word	0x48000400
 8000ab0:	48000c00 	.word	0x48000c00
 8000ab4:	48001400 	.word	0x48001400

08000ab8 <HAL_GPIO_EXTI_Callback>:

static uint8_t wait = 0;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	0002      	movs	r2, r0
 8000ac0:	1dbb      	adds	r3, r7, #6
 8000ac2:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  switch(GPIO_Pin)
 8000ac4:	1dbb      	adds	r3, r7, #6
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	01d2      	lsls	r2, r2, #7
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d100      	bne.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x1a>
 8000ad0:	e069      	b.n	8000ba6 <HAL_GPIO_EXTI_Callback+0xee>
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	01d2      	lsls	r2, r2, #7
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	dd00      	ble.n	8000adc <HAL_GPIO_EXTI_Callback+0x24>
 8000ada:	e162      	b.n	8000da2 <HAL_GPIO_EXTI_Callback+0x2ea>
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	0192      	lsls	r2, r2, #6
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d100      	bne.n	8000ae6 <HAL_GPIO_EXTI_Callback+0x2e>
 8000ae4:	e091      	b.n	8000c0a <HAL_GPIO_EXTI_Callback+0x152>
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	0192      	lsls	r2, r2, #6
 8000aea:	4293      	cmp	r3, r2
 8000aec:	dd00      	ble.n	8000af0 <HAL_GPIO_EXTI_Callback+0x38>
 8000aee:	e158      	b.n	8000da2 <HAL_GPIO_EXTI_Callback+0x2ea>
 8000af0:	2280      	movs	r2, #128	; 0x80
 8000af2:	0152      	lsls	r2, r2, #5
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d100      	bne.n	8000afa <HAL_GPIO_EXTI_Callback+0x42>
 8000af8:	e09f      	b.n	8000c3a <HAL_GPIO_EXTI_Callback+0x182>
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	0152      	lsls	r2, r2, #5
 8000afe:	4293      	cmp	r3, r2
 8000b00:	dd00      	ble.n	8000b04 <HAL_GPIO_EXTI_Callback+0x4c>
 8000b02:	e14e      	b.n	8000da2 <HAL_GPIO_EXTI_Callback+0x2ea>
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d100      	bne.n	8000b0e <HAL_GPIO_EXTI_Callback+0x56>
 8000b0c:	e0ec      	b.n	8000ce8 <HAL_GPIO_EXTI_Callback+0x230>
 8000b0e:	2280      	movs	r2, #128	; 0x80
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	4293      	cmp	r3, r2
 8000b14:	dd00      	ble.n	8000b18 <HAL_GPIO_EXTI_Callback+0x60>
 8000b16:	e144      	b.n	8000da2 <HAL_GPIO_EXTI_Callback+0x2ea>
 8000b18:	2280      	movs	r2, #128	; 0x80
 8000b1a:	00d2      	lsls	r2, r2, #3
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d100      	bne.n	8000b22 <HAL_GPIO_EXTI_Callback+0x6a>
 8000b20:	e111      	b.n	8000d46 <HAL_GPIO_EXTI_Callback+0x28e>
 8000b22:	2280      	movs	r2, #128	; 0x80
 8000b24:	00d2      	lsls	r2, r2, #3
 8000b26:	4293      	cmp	r3, r2
 8000b28:	dd00      	ble.n	8000b2c <HAL_GPIO_EXTI_Callback+0x74>
 8000b2a:	e13a      	b.n	8000da2 <HAL_GPIO_EXTI_Callback+0x2ea>
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	0092      	lsls	r2, r2, #2
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d100      	bne.n	8000b36 <HAL_GPIO_EXTI_Callback+0x7e>
 8000b34:	e0f1      	b.n	8000d1a <HAL_GPIO_EXTI_Callback+0x262>
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	0092      	lsls	r2, r2, #2
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	dd00      	ble.n	8000b40 <HAL_GPIO_EXTI_Callback+0x88>
 8000b3e:	e130      	b.n	8000da2 <HAL_GPIO_EXTI_Callback+0x2ea>
 8000b40:	2b80      	cmp	r3, #128	; 0x80
 8000b42:	d100      	bne.n	8000b46 <HAL_GPIO_EXTI_Callback+0x8e>
 8000b44:	e115      	b.n	8000d72 <HAL_GPIO_EXTI_Callback+0x2ba>
 8000b46:	dd00      	ble.n	8000b4a <HAL_GPIO_EXTI_Callback+0x92>
 8000b48:	e12b      	b.n	8000da2 <HAL_GPIO_EXTI_Callback+0x2ea>
 8000b4a:	2b40      	cmp	r3, #64	; 0x40
 8000b4c:	d100      	bne.n	8000b50 <HAL_GPIO_EXTI_Callback+0x98>
 8000b4e:	e08e      	b.n	8000c6e <HAL_GPIO_EXTI_Callback+0x1b6>
 8000b50:	dd00      	ble.n	8000b54 <HAL_GPIO_EXTI_Callback+0x9c>
 8000b52:	e126      	b.n	8000da2 <HAL_GPIO_EXTI_Callback+0x2ea>
 8000b54:	2b10      	cmp	r3, #16
 8000b56:	d100      	bne.n	8000b5a <HAL_GPIO_EXTI_Callback+0xa2>
 8000b58:	e127      	b.n	8000daa <HAL_GPIO_EXTI_Callback+0x2f2>
 8000b5a:	dd00      	ble.n	8000b5e <HAL_GPIO_EXTI_Callback+0xa6>
 8000b5c:	e121      	b.n	8000da2 <HAL_GPIO_EXTI_Callback+0x2ea>
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	d100      	bne.n	8000b64 <HAL_GPIO_EXTI_Callback+0xac>
 8000b62:	e0a2      	b.n	8000caa <HAL_GPIO_EXTI_Callback+0x1f2>
 8000b64:	dd00      	ble.n	8000b68 <HAL_GPIO_EXTI_Callback+0xb0>
 8000b66:	e11c      	b.n	8000da2 <HAL_GPIO_EXTI_Callback+0x2ea>
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d002      	beq.n	8000b72 <HAL_GPIO_EXTI_Callback+0xba>
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d032      	beq.n	8000bd6 <HAL_GPIO_EXTI_Callback+0x11e>
 8000b70:	e117      	b.n	8000da2 <HAL_GPIO_EXTI_Callback+0x2ea>
  {
  	  case BUTTON_Pin:
  		  break;
  	  case CABEL1_I_Pin:
  		  countCabelInter++;
 8000b72:	4b9b      	ldr	r3, [pc, #620]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	4b99      	ldr	r3, [pc, #612]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000b7a:	601a      	str	r2, [r3, #0]
  		  if(count == 0 && countCabelInter == 1)
 8000b7c:	4b99      	ldr	r3, [pc, #612]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d000      	beq.n	8000b86 <HAL_GPIO_EXTI_Callback+0xce>
 8000b84:	e113      	b.n	8000dae <HAL_GPIO_EXTI_Callback+0x2f6>
 8000b86:	4b96      	ldr	r3, [pc, #600]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d000      	beq.n	8000b90 <HAL_GPIO_EXTI_Callback+0xd8>
 8000b8e:	e10e      	b.n	8000dae <HAL_GPIO_EXTI_Callback+0x2f6>
  		  {
  			  ResPinTest[0] = 1;
 8000b90:	4b95      	ldr	r3, [pc, #596]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	801a      	strh	r2, [r3, #0]
  			  LedOn(LED1_GPIO_Port, LED1_Pin);
 8000b96:	2380      	movs	r3, #128	; 0x80
 8000b98:	011b      	lsls	r3, r3, #4
 8000b9a:	4a94      	ldr	r2, [pc, #592]	; (8000dec <HAL_GPIO_EXTI_Callback+0x334>)
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	0010      	movs	r0, r2
 8000ba0:	f000 f962 	bl	8000e68 <LedOn>
  		  }
  		  break;
 8000ba4:	e103      	b.n	8000dae <HAL_GPIO_EXTI_Callback+0x2f6>
  	  case CABEL2_I_Pin:
  		  countCabelInter++;
 8000ba6:	4b8e      	ldr	r3, [pc, #568]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	4b8c      	ldr	r3, [pc, #560]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000bae:	601a      	str	r2, [r3, #0]
  		  if(count == 1 && countCabelInter == 1)
 8000bb0:	4b8c      	ldr	r3, [pc, #560]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d000      	beq.n	8000bba <HAL_GPIO_EXTI_Callback+0x102>
 8000bb8:	e0fb      	b.n	8000db2 <HAL_GPIO_EXTI_Callback+0x2fa>
 8000bba:	4b89      	ldr	r3, [pc, #548]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d000      	beq.n	8000bc4 <HAL_GPIO_EXTI_Callback+0x10c>
 8000bc2:	e0f6      	b.n	8000db2 <HAL_GPIO_EXTI_Callback+0x2fa>
  		  {
  			  ResPinTest[1] = 1;
 8000bc4:	4b88      	ldr	r3, [pc, #544]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	805a      	strh	r2, [r3, #2]
  			  LedOn(LED2_GPIO_Port, LED2_Pin);
 8000bca:	4b89      	ldr	r3, [pc, #548]	; (8000df0 <HAL_GPIO_EXTI_Callback+0x338>)
 8000bcc:	2108      	movs	r1, #8
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 f94a 	bl	8000e68 <LedOn>
  		  }
  		  break;
 8000bd4:	e0ed      	b.n	8000db2 <HAL_GPIO_EXTI_Callback+0x2fa>
  	  case CABEL3_I_Pin:
  		  countCabelInter++;
 8000bd6:	4b82      	ldr	r3, [pc, #520]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	4b80      	ldr	r3, [pc, #512]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000bde:	601a      	str	r2, [r3, #0]
  		  if(count == 2 && countCabelInter == 1)
 8000be0:	4b80      	ldr	r3, [pc, #512]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d000      	beq.n	8000bea <HAL_GPIO_EXTI_Callback+0x132>
 8000be8:	e0e5      	b.n	8000db6 <HAL_GPIO_EXTI_Callback+0x2fe>
 8000bea:	4b7d      	ldr	r3, [pc, #500]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d000      	beq.n	8000bf4 <HAL_GPIO_EXTI_Callback+0x13c>
 8000bf2:	e0e0      	b.n	8000db6 <HAL_GPIO_EXTI_Callback+0x2fe>
  		  {
  			  ResPinTest[2] = 1;
 8000bf4:	4b7c      	ldr	r3, [pc, #496]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	809a      	strh	r2, [r3, #4]
  			  LedOn(LED3_GPIO_Port, LED3_Pin);
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	4a7b      	ldr	r2, [pc, #492]	; (8000dec <HAL_GPIO_EXTI_Callback+0x334>)
 8000c00:	0019      	movs	r1, r3
 8000c02:	0010      	movs	r0, r2
 8000c04:	f000 f930 	bl	8000e68 <LedOn>
  		  }
  	  	  break;
 8000c08:	e0d5      	b.n	8000db6 <HAL_GPIO_EXTI_Callback+0x2fe>
  	  case CABEL4_I_Pin:
  		  countCabelInter++;
 8000c0a:	4b75      	ldr	r3, [pc, #468]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	4b73      	ldr	r3, [pc, #460]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c12:	601a      	str	r2, [r3, #0]
  		  if(count == 3 && countCabelInter == 1)
 8000c14:	4b73      	ldr	r3, [pc, #460]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d000      	beq.n	8000c1e <HAL_GPIO_EXTI_Callback+0x166>
 8000c1c:	e0cd      	b.n	8000dba <HAL_GPIO_EXTI_Callback+0x302>
 8000c1e:	4b70      	ldr	r3, [pc, #448]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d000      	beq.n	8000c28 <HAL_GPIO_EXTI_Callback+0x170>
 8000c26:	e0c8      	b.n	8000dba <HAL_GPIO_EXTI_Callback+0x302>
  		  {
  			  ResPinTest[3] = 1;
 8000c28:	4b6f      	ldr	r3, [pc, #444]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	80da      	strh	r2, [r3, #6]
  			  LedOn(LED4_GPIO_Port, LED4_Pin);
 8000c2e:	4b71      	ldr	r3, [pc, #452]	; (8000df4 <HAL_GPIO_EXTI_Callback+0x33c>)
 8000c30:	2104      	movs	r1, #4
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 f918 	bl	8000e68 <LedOn>
  		  }
  		  break;
 8000c38:	e0bf      	b.n	8000dba <HAL_GPIO_EXTI_Callback+0x302>
  	  case CABEL5_I_Pin:
  		  countCabelInter++;
 8000c3a:	4b69      	ldr	r3, [pc, #420]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	4b67      	ldr	r3, [pc, #412]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c42:	601a      	str	r2, [r3, #0]
  		  if(count == 4 && countCabelInter == 1)
 8000c44:	4b67      	ldr	r3, [pc, #412]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d000      	beq.n	8000c4e <HAL_GPIO_EXTI_Callback+0x196>
 8000c4c:	e0b7      	b.n	8000dbe <HAL_GPIO_EXTI_Callback+0x306>
 8000c4e:	4b64      	ldr	r3, [pc, #400]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d000      	beq.n	8000c58 <HAL_GPIO_EXTI_Callback+0x1a0>
 8000c56:	e0b2      	b.n	8000dbe <HAL_GPIO_EXTI_Callback+0x306>
  		  {
  			  ResPinTest[4] = 1;
 8000c58:	4b63      	ldr	r3, [pc, #396]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	811a      	strh	r2, [r3, #8]
  			  LedOn(LED5_GPIO_Port, LED5_Pin);
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	015b      	lsls	r3, r3, #5
 8000c62:	4a62      	ldr	r2, [pc, #392]	; (8000dec <HAL_GPIO_EXTI_Callback+0x334>)
 8000c64:	0019      	movs	r1, r3
 8000c66:	0010      	movs	r0, r2
 8000c68:	f000 f8fe 	bl	8000e68 <LedOn>
  		  }
  		  break;
 8000c6c:	e0a7      	b.n	8000dbe <HAL_GPIO_EXTI_Callback+0x306>
  	  case CABEL6_I_Pin:
  		  countCabelInter++;
 8000c6e:	4b5c      	ldr	r3, [pc, #368]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	4b5a      	ldr	r3, [pc, #360]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c76:	601a      	str	r2, [r3, #0]
  		  if(count == 5 && (countCabelInter == 1 || countCabelInter == 2))
 8000c78:	4b5a      	ldr	r3, [pc, #360]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b05      	cmp	r3, #5
 8000c7e:	d000      	beq.n	8000c82 <HAL_GPIO_EXTI_Callback+0x1ca>
 8000c80:	e09f      	b.n	8000dc2 <HAL_GPIO_EXTI_Callback+0x30a>
 8000c82:	4b57      	ldr	r3, [pc, #348]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d004      	beq.n	8000c94 <HAL_GPIO_EXTI_Callback+0x1dc>
 8000c8a:	4b55      	ldr	r3, [pc, #340]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d000      	beq.n	8000c94 <HAL_GPIO_EXTI_Callback+0x1dc>
 8000c92:	e096      	b.n	8000dc2 <HAL_GPIO_EXTI_Callback+0x30a>
  		  {
  			  LedOn(LED6_GPIO_Port, LED6_Pin);
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4a55      	ldr	r2, [pc, #340]	; (8000df0 <HAL_GPIO_EXTI_Callback+0x338>)
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	f000 f8e3 	bl	8000e68 <LedOn>
  			  ResPinTest[5] = 1;
 8000ca2:	4b51      	ldr	r3, [pc, #324]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	815a      	strh	r2, [r3, #10]
  		  }
  		  break;
 8000ca8:	e08b      	b.n	8000dc2 <HAL_GPIO_EXTI_Callback+0x30a>
  	  case CABEL7_I_Pin:
  		  countCabelInter++;
 8000caa:	4b4d      	ldr	r3, [pc, #308]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000cb2:	601a      	str	r2, [r3, #0]
  		  if(count == 6 && (countCabelInter == 1 || countCabelInter == 2))
 8000cb4:	4b4b      	ldr	r3, [pc, #300]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b06      	cmp	r3, #6
 8000cba:	d000      	beq.n	8000cbe <HAL_GPIO_EXTI_Callback+0x206>
 8000cbc:	e083      	b.n	8000dc6 <HAL_GPIO_EXTI_Callback+0x30e>
 8000cbe:	4b48      	ldr	r3, [pc, #288]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d004      	beq.n	8000cd0 <HAL_GPIO_EXTI_Callback+0x218>
 8000cc6:	4b46      	ldr	r3, [pc, #280]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d000      	beq.n	8000cd0 <HAL_GPIO_EXTI_Callback+0x218>
 8000cce:	e07a      	b.n	8000dc6 <HAL_GPIO_EXTI_Callback+0x30e>
  		  {
  			  ResPinTest[6] = 1;
 8000cd0:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	819a      	strh	r2, [r3, #12]
  			  LedOn(LED7_GPIO_Port, LED7_Pin);
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	021a      	lsls	r2, r3, #8
 8000cda:	2390      	movs	r3, #144	; 0x90
 8000cdc:	05db      	lsls	r3, r3, #23
 8000cde:	0011      	movs	r1, r2
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 f8c1 	bl	8000e68 <LedOn>
  		  }
  		  break;
 8000ce6:	e06e      	b.n	8000dc6 <HAL_GPIO_EXTI_Callback+0x30e>
  	  case CABEL8_I_Pin:
  		  countCabelInter++;
 8000ce8:	4b3d      	ldr	r3, [pc, #244]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	4b3c      	ldr	r3, [pc, #240]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000cf0:	601a      	str	r2, [r3, #0]
  		  if(count == 7 && countCabelInter == 1)
 8000cf2:	4b3c      	ldr	r3, [pc, #240]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b07      	cmp	r3, #7
 8000cf8:	d000      	beq.n	8000cfc <HAL_GPIO_EXTI_Callback+0x244>
 8000cfa:	e066      	b.n	8000dca <HAL_GPIO_EXTI_Callback+0x312>
 8000cfc:	4b38      	ldr	r3, [pc, #224]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d162      	bne.n	8000dca <HAL_GPIO_EXTI_Callback+0x312>
  		  {
  			  ResPinTest[7] = 1;
 8000d04:	4b38      	ldr	r3, [pc, #224]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	81da      	strh	r2, [r3, #14]
  			  LedOn(LED8_GPIO_Port, LED8_Pin);
 8000d0a:	2380      	movs	r3, #128	; 0x80
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	4a37      	ldr	r2, [pc, #220]	; (8000dec <HAL_GPIO_EXTI_Callback+0x334>)
 8000d10:	0019      	movs	r1, r3
 8000d12:	0010      	movs	r0, r2
 8000d14:	f000 f8a8 	bl	8000e68 <LedOn>
  		  }
  		  break;
 8000d18:	e057      	b.n	8000dca <HAL_GPIO_EXTI_Callback+0x312>
  	  case CABEL9_I_Pin:
  		  countCabelInter++;
 8000d1a:	4b31      	ldr	r3, [pc, #196]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d22:	601a      	str	r2, [r3, #0]
  		  if(count == 8 && countCabelInter == 1)
 8000d24:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b08      	cmp	r3, #8
 8000d2a:	d150      	bne.n	8000dce <HAL_GPIO_EXTI_Callback+0x316>
 8000d2c:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d14c      	bne.n	8000dce <HAL_GPIO_EXTI_Callback+0x316>
  		  {
  			  ResPinTest[8] = 1;
 8000d34:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	821a      	strh	r2, [r3, #16]
  			  LedOn(LED9_GPIO_Port, LED9_Pin);
 8000d3a:	4b2d      	ldr	r3, [pc, #180]	; (8000df0 <HAL_GPIO_EXTI_Callback+0x338>)
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 f892 	bl	8000e68 <LedOn>
  		  }
  		  break;
 8000d44:	e043      	b.n	8000dce <HAL_GPIO_EXTI_Callback+0x316>
  	  case CABEL10_I_Pin:
  		  countCabelInter++;
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d4e:	601a      	str	r2, [r3, #0]
  		  if(count == 9 && countCabelInter == 1)
 8000d50:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b09      	cmp	r3, #9
 8000d56:	d13c      	bne.n	8000dd2 <HAL_GPIO_EXTI_Callback+0x31a>
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d138      	bne.n	8000dd2 <HAL_GPIO_EXTI_Callback+0x31a>
  		  {
  			  ResPinTest[9] = 1;
 8000d60:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	825a      	strh	r2, [r3, #18]
  			  LedOn(LED10_GPIO_Port, LED10_Pin);
 8000d66:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <HAL_GPIO_EXTI_Callback+0x338>)
 8000d68:	2120      	movs	r1, #32
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f000 f87c 	bl	8000e68 <LedOn>
  		  }
  		  break;
 8000d70:	e02f      	b.n	8000dd2 <HAL_GPIO_EXTI_Callback+0x31a>
  	  case CABEL11_I_Pin:
  		  countCabelInter++;
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d7a:	601a      	str	r2, [r3, #0]
  		  if(count == 10 && countCabelInter == 1)
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_GPIO_EXTI_Callback+0x32c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b0a      	cmp	r3, #10
 8000d82:	d128      	bne.n	8000dd6 <HAL_GPIO_EXTI_Callback+0x31e>
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_GPIO_EXTI_Callback+0x328>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d124      	bne.n	8000dd6 <HAL_GPIO_EXTI_Callback+0x31e>
  		  {
  			  ResPinTest[10] = 1;
 8000d8c:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <HAL_GPIO_EXTI_Callback+0x330>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	829a      	strh	r2, [r3, #20]
  			  LedOn(LED11_GPIO_Port, LED11_Pin);
 8000d92:	2380      	movs	r3, #128	; 0x80
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4a16      	ldr	r2, [pc, #88]	; (8000df0 <HAL_GPIO_EXTI_Callback+0x338>)
 8000d98:	0019      	movs	r1, r3
 8000d9a:	0010      	movs	r0, r2
 8000d9c:	f000 f864 	bl	8000e68 <LedOn>
  		  }
  		  break;
 8000da0:	e019      	b.n	8000dd6 <HAL_GPIO_EXTI_Callback+0x31e>
  	  default:
  		  TestRes = ERROR;
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_GPIO_EXTI_Callback+0x340>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
  		  break;
 8000da8:	e016      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x320>
  		  break;
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	e014      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x320>
  		  break;
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	e012      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x320>
  		  break;
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	e010      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x320>
  	  	  break;
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	e00e      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x320>
  		  break;
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	e00c      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x320>
  		  break;
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	e00a      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x320>
  		  break;
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x320>
  		  break;
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x320>
  		  break;
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x320>
  		  break;
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x320>
  		  break;
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_EXTI_Callback+0x320>
  		  break;
 8000dd6:	46c0      	nop			; (mov r8, r8)
  }

}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b002      	add	sp, #8
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200001e0 	.word	0x200001e0
 8000de4:	200001dc 	.word	0x200001dc
 8000de8:	200001c4 	.word	0x200001c4
 8000dec:	48000800 	.word	0x48000800
 8000df0:	48000400 	.word	0x48000400
 8000df4:	48000c00 	.word	0x48000c00
 8000df8:	200001f0 	.word	0x200001f0

08000dfc <GetPort>:
}



GPIO_TypeDef* GetPort(uint16_t GPIO_Pin)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	0002      	movs	r2, r0
 8000e04:	1dbb      	adds	r3, r7, #6
 8000e06:	801a      	strh	r2, [r3, #0]
	switch(GPIO_Pin)
 8000e08:	1dbb      	adds	r3, r7, #6
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	2b0a      	cmp	r3, #10
 8000e0e:	d81e      	bhi.n	8000e4e <GetPort+0x52>
 8000e10:	009a      	lsls	r2, r3, #2
 8000e12:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <GetPort+0x60>)
 8000e14:	18d3      	adds	r3, r2, r3
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	469f      	mov	pc, r3
	{
	case 0:
		return CABEL1_O_GPIO_Port;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <GetPort+0x64>)
 8000e1c:	e019      	b.n	8000e52 <GetPort+0x56>
		break;
	case 1:
		return CABEL2_O_GPIO_Port;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <GetPort+0x68>)
 8000e20:	e017      	b.n	8000e52 <GetPort+0x56>
		break;
	case 2:
		return CABEL3_O_GPIO_Port;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <GetPort+0x64>)
 8000e24:	e015      	b.n	8000e52 <GetPort+0x56>
		break;
	case 3:
		return CABEL4_O_GPIO_Port;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <GetPort+0x64>)
 8000e28:	e013      	b.n	8000e52 <GetPort+0x56>
		break;
	case 4:
		return CABEL5_O_GPIO_Port;
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <GetPort+0x64>)
 8000e2c:	e011      	b.n	8000e52 <GetPort+0x56>
		break;
	case 5:
		return CABEL6_O_GPIO_Port;
 8000e2e:	2390      	movs	r3, #144	; 0x90
 8000e30:	05db      	lsls	r3, r3, #23
 8000e32:	e00e      	b.n	8000e52 <GetPort+0x56>
		break;
	case 6:
		return CABEL7_O_GPIO_Port;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <GetPort+0x64>)
 8000e36:	e00c      	b.n	8000e52 <GetPort+0x56>
		break;
	case 7:
		return CABEL8_O_GPIO_Port;
 8000e38:	2390      	movs	r3, #144	; 0x90
 8000e3a:	05db      	lsls	r3, r3, #23
 8000e3c:	e009      	b.n	8000e52 <GetPort+0x56>
		break;
	case 8:
		return CABEL9_O_GPIO_Port;
 8000e3e:	2390      	movs	r3, #144	; 0x90
 8000e40:	05db      	lsls	r3, r3, #23
 8000e42:	e006      	b.n	8000e52 <GetPort+0x56>
		break;
	case 9:
		return CABEL10_O_GPIO_Port;
 8000e44:	2390      	movs	r3, #144	; 0x90
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	e003      	b.n	8000e52 <GetPort+0x56>
		break;
	case 10:
		return CABEL11_O_GPIO_Port;
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <GetPort+0x68>)
 8000e4c:	e001      	b.n	8000e52 <GetPort+0x56>
		break;
	default:
		return GPIOA;
 8000e4e:	2390      	movs	r3, #144	; 0x90
 8000e50:	05db      	lsls	r3, r3, #23
		break;
	}
}
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	08003a5c 	.word	0x08003a5c
 8000e60:	48000400 	.word	0x48000400
 8000e64:	48000800 	.word	0x48000800

08000e68 <LedOn>:

void LedOn(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	000a      	movs	r2, r1
 8000e72:	1cbb      	adds	r3, r7, #2
 8000e74:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000e76:	1cbb      	adds	r3, r7, #2
 8000e78:	8819      	ldrh	r1, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 fc6a 	bl	8001758 <HAL_GPIO_WritePin>
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b002      	add	sp, #8
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <Error_Handler+0x4>
	...

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_MspInit+0x44>)
 8000e9c:	699a      	ldr	r2, [r3, #24]
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	619a      	str	r2, [r3, #24]
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	2201      	movs	r2, #1
 8000eac:	4013      	ands	r3, r2
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb4:	69da      	ldr	r2, [r3, #28]
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb8:	2180      	movs	r1, #128	; 0x80
 8000eba:	0549      	lsls	r1, r1, #21
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	61da      	str	r2, [r3, #28]
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ec2:	69da      	ldr	r2, [r3, #28]
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	055b      	lsls	r3, r3, #21
 8000ec8:	4013      	ands	r3, r2
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a06      	ldr	r2, [pc, #24]	; (8000f04 <HAL_RTC_MspInit+0x28>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d106      	bne.n	8000efc <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_RTC_MspInit+0x2c>)
 8000ef0:	6a1a      	ldr	r2, [r3, #32]
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <HAL_RTC_MspInit+0x2c>)
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	0209      	lsls	r1, r1, #8
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b002      	add	sp, #8
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40002800 	.word	0x40002800
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <HAL_TIM_Base_MspInit+0x5c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d10c      	bne.n	8000f38 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_TIM_Base_MspInit+0x60>)
 8000f20:	69da      	ldr	r2, [r3, #28]
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_TIM_Base_MspInit+0x60>)
 8000f24:	2110      	movs	r1, #16
 8000f26:	430a      	orrs	r2, r1
 8000f28:	61da      	str	r2, [r3, #28]
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_TIM_Base_MspInit+0x60>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	2210      	movs	r2, #16
 8000f30:	4013      	ands	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f36:	e012      	b.n	8000f5e <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM14)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_TIM_Base_MspInit+0x64>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d10d      	bne.n	8000f5e <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_TIM_Base_MspInit+0x60>)
 8000f44:	69da      	ldr	r2, [r3, #28]
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_TIM_Base_MspInit+0x60>)
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	0049      	lsls	r1, r1, #1
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	61da      	str	r2, [r3, #28]
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_TIM_Base_MspInit+0x60>)
 8000f52:	69da      	ldr	r2, [r3, #28]
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b004      	add	sp, #16
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	40001000 	.word	0x40001000
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40002000 	.word	0x40002000

08000f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b08b      	sub	sp, #44	; 0x2c
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	2414      	movs	r4, #20
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	0018      	movs	r0, r3
 8000f82:	2314      	movs	r3, #20
 8000f84:	001a      	movs	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	f002 f880 	bl	800308c <memset>
  if(huart->Instance==USART1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <HAL_UART_MspInit+0x90>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d131      	bne.n	8000ffa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_UART_MspInit+0x94>)
 8000f98:	699a      	ldr	r2, [r3, #24]
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <HAL_UART_MspInit+0x94>)
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	01c9      	lsls	r1, r1, #7
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	619a      	str	r2, [r3, #24]
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <HAL_UART_MspInit+0x94>)
 8000fa6:	699a      	ldr	r2, [r3, #24]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	01db      	lsls	r3, r3, #7
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <HAL_UART_MspInit+0x94>)
 8000fb4:	695a      	ldr	r2, [r3, #20]
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_UART_MspInit+0x94>)
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	02c9      	lsls	r1, r1, #11
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	615a      	str	r2, [r3, #20]
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_UART_MspInit+0x94>)
 8000fc2:	695a      	ldr	r2, [r3, #20]
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	02db      	lsls	r3, r3, #11
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fce:	0021      	movs	r1, r4
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	22c0      	movs	r2, #192	; 0xc0
 8000fd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2202      	movs	r2, #2
 8000fda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	4a06      	ldr	r2, [pc, #24]	; (800100c <HAL_UART_MspInit+0x98>)
 8000ff2:	0019      	movs	r1, r3
 8000ff4:	0010      	movs	r0, r2
 8000ff6:	f000 fa3f 	bl	8001478 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b00b      	add	sp, #44	; 0x2c
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	40013800 	.word	0x40013800
 8001008:	40021000 	.word	0x40021000
 800100c:	48000400 	.word	0x48000400

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 f902 	bl	800123c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CABEL1_I_Pin);
 800104c:	2001      	movs	r0, #1
 800104e:	f000 fba1 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL3_I_Pin);
 8001052:	2002      	movs	r0, #2
 8001054:	f000 fb9e 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CABEL7_I_Pin);
 8001062:	2004      	movs	r0, #4
 8001064:	f000 fb96 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001072:	2010      	movs	r0, #16
 8001074:	f000 fb8e 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL6_I_Pin);
 8001078:	2040      	movs	r0, #64	; 0x40
 800107a:	f000 fb8b 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL11_I_Pin);
 800107e:	2080      	movs	r0, #128	; 0x80
 8001080:	f000 fb88 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL9_I_Pin);
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	0018      	movs	r0, r3
 800108a:	f000 fb83 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL10_I_Pin);
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	0018      	movs	r0, r3
 8001094:	f000 fb7e 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL8_I_Pin);
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	0018      	movs	r0, r3
 800109e:	f000 fb79 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL5_I_Pin);
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	015b      	lsls	r3, r3, #5
 80010a6:	0018      	movs	r0, r3
 80010a8:	f000 fb74 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL4_I_Pin);
 80010ac:	2380      	movs	r3, #128	; 0x80
 80010ae:	019b      	lsls	r3, r3, #6
 80010b0:	0018      	movs	r0, r3
 80010b2:	f000 fb6f 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL2_I_Pin);
 80010b6:	2380      	movs	r3, #128	; 0x80
 80010b8:	01db      	lsls	r3, r3, #7
 80010ba:	0018      	movs	r0, r3
 80010bc:	f000 fb6a 	bl	8001794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <TIM6_IRQHandler+0x14>)
 80010ce:	0018      	movs	r0, r3
 80010d0:	f001 f9ef 	bl	80024b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80010d4:	46c0      	nop			; (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	200000ac 	.word	0x200000ac

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	18d3      	adds	r3, r2, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f001 ff92 	bl	8003038 <__errno>
 8001114:	0003      	movs	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	2301      	movs	r3, #1
 800111c:	425b      	negs	r3, r3
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	18d2      	adds	r2, r2, r3
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <_sbrk+0x64>)
 8001130:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	0018      	movs	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	b006      	add	sp, #24
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20002000 	.word	0x20002000
 8001140:	00000400 	.word	0x00000400
 8001144:	200001f4 	.word	0x200001f4
 8001148:	20000210 	.word	0x20000210

0800114c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800115a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480d      	ldr	r0, [pc, #52]	; (8001194 <LoopForever+0x6>)
  ldr r1, =_edata
 800115e:	490e      	ldr	r1, [pc, #56]	; (8001198 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <LoopForever+0xe>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001174:	4c0b      	ldr	r4, [pc, #44]	; (80011a4 <LoopForever+0x16>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001182:	f7ff ffe3 	bl	800114c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001186:	f001 ff5d 	bl	8003044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800118a:	f7ff f85b 	bl	8000244 <main>

0800118e <LoopForever>:

LoopForever:
    b LoopForever
 800118e:	e7fe      	b.n	800118e <LoopForever>
  ldr   r0, =_estack
 8001190:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001198:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800119c:	08003adc 	.word	0x08003adc
  ldr r2, =_sbss
 80011a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011a4:	2000020c 	.word	0x2000020c

080011a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC1_IRQHandler>
	...

080011ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_Init+0x24>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_Init+0x24>)
 80011b6:	2110      	movs	r1, #16
 80011b8:	430a      	orrs	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011bc:	2003      	movs	r0, #3
 80011be:	f000 f809 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c2:	f7ff fe67 	bl	8000e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	0018      	movs	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	40022000 	.word	0x40022000

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_InitTick+0x5c>)
 80011de:	681c      	ldr	r4, [r3, #0]
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_InitTick+0x60>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	0019      	movs	r1, r3
 80011e6:	23fa      	movs	r3, #250	; 0xfa
 80011e8:	0098      	lsls	r0, r3, #2
 80011ea:	f7fe ff9f 	bl	800012c <__udivsi3>
 80011ee:	0003      	movs	r3, r0
 80011f0:	0019      	movs	r1, r3
 80011f2:	0020      	movs	r0, r4
 80011f4:	f7fe ff9a 	bl	800012c <__udivsi3>
 80011f8:	0003      	movs	r3, r0
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 f92f 	bl	800145e <HAL_SYSTICK_Config>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d001      	beq.n	8001208 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e00f      	b.n	8001228 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b03      	cmp	r3, #3
 800120c:	d80b      	bhi.n	8001226 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	2301      	movs	r3, #1
 8001212:	425b      	negs	r3, r3
 8001214:	2200      	movs	r2, #0
 8001216:	0018      	movs	r0, r3
 8001218:	f000 f8fc 	bl	8001414 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_InitTick+0x64>)
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
 8001224:	e000      	b.n	8001228 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
}
 8001228:	0018      	movs	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	b003      	add	sp, #12
 800122e:	bd90      	pop	{r4, r7, pc}
 8001230:	20000000 	.word	0x20000000
 8001234:	20000008 	.word	0x20000008
 8001238:	20000004 	.word	0x20000004

0800123c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_IncTick+0x1c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	001a      	movs	r2, r3
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_IncTick+0x20>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	18d2      	adds	r2, r2, r3
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_IncTick+0x20>)
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	20000008 	.word	0x20000008
 800125c:	200001f8 	.word	0x200001f8

08001260 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b02      	ldr	r3, [pc, #8]	; (8001270 <HAL_GetTick+0x10>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	0018      	movs	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	200001f8 	.word	0x200001f8

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff fff0 	bl	8001260 <HAL_GetTick>
 8001280:	0003      	movs	r3, r0
 8001282:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	001a      	movs	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	189b      	adds	r3, r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800129a:	46c0      	nop			; (mov r8, r8)
 800129c:	f7ff ffe0 	bl	8001260 <HAL_GetTick>
 80012a0:	0002      	movs	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b004      	add	sp, #16
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	20000008 	.word	0x20000008

080012bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	0002      	movs	r2, r0
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012c8:	1dfb      	adds	r3, r7, #7
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b7f      	cmp	r3, #127	; 0x7f
 80012ce:	d809      	bhi.n	80012e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d0:	1dfb      	adds	r3, r7, #7
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	001a      	movs	r2, r3
 80012d6:	231f      	movs	r3, #31
 80012d8:	401a      	ands	r2, r3
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <__NVIC_EnableIRQ+0x30>)
 80012dc:	2101      	movs	r1, #1
 80012de:	4091      	lsls	r1, r2
 80012e0:	000a      	movs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
  }
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	0002      	movs	r2, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	1dfb      	adds	r3, r7, #7
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b7f      	cmp	r3, #127	; 0x7f
 8001304:	d828      	bhi.n	8001358 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001306:	4a2f      	ldr	r2, [pc, #188]	; (80013c4 <__NVIC_SetPriority+0xd4>)
 8001308:	1dfb      	adds	r3, r7, #7
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	33c0      	adds	r3, #192	; 0xc0
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	589b      	ldr	r3, [r3, r2]
 8001316:	1dfa      	adds	r2, r7, #7
 8001318:	7812      	ldrb	r2, [r2, #0]
 800131a:	0011      	movs	r1, r2
 800131c:	2203      	movs	r2, #3
 800131e:	400a      	ands	r2, r1
 8001320:	00d2      	lsls	r2, r2, #3
 8001322:	21ff      	movs	r1, #255	; 0xff
 8001324:	4091      	lsls	r1, r2
 8001326:	000a      	movs	r2, r1
 8001328:	43d2      	mvns	r2, r2
 800132a:	401a      	ands	r2, r3
 800132c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	019b      	lsls	r3, r3, #6
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	401a      	ands	r2, r3
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	0018      	movs	r0, r3
 800133c:	2303      	movs	r3, #3
 800133e:	4003      	ands	r3, r0
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001344:	481f      	ldr	r0, [pc, #124]	; (80013c4 <__NVIC_SetPriority+0xd4>)
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b25b      	sxtb	r3, r3
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	430a      	orrs	r2, r1
 8001350:	33c0      	adds	r3, #192	; 0xc0
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001356:	e031      	b.n	80013bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001358:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <__NVIC_SetPriority+0xd8>)
 800135a:	1dfb      	adds	r3, r7, #7
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	0019      	movs	r1, r3
 8001360:	230f      	movs	r3, #15
 8001362:	400b      	ands	r3, r1
 8001364:	3b08      	subs	r3, #8
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	3306      	adds	r3, #6
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	18d3      	adds	r3, r2, r3
 800136e:	3304      	adds	r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	1dfa      	adds	r2, r7, #7
 8001374:	7812      	ldrb	r2, [r2, #0]
 8001376:	0011      	movs	r1, r2
 8001378:	2203      	movs	r2, #3
 800137a:	400a      	ands	r2, r1
 800137c:	00d2      	lsls	r2, r2, #3
 800137e:	21ff      	movs	r1, #255	; 0xff
 8001380:	4091      	lsls	r1, r2
 8001382:	000a      	movs	r2, r1
 8001384:	43d2      	mvns	r2, r2
 8001386:	401a      	ands	r2, r3
 8001388:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	019b      	lsls	r3, r3, #6
 800138e:	22ff      	movs	r2, #255	; 0xff
 8001390:	401a      	ands	r2, r3
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	0018      	movs	r0, r3
 8001398:	2303      	movs	r3, #3
 800139a:	4003      	ands	r3, r0
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a0:	4809      	ldr	r0, [pc, #36]	; (80013c8 <__NVIC_SetPriority+0xd8>)
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	001c      	movs	r4, r3
 80013a8:	230f      	movs	r3, #15
 80013aa:	4023      	ands	r3, r4
 80013ac:	3b08      	subs	r3, #8
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	430a      	orrs	r2, r1
 80013b2:	3306      	adds	r3, #6
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	18c3      	adds	r3, r0, r3
 80013b8:	3304      	adds	r3, #4
 80013ba:	601a      	str	r2, [r3, #0]
}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b003      	add	sp, #12
 80013c2:	bd90      	pop	{r4, r7, pc}
 80013c4:	e000e100 	.word	0xe000e100
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	1e5a      	subs	r2, r3, #1
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	045b      	lsls	r3, r3, #17
 80013dc:	429a      	cmp	r2, r3
 80013de:	d301      	bcc.n	80013e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e0:	2301      	movs	r3, #1
 80013e2:	e010      	b.n	8001406 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <SysTick_Config+0x44>)
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	3a01      	subs	r2, #1
 80013ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ec:	2301      	movs	r3, #1
 80013ee:	425b      	negs	r3, r3
 80013f0:	2103      	movs	r1, #3
 80013f2:	0018      	movs	r0, r3
 80013f4:	f7ff ff7c 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x44>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x44>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	0018      	movs	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	b002      	add	sp, #8
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	210f      	movs	r1, #15
 8001420:	187b      	adds	r3, r7, r1
 8001422:	1c02      	adds	r2, r0, #0
 8001424:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	187b      	adds	r3, r7, r1
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	0011      	movs	r1, r2
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <__NVIC_SetPriority>
}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b004      	add	sp, #16
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	0002      	movs	r2, r0
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800144a:	1dfb      	adds	r3, r7, #7
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	b25b      	sxtb	r3, r3
 8001450:	0018      	movs	r0, r3
 8001452:	f7ff ff33 	bl	80012bc <__NVIC_EnableIRQ>
}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	0018      	movs	r0, r3
 800146a:	f7ff ffaf 	bl	80013cc <SysTick_Config>
 800146e:	0003      	movs	r3, r0
}
 8001470:	0018      	movs	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	b002      	add	sp, #8
 8001476:	bd80      	pop	{r7, pc}

08001478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001486:	e14f      	b.n	8001728 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	4091      	lsls	r1, r2
 8001492:	000a      	movs	r2, r1
 8001494:	4013      	ands	r3, r2
 8001496:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d100      	bne.n	80014a0 <HAL_GPIO_Init+0x28>
 800149e:	e140      	b.n	8001722 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2203      	movs	r2, #3
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d005      	beq.n	80014b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2203      	movs	r2, #3
 80014b2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d130      	bne.n	800151a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	409a      	lsls	r2, r3
 80014c6:	0013      	movs	r3, r2
 80014c8:	43da      	mvns	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	409a      	lsls	r2, r3
 80014da:	0013      	movs	r3, r2
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014ee:	2201      	movs	r2, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	43da      	mvns	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	2201      	movs	r2, #1
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2203      	movs	r2, #3
 8001520:	4013      	ands	r3, r2
 8001522:	2b03      	cmp	r3, #3
 8001524:	d017      	beq.n	8001556 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	43da      	mvns	r2, r3
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	409a      	lsls	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	4013      	ands	r3, r2
 800155e:	2b02      	cmp	r3, #2
 8001560:	d123      	bne.n	80015aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	0092      	lsls	r2, r2, #2
 800156c:	58d3      	ldr	r3, [r2, r3]
 800156e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	2207      	movs	r2, #7
 8001574:	4013      	ands	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	43da      	mvns	r2, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4013      	ands	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2107      	movs	r1, #7
 800158e:	400b      	ands	r3, r1
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	0092      	lsls	r2, r2, #2
 80015a6:	6939      	ldr	r1, [r7, #16]
 80015a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2203      	movs	r2, #3
 80015c8:	401a      	ands	r2, r3
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	409a      	lsls	r2, r3
 80015d0:	0013      	movs	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685a      	ldr	r2, [r3, #4]
 80015e2:	23c0      	movs	r3, #192	; 0xc0
 80015e4:	029b      	lsls	r3, r3, #10
 80015e6:	4013      	ands	r3, r2
 80015e8:	d100      	bne.n	80015ec <HAL_GPIO_Init+0x174>
 80015ea:	e09a      	b.n	8001722 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ec:	4b54      	ldr	r3, [pc, #336]	; (8001740 <HAL_GPIO_Init+0x2c8>)
 80015ee:	699a      	ldr	r2, [r3, #24]
 80015f0:	4b53      	ldr	r3, [pc, #332]	; (8001740 <HAL_GPIO_Init+0x2c8>)
 80015f2:	2101      	movs	r1, #1
 80015f4:	430a      	orrs	r2, r1
 80015f6:	619a      	str	r2, [r3, #24]
 80015f8:	4b51      	ldr	r3, [pc, #324]	; (8001740 <HAL_GPIO_Init+0x2c8>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2201      	movs	r2, #1
 80015fe:	4013      	ands	r3, r2
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001604:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <HAL_GPIO_Init+0x2cc>)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	589b      	ldr	r3, [r3, r2]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2203      	movs	r2, #3
 8001616:	4013      	ands	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	220f      	movs	r2, #15
 800161c:	409a      	lsls	r2, r3
 800161e:	0013      	movs	r3, r2
 8001620:	43da      	mvns	r2, r3
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	2390      	movs	r3, #144	; 0x90
 800162c:	05db      	lsls	r3, r3, #23
 800162e:	429a      	cmp	r2, r3
 8001630:	d013      	beq.n	800165a <HAL_GPIO_Init+0x1e2>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a44      	ldr	r2, [pc, #272]	; (8001748 <HAL_GPIO_Init+0x2d0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d00d      	beq.n	8001656 <HAL_GPIO_Init+0x1de>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a43      	ldr	r2, [pc, #268]	; (800174c <HAL_GPIO_Init+0x2d4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d007      	beq.n	8001652 <HAL_GPIO_Init+0x1da>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a42      	ldr	r2, [pc, #264]	; (8001750 <HAL_GPIO_Init+0x2d8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d101      	bne.n	800164e <HAL_GPIO_Init+0x1d6>
 800164a:	2303      	movs	r3, #3
 800164c:	e006      	b.n	800165c <HAL_GPIO_Init+0x1e4>
 800164e:	2305      	movs	r3, #5
 8001650:	e004      	b.n	800165c <HAL_GPIO_Init+0x1e4>
 8001652:	2302      	movs	r3, #2
 8001654:	e002      	b.n	800165c <HAL_GPIO_Init+0x1e4>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_GPIO_Init+0x1e4>
 800165a:	2300      	movs	r3, #0
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	2103      	movs	r1, #3
 8001660:	400a      	ands	r2, r1
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	4093      	lsls	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800166c:	4935      	ldr	r1, [pc, #212]	; (8001744 <HAL_GPIO_Init+0x2cc>)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	089b      	lsrs	r3, r3, #2
 8001672:	3302      	adds	r3, #2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800167a:	4b36      	ldr	r3, [pc, #216]	; (8001754 <HAL_GPIO_Init+0x2dc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685a      	ldr	r2, [r3, #4]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	025b      	lsls	r3, r3, #9
 8001692:	4013      	ands	r3, r2
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800169e:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_GPIO_Init+0x2dc>)
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80016a4:	4b2b      	ldr	r3, [pc, #172]	; (8001754 <HAL_GPIO_Init+0x2dc>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43da      	mvns	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	029b      	lsls	r3, r3, #10
 80016bc:	4013      	ands	r3, r2
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016c8:	4b22      	ldr	r3, [pc, #136]	; (8001754 <HAL_GPIO_Init+0x2dc>)
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <HAL_GPIO_Init+0x2dc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43da      	mvns	r2, r3
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	035b      	lsls	r3, r3, #13
 80016e6:	4013      	ands	r3, r2
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_GPIO_Init+0x2dc>)
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_GPIO_Init+0x2dc>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	43da      	mvns	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4013      	ands	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	039b      	lsls	r3, r3, #14
 8001710:	4013      	ands	r3, r2
 8001712:	d003      	beq.n	800171c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800171c:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_GPIO_Init+0x2dc>)
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	3301      	adds	r3, #1
 8001726:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	40da      	lsrs	r2, r3
 8001730:	1e13      	subs	r3, r2, #0
 8001732:	d000      	beq.n	8001736 <HAL_GPIO_Init+0x2be>
 8001734:	e6a8      	b.n	8001488 <HAL_GPIO_Init+0x10>
  } 
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	b006      	add	sp, #24
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000
 8001748:	48000400 	.word	0x48000400
 800174c:	48000800 	.word	0x48000800
 8001750:	48000c00 	.word	0x48000c00
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	0008      	movs	r0, r1
 8001762:	0011      	movs	r1, r2
 8001764:	1cbb      	adds	r3, r7, #2
 8001766:	1c02      	adds	r2, r0, #0
 8001768:	801a      	strh	r2, [r3, #0]
 800176a:	1c7b      	adds	r3, r7, #1
 800176c:	1c0a      	adds	r2, r1, #0
 800176e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001770:	1c7b      	adds	r3, r7, #1
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001778:	1cbb      	adds	r3, r7, #2
 800177a:	881a      	ldrh	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001780:	e003      	b.n	800178a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001782:	1cbb      	adds	r3, r7, #2
 8001784:	881a      	ldrh	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b002      	add	sp, #8
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	0002      	movs	r2, r0
 800179c:	1dbb      	adds	r3, r7, #6
 800179e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a0:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	1dba      	adds	r2, r7, #6
 80017a6:	8812      	ldrh	r2, [r2, #0]
 80017a8:	4013      	ands	r3, r2
 80017aa:	d008      	beq.n	80017be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80017ae:	1dba      	adds	r2, r7, #6
 80017b0:	8812      	ldrh	r2, [r2, #0]
 80017b2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b4:	1dbb      	adds	r3, r7, #6
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	0018      	movs	r0, r3
 80017ba:	f7ff f97d 	bl	8000ab8 <HAL_GPIO_EXTI_Callback>
  }
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b002      	add	sp, #8
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b088      	sub	sp, #32
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e301      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2201      	movs	r2, #1
 80017e4:	4013      	ands	r3, r2
 80017e6:	d100      	bne.n	80017ea <HAL_RCC_OscConfig+0x1e>
 80017e8:	e08d      	b.n	8001906 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017ea:	4bc3      	ldr	r3, [pc, #780]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	220c      	movs	r2, #12
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d00e      	beq.n	8001814 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017f6:	4bc0      	ldr	r3, [pc, #768]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	220c      	movs	r2, #12
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d116      	bne.n	8001830 <HAL_RCC_OscConfig+0x64>
 8001802:	4bbd      	ldr	r3, [pc, #756]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	025b      	lsls	r3, r3, #9
 800180a:	401a      	ands	r2, r3
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	025b      	lsls	r3, r3, #9
 8001810:	429a      	cmp	r2, r3
 8001812:	d10d      	bne.n	8001830 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	4bb8      	ldr	r3, [pc, #736]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	029b      	lsls	r3, r3, #10
 800181c:	4013      	ands	r3, r2
 800181e:	d100      	bne.n	8001822 <HAL_RCC_OscConfig+0x56>
 8001820:	e070      	b.n	8001904 <HAL_RCC_OscConfig+0x138>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d000      	beq.n	800182c <HAL_RCC_OscConfig+0x60>
 800182a:	e06b      	b.n	8001904 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e2d8      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d107      	bne.n	8001848 <HAL_RCC_OscConfig+0x7c>
 8001838:	4baf      	ldr	r3, [pc, #700]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4bae      	ldr	r3, [pc, #696]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	0249      	lsls	r1, r1, #9
 8001842:	430a      	orrs	r2, r1
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e02f      	b.n	80018a8 <HAL_RCC_OscConfig+0xdc>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10c      	bne.n	800186a <HAL_RCC_OscConfig+0x9e>
 8001850:	4ba9      	ldr	r3, [pc, #676]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4ba8      	ldr	r3, [pc, #672]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001856:	49a9      	ldr	r1, [pc, #676]	; (8001afc <HAL_RCC_OscConfig+0x330>)
 8001858:	400a      	ands	r2, r1
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	4ba6      	ldr	r3, [pc, #664]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	4ba5      	ldr	r3, [pc, #660]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001862:	49a7      	ldr	r1, [pc, #668]	; (8001b00 <HAL_RCC_OscConfig+0x334>)
 8001864:	400a      	ands	r2, r1
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	e01e      	b.n	80018a8 <HAL_RCC_OscConfig+0xdc>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b05      	cmp	r3, #5
 8001870:	d10e      	bne.n	8001890 <HAL_RCC_OscConfig+0xc4>
 8001872:	4ba1      	ldr	r3, [pc, #644]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	4ba0      	ldr	r3, [pc, #640]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	02c9      	lsls	r1, r1, #11
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	4b9d      	ldr	r3, [pc, #628]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b9c      	ldr	r3, [pc, #624]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001886:	2180      	movs	r1, #128	; 0x80
 8001888:	0249      	lsls	r1, r1, #9
 800188a:	430a      	orrs	r2, r1
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0xdc>
 8001890:	4b99      	ldr	r3, [pc, #612]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b98      	ldr	r3, [pc, #608]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001896:	4999      	ldr	r1, [pc, #612]	; (8001afc <HAL_RCC_OscConfig+0x330>)
 8001898:	400a      	ands	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	4b96      	ldr	r3, [pc, #600]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b95      	ldr	r3, [pc, #596]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	4997      	ldr	r1, [pc, #604]	; (8001b00 <HAL_RCC_OscConfig+0x334>)
 80018a4:	400a      	ands	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d014      	beq.n	80018da <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fcd6 	bl	8001260 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ba:	f7ff fcd1 	bl	8001260 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b64      	cmp	r3, #100	; 0x64
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e28a      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018cc:	4b8a      	ldr	r3, [pc, #552]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	029b      	lsls	r3, r3, #10
 80018d4:	4013      	ands	r3, r2
 80018d6:	d0f0      	beq.n	80018ba <HAL_RCC_OscConfig+0xee>
 80018d8:	e015      	b.n	8001906 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fcc1 	bl	8001260 <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fcbc 	bl	8001260 <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e275      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	4b80      	ldr	r3, [pc, #512]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	029b      	lsls	r3, r3, #10
 80018fe:	4013      	ands	r3, r2
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x118>
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2202      	movs	r2, #2
 800190c:	4013      	ands	r3, r2
 800190e:	d100      	bne.n	8001912 <HAL_RCC_OscConfig+0x146>
 8001910:	e069      	b.n	80019e6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001912:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	220c      	movs	r2, #12
 8001918:	4013      	ands	r3, r2
 800191a:	d00b      	beq.n	8001934 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800191c:	4b76      	ldr	r3, [pc, #472]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	220c      	movs	r2, #12
 8001922:	4013      	ands	r3, r2
 8001924:	2b08      	cmp	r3, #8
 8001926:	d11c      	bne.n	8001962 <HAL_RCC_OscConfig+0x196>
 8001928:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	025b      	lsls	r3, r3, #9
 8001930:	4013      	ands	r3, r2
 8001932:	d116      	bne.n	8001962 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001934:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2202      	movs	r2, #2
 800193a:	4013      	ands	r3, r2
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x17e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e24b      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194a:	4b6b      	ldr	r3, [pc, #428]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	22f8      	movs	r2, #248	; 0xf8
 8001950:	4393      	bics	r3, r2
 8001952:	0019      	movs	r1, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	00da      	lsls	r2, r3, #3
 800195a:	4b67      	ldr	r3, [pc, #412]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001960:	e041      	b.n	80019e6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d024      	beq.n	80019b4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800196a:	4b63      	ldr	r3, [pc, #396]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b62      	ldr	r3, [pc, #392]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001970:	2101      	movs	r1, #1
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff fc73 	bl	8001260 <HAL_GetTick>
 800197a:	0003      	movs	r3, r0
 800197c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001980:	f7ff fc6e 	bl	8001260 <HAL_GetTick>
 8001984:	0002      	movs	r2, r0
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e227      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2202      	movs	r2, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d0f1      	beq.n	8001980 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199c:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	22f8      	movs	r2, #248	; 0xf8
 80019a2:	4393      	bics	r3, r2
 80019a4:	0019      	movs	r1, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00da      	lsls	r2, r3, #3
 80019ac:	4b52      	ldr	r3, [pc, #328]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e018      	b.n	80019e6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b4f      	ldr	r3, [pc, #316]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019ba:	2101      	movs	r1, #1
 80019bc:	438a      	bics	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fc4e 	bl	8001260 <HAL_GetTick>
 80019c4:	0003      	movs	r3, r0
 80019c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ca:	f7ff fc49 	bl	8001260 <HAL_GetTick>
 80019ce:	0002      	movs	r2, r0
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e202      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019dc:	4b46      	ldr	r3, [pc, #280]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2202      	movs	r2, #2
 80019e2:	4013      	ands	r3, r2
 80019e4:	d1f1      	bne.n	80019ca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2208      	movs	r2, #8
 80019ec:	4013      	ands	r3, r2
 80019ee:	d036      	beq.n	8001a5e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d019      	beq.n	8001a2c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f8:	4b3f      	ldr	r3, [pc, #252]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019fc:	4b3e      	ldr	r3, [pc, #248]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	430a      	orrs	r2, r1
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a04:	f7ff fc2c 	bl	8001260 <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fc27 	bl	8001260 <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e1e0      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a20:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a24:	2202      	movs	r2, #2
 8001a26:	4013      	ands	r3, r2
 8001a28:	d0f1      	beq.n	8001a0e <HAL_RCC_OscConfig+0x242>
 8001a2a:	e018      	b.n	8001a5e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a2c:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a30:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a32:	2101      	movs	r1, #1
 8001a34:	438a      	bics	r2, r1
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a38:	f7ff fc12 	bl	8001260 <HAL_GetTick>
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a42:	f7ff fc0d 	bl	8001260 <HAL_GetTick>
 8001a46:	0002      	movs	r2, r0
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e1c6      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a54:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	2202      	movs	r2, #2
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d1f1      	bne.n	8001a42 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2204      	movs	r2, #4
 8001a64:	4013      	ands	r3, r2
 8001a66:	d100      	bne.n	8001a6a <HAL_RCC_OscConfig+0x29e>
 8001a68:	e0b4      	b.n	8001bd4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a6a:	201f      	movs	r0, #31
 8001a6c:	183b      	adds	r3, r7, r0
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	055b      	lsls	r3, r3, #21
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d110      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7e:	4b1e      	ldr	r3, [pc, #120]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a80:	69da      	ldr	r2, [r3, #28]
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a84:	2180      	movs	r1, #128	; 0x80
 8001a86:	0549      	lsls	r1, r1, #21
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	61da      	str	r2, [r3, #28]
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	69da      	ldr	r2, [r3, #28]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	055b      	lsls	r3, r3, #21
 8001a94:	4013      	ands	r3, r2
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a9a:	183b      	adds	r3, r7, r0
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d11a      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001ab2:	2180      	movs	r1, #128	; 0x80
 8001ab4:	0049      	lsls	r1, r1, #1
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fbd1 	bl	8001260 <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac4:	f7ff fbcc 	bl	8001260 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e185      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCC_OscConfig+0x338>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d10e      	bne.n	8001b08 <HAL_RCC_OscConfig+0x33c>
 8001aea:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001aec:	6a1a      	ldr	r2, [r3, #32]
 8001aee:	4b02      	ldr	r3, [pc, #8]	; (8001af8 <HAL_RCC_OscConfig+0x32c>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	621a      	str	r2, [r3, #32]
 8001af6:	e035      	b.n	8001b64 <HAL_RCC_OscConfig+0x398>
 8001af8:	40021000 	.word	0x40021000
 8001afc:	fffeffff 	.word	0xfffeffff
 8001b00:	fffbffff 	.word	0xfffbffff
 8001b04:	40007000 	.word	0x40007000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d10c      	bne.n	8001b2a <HAL_RCC_OscConfig+0x35e>
 8001b10:	4bb6      	ldr	r3, [pc, #728]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b12:	6a1a      	ldr	r2, [r3, #32]
 8001b14:	4bb5      	ldr	r3, [pc, #724]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b16:	2101      	movs	r1, #1
 8001b18:	438a      	bics	r2, r1
 8001b1a:	621a      	str	r2, [r3, #32]
 8001b1c:	4bb3      	ldr	r3, [pc, #716]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b1e:	6a1a      	ldr	r2, [r3, #32]
 8001b20:	4bb2      	ldr	r3, [pc, #712]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b22:	2104      	movs	r1, #4
 8001b24:	438a      	bics	r2, r1
 8001b26:	621a      	str	r2, [r3, #32]
 8001b28:	e01c      	b.n	8001b64 <HAL_RCC_OscConfig+0x398>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b05      	cmp	r3, #5
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x380>
 8001b32:	4bae      	ldr	r3, [pc, #696]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b34:	6a1a      	ldr	r2, [r3, #32]
 8001b36:	4bad      	ldr	r3, [pc, #692]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b38:	2104      	movs	r1, #4
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	621a      	str	r2, [r3, #32]
 8001b3e:	4bab      	ldr	r3, [pc, #684]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b40:	6a1a      	ldr	r2, [r3, #32]
 8001b42:	4baa      	ldr	r3, [pc, #680]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b44:	2101      	movs	r1, #1
 8001b46:	430a      	orrs	r2, r1
 8001b48:	621a      	str	r2, [r3, #32]
 8001b4a:	e00b      	b.n	8001b64 <HAL_RCC_OscConfig+0x398>
 8001b4c:	4ba7      	ldr	r3, [pc, #668]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b4e:	6a1a      	ldr	r2, [r3, #32]
 8001b50:	4ba6      	ldr	r3, [pc, #664]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b52:	2101      	movs	r1, #1
 8001b54:	438a      	bics	r2, r1
 8001b56:	621a      	str	r2, [r3, #32]
 8001b58:	4ba4      	ldr	r3, [pc, #656]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b5a:	6a1a      	ldr	r2, [r3, #32]
 8001b5c:	4ba3      	ldr	r3, [pc, #652]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b5e:	2104      	movs	r1, #4
 8001b60:	438a      	bics	r2, r1
 8001b62:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d014      	beq.n	8001b96 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fb78 	bl	8001260 <HAL_GetTick>
 8001b70:	0003      	movs	r3, r0
 8001b72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b74:	e009      	b.n	8001b8a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff fb73 	bl	8001260 <HAL_GetTick>
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	4a9b      	ldr	r2, [pc, #620]	; (8001df0 <HAL_RCC_OscConfig+0x624>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e12b      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8a:	4b98      	ldr	r3, [pc, #608]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	4013      	ands	r3, r2
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x3aa>
 8001b94:	e013      	b.n	8001bbe <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7ff fb63 	bl	8001260 <HAL_GetTick>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9e:	e009      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba0:	f7ff fb5e 	bl	8001260 <HAL_GetTick>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	4a91      	ldr	r2, [pc, #580]	; (8001df0 <HAL_RCC_OscConfig+0x624>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e116      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb4:	4b8d      	ldr	r3, [pc, #564]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	2202      	movs	r2, #2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	d1f0      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bbe:	231f      	movs	r3, #31
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc8:	4b88      	ldr	r3, [pc, #544]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	4b87      	ldr	r3, [pc, #540]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001bce:	4989      	ldr	r1, [pc, #548]	; (8001df4 <HAL_RCC_OscConfig+0x628>)
 8001bd0:	400a      	ands	r2, r1
 8001bd2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2210      	movs	r2, #16
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d063      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d12a      	bne.n	8001c3c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001be6:	4b81      	ldr	r3, [pc, #516]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bea:	4b80      	ldr	r3, [pc, #512]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001bec:	2104      	movs	r1, #4
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001bf2:	4b7e      	ldr	r3, [pc, #504]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf6:	4b7d      	ldr	r3, [pc, #500]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fb2f 	bl	8001260 <HAL_GetTick>
 8001c02:	0003      	movs	r3, r0
 8001c04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c08:	f7ff fb2a 	bl	8001260 <HAL_GetTick>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e0e3      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001c1a:	4b74      	ldr	r3, [pc, #464]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1e:	2202      	movs	r2, #2
 8001c20:	4013      	ands	r3, r2
 8001c22:	d0f1      	beq.n	8001c08 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c24:	4b71      	ldr	r3, [pc, #452]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c28:	22f8      	movs	r2, #248	; 0xf8
 8001c2a:	4393      	bics	r3, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	00da      	lsls	r2, r3, #3
 8001c34:	4b6d      	ldr	r3, [pc, #436]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c36:	430a      	orrs	r2, r1
 8001c38:	635a      	str	r2, [r3, #52]	; 0x34
 8001c3a:	e034      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	695b      	ldr	r3, [r3, #20]
 8001c40:	3305      	adds	r3, #5
 8001c42:	d111      	bne.n	8001c68 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001c44:	4b69      	ldr	r3, [pc, #420]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c48:	4b68      	ldr	r3, [pc, #416]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	438a      	bics	r2, r1
 8001c4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001c50:	4b66      	ldr	r3, [pc, #408]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c54:	22f8      	movs	r2, #248	; 0xf8
 8001c56:	4393      	bics	r3, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	00da      	lsls	r2, r3, #3
 8001c60:	4b62      	ldr	r3, [pc, #392]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c62:	430a      	orrs	r2, r1
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34
 8001c66:	e01e      	b.n	8001ca6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001c68:	4b60      	ldr	r3, [pc, #384]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6c:	4b5f      	ldr	r3, [pc, #380]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c6e:	2104      	movs	r1, #4
 8001c70:	430a      	orrs	r2, r1
 8001c72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001c74:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c78:	4b5c      	ldr	r3, [pc, #368]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7ff faee 	bl	8001260 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c8a:	f7ff fae9 	bl	8001260 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0a2      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c9c:	4b53      	ldr	r3, [pc, #332]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d1f1      	bne.n	8001c8a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d100      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x4e4>
 8001cae:	e097      	b.n	8001de0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cb0:	4b4e      	ldr	r3, [pc, #312]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	220c      	movs	r2, #12
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d100      	bne.n	8001cbe <HAL_RCC_OscConfig+0x4f2>
 8001cbc:	e06b      	b.n	8001d96 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d14c      	bne.n	8001d60 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc6:	4b49      	ldr	r3, [pc, #292]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4b48      	ldr	r3, [pc, #288]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001ccc:	494a      	ldr	r1, [pc, #296]	; (8001df8 <HAL_RCC_OscConfig+0x62c>)
 8001cce:	400a      	ands	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fac5 	bl	8001260 <HAL_GetTick>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff fac0 	bl	8001260 <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e079      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cee:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	049b      	lsls	r3, r3, #18
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfe:	220f      	movs	r2, #15
 8001d00:	4393      	bics	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d08:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d0e:	4b37      	ldr	r3, [pc, #220]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a3a      	ldr	r2, [pc, #232]	; (8001dfc <HAL_RCC_OscConfig+0x630>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	431a      	orrs	r2, r3
 8001d22:	4b32      	ldr	r3, [pc, #200]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001d24:	430a      	orrs	r2, r1
 8001d26:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d28:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001d2e:	2180      	movs	r1, #128	; 0x80
 8001d30:	0449      	lsls	r1, r1, #17
 8001d32:	430a      	orrs	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7ff fa93 	bl	8001260 <HAL_GetTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff fa8e 	bl	8001260 <HAL_GetTick>
 8001d44:	0002      	movs	r2, r0
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e047      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d52:	4b26      	ldr	r3, [pc, #152]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	049b      	lsls	r3, r3, #18
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x574>
 8001d5e:	e03f      	b.n	8001de0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d60:	4b22      	ldr	r3, [pc, #136]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b21      	ldr	r3, [pc, #132]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001d66:	4924      	ldr	r1, [pc, #144]	; (8001df8 <HAL_RCC_OscConfig+0x62c>)
 8001d68:	400a      	ands	r2, r1
 8001d6a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fa78 	bl	8001260 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d76:	f7ff fa73 	bl	8001260 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e02c      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	049b      	lsls	r3, r3, #18
 8001d90:	4013      	ands	r3, r2
 8001d92:	d1f0      	bne.n	8001d76 <HAL_RCC_OscConfig+0x5aa>
 8001d94:	e024      	b.n	8001de0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e01f      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001da8:	4b10      	ldr	r3, [pc, #64]	; (8001dec <HAL_RCC_OscConfig+0x620>)
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	025b      	lsls	r3, r3, #9
 8001db4:	401a      	ands	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d10e      	bne.n	8001ddc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	401a      	ands	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	23f0      	movs	r3, #240	; 0xf0
 8001dd0:	039b      	lsls	r3, r3, #14
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	0018      	movs	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	b008      	add	sp, #32
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	40021000 	.word	0x40021000
 8001df0:	00001388 	.word	0x00001388
 8001df4:	efffffff 	.word	0xefffffff
 8001df8:	feffffff 	.word	0xfeffffff
 8001dfc:	ffc2ffff 	.word	0xffc2ffff

08001e00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0b3      	b.n	8001f7c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e14:	4b5b      	ldr	r3, [pc, #364]	; (8001f84 <HAL_RCC_ClockConfig+0x184>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d911      	bls.n	8001e46 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b58      	ldr	r3, [pc, #352]	; (8001f84 <HAL_RCC_ClockConfig+0x184>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	4393      	bics	r3, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <HAL_RCC_ClockConfig+0x184>)
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e34:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_ClockConfig+0x184>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e09a      	b.n	8001f7c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d015      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2204      	movs	r2, #4
 8001e56:	4013      	ands	r3, r2
 8001e58:	d006      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e5a:	4b4b      	ldr	r3, [pc, #300]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001e60:	21e0      	movs	r1, #224	; 0xe0
 8001e62:	00c9      	lsls	r1, r1, #3
 8001e64:	430a      	orrs	r2, r1
 8001e66:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e68:	4b47      	ldr	r3, [pc, #284]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	22f0      	movs	r2, #240	; 0xf0
 8001e6e:	4393      	bics	r3, r2
 8001e70:	0019      	movs	r1, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2201      	movs	r2, #1
 8001e82:	4013      	ands	r3, r2
 8001e84:	d040      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b3e      	ldr	r3, [pc, #248]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2380      	movs	r3, #128	; 0x80
 8001e94:	029b      	lsls	r3, r3, #10
 8001e96:	4013      	ands	r3, r2
 8001e98:	d114      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e06e      	b.n	8001f7c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea6:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	049b      	lsls	r3, r3, #18
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d108      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e062      	b.n	8001f7c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb6:	4b34      	ldr	r3, [pc, #208]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e05b      	b.n	8001f7c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec4:	4b30      	ldr	r3, [pc, #192]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2203      	movs	r2, #3
 8001eca:	4393      	bics	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed8:	f7ff f9c2 	bl	8001260 <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee0:	e009      	b.n	8001ef6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee2:	f7ff f9bd 	bl	8001260 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <HAL_RCC_ClockConfig+0x18c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e042      	b.n	8001f7c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	4b24      	ldr	r3, [pc, #144]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	220c      	movs	r2, #12
 8001efc:	401a      	ands	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1ec      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f08:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <HAL_RCC_ClockConfig+0x184>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4013      	ands	r3, r2
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d211      	bcs.n	8001f3a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <HAL_RCC_ClockConfig+0x184>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4393      	bics	r3, r2
 8001f1e:	0019      	movs	r1, r3
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_RCC_ClockConfig+0x184>)
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_RCC_ClockConfig+0x184>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4013      	ands	r3, r2
 8001f30:	683a      	ldr	r2, [r7, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e020      	b.n	8001f7c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	4013      	ands	r3, r2
 8001f42:	d009      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f44:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a11      	ldr	r2, [pc, #68]	; (8001f90 <HAL_RCC_ClockConfig+0x190>)
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001f54:	430a      	orrs	r2, r1
 8001f56:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f58:	f000 f820 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8001f5c:	0001      	movs	r1, r0
 8001f5e:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <HAL_RCC_ClockConfig+0x188>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	220f      	movs	r2, #15
 8001f66:	4013      	ands	r3, r2
 8001f68:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <HAL_RCC_ClockConfig+0x194>)
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	000a      	movs	r2, r1
 8001f6e:	40da      	lsrs	r2, r3
 8001f70:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_RCC_ClockConfig+0x198>)
 8001f72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f74:	2003      	movs	r0, #3
 8001f76:	f7ff f92d 	bl	80011d4 <HAL_InitTick>
  
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b004      	add	sp, #16
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40022000 	.word	0x40022000
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	00001388 	.word	0x00001388
 8001f90:	fffff8ff 	.word	0xfffff8ff
 8001f94:	08003a88 	.word	0x08003a88
 8001f98:	20000000 	.word	0x20000000

08001f9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b08f      	sub	sp, #60	; 0x3c
 8001fa0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001fa2:	2314      	movs	r3, #20
 8001fa4:	18fb      	adds	r3, r7, r3
 8001fa6:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001faa:	c313      	stmia	r3!, {r0, r1, r4}
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	4a29      	ldr	r2, [pc, #164]	; (8002058 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fb4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001fb6:	c313      	stmia	r3!, {r0, r1, r4}
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001fd0:	4b22      	ldr	r3, [pc, #136]	; (800205c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd8:	220c      	movs	r2, #12
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d002      	beq.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x4a>
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d003      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0x50>
 8001fe4:	e02d      	b.n	8002042 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fe8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fea:	e02d      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fee:	0c9b      	lsrs	r3, r3, #18
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2214      	movs	r2, #20
 8001ff6:	18ba      	adds	r2, r7, r2
 8001ff8:	5cd3      	ldrb	r3, [r2, r3]
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	220f      	movs	r2, #15
 8002002:	4013      	ands	r3, r2
 8002004:	1d3a      	adds	r2, r7, #4
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800200a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	025b      	lsls	r3, r3, #9
 8002010:	4013      	ands	r3, r2
 8002012:	d009      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002016:	4812      	ldr	r0, [pc, #72]	; (8002060 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002018:	f7fe f888 	bl	800012c <__udivsi3>
 800201c:	0003      	movs	r3, r0
 800201e:	001a      	movs	r2, r3
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	4353      	muls	r3, r2
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
 8002026:	e009      	b.n	800203c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800202a:	000a      	movs	r2, r1
 800202c:	0152      	lsls	r2, r2, #5
 800202e:	1a52      	subs	r2, r2, r1
 8002030:	0193      	lsls	r3, r2, #6
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	185b      	adds	r3, r3, r1
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800203c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002040:	e002      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002044:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002046:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b00f      	add	sp, #60	; 0x3c
 8002050:	bd90      	pop	{r4, r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	08003a24 	.word	0x08003a24
 8002058:	08003a34 	.word	0x08003a34
 800205c:	40021000 	.word	0x40021000
 8002060:	007a1200 	.word	0x007a1200

08002064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002068:	4b02      	ldr	r3, [pc, #8]	; (8002074 <HAL_RCC_GetHCLKFreq+0x10>)
 800206a:	681b      	ldr	r3, [r3, #0]
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			; (mov r8, r8)
 8002074:	20000000 	.word	0x20000000

08002078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800207c:	f7ff fff2 	bl	8002064 <HAL_RCC_GetHCLKFreq>
 8002080:	0001      	movs	r1, r0
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	2207      	movs	r2, #7
 800208a:	4013      	ands	r3, r2
 800208c:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800208e:	5cd3      	ldrb	r3, [r2, r3]
 8002090:	40d9      	lsrs	r1, r3
 8002092:	000b      	movs	r3, r1
}    
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	40021000 	.word	0x40021000
 80020a0:	08003a98 	.word	0x08003a98

080020a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	025b      	lsls	r3, r3, #9
 80020bc:	4013      	ands	r3, r2
 80020be:	d100      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80020c0:	e08e      	b.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80020c2:	2017      	movs	r0, #23
 80020c4:	183b      	adds	r3, r7, r0
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ca:	4b57      	ldr	r3, [pc, #348]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020cc:	69da      	ldr	r2, [r3, #28]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	055b      	lsls	r3, r3, #21
 80020d2:	4013      	ands	r3, r2
 80020d4:	d110      	bne.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b54      	ldr	r3, [pc, #336]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020d8:	69da      	ldr	r2, [r3, #28]
 80020da:	4b53      	ldr	r3, [pc, #332]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020dc:	2180      	movs	r1, #128	; 0x80
 80020de:	0549      	lsls	r1, r1, #21
 80020e0:	430a      	orrs	r2, r1
 80020e2:	61da      	str	r2, [r3, #28]
 80020e4:	4b50      	ldr	r3, [pc, #320]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80020e6:	69da      	ldr	r2, [r3, #28]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	055b      	lsls	r3, r3, #21
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f2:	183b      	adds	r3, r7, r0
 80020f4:	2201      	movs	r2, #1
 80020f6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	4b4c      	ldr	r3, [pc, #304]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4013      	ands	r3, r2
 8002102:	d11a      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002104:	4b49      	ldr	r3, [pc, #292]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4b48      	ldr	r3, [pc, #288]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800210a:	2180      	movs	r1, #128	; 0x80
 800210c:	0049      	lsls	r1, r1, #1
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002112:	f7ff f8a5 	bl	8001260 <HAL_GetTick>
 8002116:	0003      	movs	r3, r0
 8002118:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	e008      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211c:	f7ff f8a0 	bl	8001260 <HAL_GetTick>
 8002120:	0002      	movs	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e077      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	4b3f      	ldr	r3, [pc, #252]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4013      	ands	r3, r2
 8002138:	d0f0      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800213a:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800213c:	6a1a      	ldr	r2, [r3, #32]
 800213e:	23c0      	movs	r3, #192	; 0xc0
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4013      	ands	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d034      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	23c0      	movs	r3, #192	; 0xc0
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4013      	ands	r3, r2
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	d02c      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a33      	ldr	r2, [pc, #204]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002162:	4013      	ands	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002166:	4b30      	ldr	r3, [pc, #192]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002168:	6a1a      	ldr	r2, [r3, #32]
 800216a:	4b2f      	ldr	r3, [pc, #188]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800216c:	2180      	movs	r1, #128	; 0x80
 800216e:	0249      	lsls	r1, r1, #9
 8002170:	430a      	orrs	r2, r1
 8002172:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002176:	6a1a      	ldr	r2, [r3, #32]
 8002178:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800217a:	492e      	ldr	r1, [pc, #184]	; (8002234 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800217c:	400a      	ands	r2, r1
 800217e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	4013      	ands	r3, r2
 800218c:	d013      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7ff f867 	bl	8001260 <HAL_GetTick>
 8002192:	0003      	movs	r3, r0
 8002194:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	e009      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7ff f862 	bl	8001260 <HAL_GetTick>
 800219c:	0002      	movs	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	4a25      	ldr	r2, [pc, #148]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e038      	b.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ac:	4b1e      	ldr	r3, [pc, #120]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	2202      	movs	r2, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	4a1d      	ldr	r2, [pc, #116]	; (8002230 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80021bc:	4013      	ands	r3, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4b18      	ldr	r3, [pc, #96]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ca:	2317      	movs	r3, #23
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021da:	4918      	ldr	r1, [pc, #96]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80021dc:	400a      	ands	r2, r1
 80021de:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	d009      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	2203      	movs	r2, #3
 80021f0:	4393      	bics	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80021fa:	430a      	orrs	r2, r1
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2220      	movs	r2, #32
 8002204:	4013      	ands	r3, r2
 8002206:	d009      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	2210      	movs	r2, #16
 800220e:	4393      	bics	r3, r2
 8002210:	0019      	movs	r1, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002218:	430a      	orrs	r2, r1
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	b006      	add	sp, #24
 8002224:	bd80      	pop	{r7, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	40021000 	.word	0x40021000
 800222c:	40007000 	.word	0x40007000
 8002230:	fffffcff 	.word	0xfffffcff
 8002234:	fffeffff 	.word	0xfffeffff
 8002238:	00001388 	.word	0x00001388
 800223c:	efffffff 	.word	0xefffffff

08002240 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e081      	b.n	8002356 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	7f5b      	ldrb	r3, [r3, #29]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d106      	bne.n	800226a <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	0018      	movs	r0, r3
 8002266:	f7fe fe39 	bl	8000edc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2202      	movs	r2, #2
 800226e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	22ca      	movs	r2, #202	; 0xca
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2253      	movs	r2, #83	; 0x53
 800227e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	0018      	movs	r0, r3
 8002284:	f000 f899 	bl	80023ba <RTC_EnterInitMode>
 8002288:	1e03      	subs	r3, r0, #0
 800228a:	d008      	beq.n	800229e <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	22ff      	movs	r2, #255	; 0xff
 8002292:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2204      	movs	r2, #4
 8002298:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e05b      	b.n	8002356 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	492d      	ldr	r1, [pc, #180]	; (8002360 <HAL_RTC_Init+0x120>)
 80022aa:	400a      	ands	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6899      	ldr	r1, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	68d2      	ldr	r2, [r2, #12]
 80022d4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6919      	ldr	r1, [r3, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	041a      	lsls	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2180      	movs	r1, #128	; 0x80
 80022f6:	438a      	bics	r2, r1
 80022f8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2220      	movs	r2, #32
 8002302:	4013      	ands	r3, r2
 8002304:	d10e      	bne.n	8002324 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f000 f82d 	bl	8002368 <HAL_RTC_WaitForSynchro>
 800230e:	1e03      	subs	r3, r0, #0
 8002310:	d008      	beq.n	8002324 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	22ff      	movs	r2, #255	; 0xff
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2204      	movs	r2, #4
 800231e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e018      	b.n	8002356 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	490d      	ldr	r1, [pc, #52]	; (8002364 <HAL_RTC_Init+0x124>)
 8002330:	400a      	ands	r2, r1
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	22ff      	movs	r2, #255	; 0xff
 800234c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002354:	2300      	movs	r3, #0
  }
}
 8002356:	0018      	movs	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	b002      	add	sp, #8
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	ff8fffbf 	.word	0xff8fffbf
 8002364:	fffbffff 	.word	0xfffbffff

08002368 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	21a0      	movs	r1, #160	; 0xa0
 8002380:	438a      	bics	r2, r1
 8002382:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002384:	f7fe ff6c 	bl	8001260 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800238e:	f7fe ff67 	bl	8001260 <HAL_GetTick>
 8002392:	0002      	movs	r2, r0
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1ad2      	subs	r2, r2, r3
 8002398:	23fa      	movs	r3, #250	; 0xfa
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	429a      	cmp	r2, r3
 800239e:	d901      	bls.n	80023a4 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e006      	b.n	80023b2 <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	2220      	movs	r2, #32
 80023ac:	4013      	ands	r3, r2
 80023ae:	d0ee      	beq.n	800238e <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b004      	add	sp, #16
 80023b8:	bd80      	pop	{r7, pc}

080023ba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	2240      	movs	r2, #64	; 0x40
 80023ce:	4013      	ands	r3, r2
 80023d0:	d11a      	bne.n	8002408 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2201      	movs	r2, #1
 80023d8:	4252      	negs	r2, r2
 80023da:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80023dc:	f7fe ff40 	bl	8001260 <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023e4:	e00a      	b.n	80023fc <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80023e6:	f7fe ff3b 	bl	8001260 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad2      	subs	r2, r2, r3
 80023f0:	23fa      	movs	r3, #250	; 0xfa
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d901      	bls.n	80023fc <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e006      	b.n	800240a <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2240      	movs	r2, #64	; 0x40
 8002404:	4013      	ands	r3, r2
 8002406:	d0ee      	beq.n	80023e6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b004      	add	sp, #16
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e042      	b.n	80024aa <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	223d      	movs	r2, #61	; 0x3d
 8002428:	5c9b      	ldrb	r3, [r3, r2]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d107      	bne.n	8002440 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	223c      	movs	r2, #60	; 0x3c
 8002434:	2100      	movs	r1, #0
 8002436:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	0018      	movs	r0, r3
 800243c:	f7fe fd66 	bl	8000f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	223d      	movs	r2, #61	; 0x3d
 8002444:	2102      	movs	r1, #2
 8002446:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3304      	adds	r3, #4
 8002450:	0019      	movs	r1, r3
 8002452:	0010      	movs	r0, r2
 8002454:	f000 f96c 	bl	8002730 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2246      	movs	r2, #70	; 0x46
 800245c:	2101      	movs	r1, #1
 800245e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	223e      	movs	r2, #62	; 0x3e
 8002464:	2101      	movs	r1, #1
 8002466:	5499      	strb	r1, [r3, r2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	223f      	movs	r2, #63	; 0x3f
 800246c:	2101      	movs	r1, #1
 800246e:	5499      	strb	r1, [r3, r2]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2240      	movs	r2, #64	; 0x40
 8002474:	2101      	movs	r1, #1
 8002476:	5499      	strb	r1, [r3, r2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2241      	movs	r2, #65	; 0x41
 800247c:	2101      	movs	r1, #1
 800247e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2242      	movs	r2, #66	; 0x42
 8002484:	2101      	movs	r1, #1
 8002486:	5499      	strb	r1, [r3, r2]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2243      	movs	r2, #67	; 0x43
 800248c:	2101      	movs	r1, #1
 800248e:	5499      	strb	r1, [r3, r2]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2244      	movs	r2, #68	; 0x44
 8002494:	2101      	movs	r1, #1
 8002496:	5499      	strb	r1, [r3, r2]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2245      	movs	r2, #69	; 0x45
 800249c:	2101      	movs	r1, #1
 800249e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	223d      	movs	r2, #61	; 0x3d
 80024a4:	2101      	movs	r1, #1
 80024a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	0018      	movs	r0, r3
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b002      	add	sp, #8
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2202      	movs	r2, #2
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d124      	bne.n	8002512 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	2202      	movs	r2, #2
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d11d      	bne.n	8002512 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2203      	movs	r2, #3
 80024dc:	4252      	negs	r2, r2
 80024de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	2203      	movs	r2, #3
 80024ee:	4013      	ands	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 f902 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 80024fa:	e007      	b.n	800250c <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 f8f5 	bl	80026ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	0018      	movs	r0, r3
 8002508:	f000 f901 	bl	800270e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	2204      	movs	r2, #4
 800251a:	4013      	ands	r3, r2
 800251c:	2b04      	cmp	r3, #4
 800251e:	d125      	bne.n	800256c <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2204      	movs	r2, #4
 8002528:	4013      	ands	r3, r2
 800252a:	2b04      	cmp	r3, #4
 800252c:	d11e      	bne.n	800256c <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2205      	movs	r2, #5
 8002534:	4252      	negs	r2, r2
 8002536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	23c0      	movs	r3, #192	; 0xc0
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4013      	ands	r3, r2
 800254a:	d004      	beq.n	8002556 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	0018      	movs	r0, r3
 8002550:	f000 f8d5 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 8002554:	e007      	b.n	8002566 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0018      	movs	r0, r3
 800255a:	f000 f8c8 	bl	80026ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f000 f8d4 	bl	800270e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2208      	movs	r2, #8
 8002574:	4013      	ands	r3, r2
 8002576:	2b08      	cmp	r3, #8
 8002578:	d124      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	2208      	movs	r2, #8
 8002582:	4013      	ands	r3, r2
 8002584:	2b08      	cmp	r3, #8
 8002586:	d11d      	bne.n	80025c4 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2209      	movs	r2, #9
 800258e:	4252      	negs	r2, r2
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2203      	movs	r2, #3
 80025a0:	4013      	ands	r3, r2
 80025a2:	d004      	beq.n	80025ae <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 f8a9 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 80025ac:	e007      	b.n	80025be <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 f89c 	bl	80026ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	0018      	movs	r0, r3
 80025ba:	f000 f8a8 	bl	800270e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	2210      	movs	r2, #16
 80025cc:	4013      	ands	r3, r2
 80025ce:	2b10      	cmp	r3, #16
 80025d0:	d125      	bne.n	800261e <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2210      	movs	r2, #16
 80025da:	4013      	ands	r3, r2
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d11e      	bne.n	800261e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2211      	movs	r2, #17
 80025e6:	4252      	negs	r2, r2
 80025e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2208      	movs	r2, #8
 80025ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	23c0      	movs	r3, #192	; 0xc0
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4013      	ands	r3, r2
 80025fc:	d004      	beq.n	8002608 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	0018      	movs	r0, r3
 8002602:	f000 f87c 	bl	80026fe <HAL_TIM_IC_CaptureCallback>
 8002606:	e007      	b.n	8002618 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	0018      	movs	r0, r3
 800260c:	f000 f86f 	bl	80026ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	0018      	movs	r0, r3
 8002614:	f000 f87b 	bl	800270e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	2b01      	cmp	r3, #1
 800262a:	d10f      	bne.n	800264c <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2201      	movs	r2, #1
 8002634:	4013      	ands	r3, r2
 8002636:	2b01      	cmp	r3, #1
 8002638:	d108      	bne.n	800264c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2202      	movs	r2, #2
 8002640:	4252      	negs	r2, r2
 8002642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	0018      	movs	r0, r3
 8002648:	f000 f849 	bl	80026de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	4013      	ands	r3, r2
 8002656:	2b80      	cmp	r3, #128	; 0x80
 8002658:	d10f      	bne.n	800267a <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	4013      	ands	r3, r2
 8002664:	2b80      	cmp	r3, #128	; 0x80
 8002666:	d108      	bne.n	800267a <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2281      	movs	r2, #129	; 0x81
 800266e:	4252      	negs	r2, r2
 8002670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	0018      	movs	r0, r3
 8002676:	f000 f8d9 	bl	800282c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2240      	movs	r2, #64	; 0x40
 8002682:	4013      	ands	r3, r2
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d10f      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2240      	movs	r2, #64	; 0x40
 8002690:	4013      	ands	r3, r2
 8002692:	2b40      	cmp	r3, #64	; 0x40
 8002694:	d108      	bne.n	80026a8 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2241      	movs	r2, #65	; 0x41
 800269c:	4252      	negs	r2, r2
 800269e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	0018      	movs	r0, r3
 80026a4:	f000 f83b 	bl	800271e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2220      	movs	r2, #32
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b20      	cmp	r3, #32
 80026b4:	d10f      	bne.n	80026d6 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	4013      	ands	r3, r2
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d108      	bne.n	80026d6 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2221      	movs	r2, #33	; 0x21
 80026ca:	4252      	negs	r2, r2
 80026cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 f8a3 	bl	800281c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	b002      	add	sp, #8
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b002      	add	sp, #8
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	b002      	add	sp, #8
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	b002      	add	sp, #8
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	b002      	add	sp, #8
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a2f      	ldr	r2, [pc, #188]	; (8002800 <TIM_Base_SetConfig+0xd0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d003      	beq.n	8002750 <TIM_Base_SetConfig+0x20>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a2e      	ldr	r2, [pc, #184]	; (8002804 <TIM_Base_SetConfig+0xd4>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d108      	bne.n	8002762 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2270      	movs	r2, #112	; 0x70
 8002754:	4393      	bics	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a26      	ldr	r2, [pc, #152]	; (8002800 <TIM_Base_SetConfig+0xd0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <TIM_Base_SetConfig+0x62>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a25      	ldr	r2, [pc, #148]	; (8002804 <TIM_Base_SetConfig+0xd4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00f      	beq.n	8002792 <TIM_Base_SetConfig+0x62>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a24      	ldr	r2, [pc, #144]	; (8002808 <TIM_Base_SetConfig+0xd8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00b      	beq.n	8002792 <TIM_Base_SetConfig+0x62>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a23      	ldr	r2, [pc, #140]	; (800280c <TIM_Base_SetConfig+0xdc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d007      	beq.n	8002792 <TIM_Base_SetConfig+0x62>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a22      	ldr	r2, [pc, #136]	; (8002810 <TIM_Base_SetConfig+0xe0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d003      	beq.n	8002792 <TIM_Base_SetConfig+0x62>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a21      	ldr	r2, [pc, #132]	; (8002814 <TIM_Base_SetConfig+0xe4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d108      	bne.n	80027a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a20      	ldr	r2, [pc, #128]	; (8002818 <TIM_Base_SetConfig+0xe8>)
 8002796:	4013      	ands	r3, r2
 8002798:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	4393      	bics	r3, r2
 80027aa:	001a      	movs	r2, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	689a      	ldr	r2, [r3, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <TIM_Base_SetConfig+0xd0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00b      	beq.n	80027ea <TIM_Base_SetConfig+0xba>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a0d      	ldr	r2, [pc, #52]	; (800280c <TIM_Base_SetConfig+0xdc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <TIM_Base_SetConfig+0xba>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <TIM_Base_SetConfig+0xe0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d003      	beq.n	80027ea <TIM_Base_SetConfig+0xba>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <TIM_Base_SetConfig+0xe4>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d103      	bne.n	80027f2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	691a      	ldr	r2, [r3, #16]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2201      	movs	r2, #1
 80027f6:	615a      	str	r2, [r3, #20]
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b004      	add	sp, #16
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40000400 	.word	0x40000400
 8002808:	40002000 	.word	0x40002000
 800280c:	40014000 	.word	0x40014000
 8002810:	40014400 	.word	0x40014400
 8002814:	40014800 	.word	0x40014800
 8002818:	fffffcff 	.word	0xfffffcff

0800281c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b002      	add	sp, #8
 800282a:	bd80      	pop	{r7, pc}

0800282c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002834:	46c0      	nop			; (mov r8, r8)
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e044      	b.n	80028d8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002852:	2b00      	cmp	r3, #0
 8002854:	d107      	bne.n	8002866 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2274      	movs	r2, #116	; 0x74
 800285a:	2100      	movs	r1, #0
 800285c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0018      	movs	r0, r3
 8002862:	f7fe fb87 	bl	8000f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2224      	movs	r2, #36	; 0x24
 800286a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2101      	movs	r1, #1
 8002878:	438a      	bics	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	0018      	movs	r0, r3
 8002880:	f000 f8da 	bl	8002a38 <UART_SetConfig>
 8002884:	0003      	movs	r3, r0
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e024      	b.n	80028d8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	0018      	movs	r0, r3
 800289a:	f000 fa0d 	bl	8002cb8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	490d      	ldr	r1, [pc, #52]	; (80028e0 <HAL_UART_Init+0xa4>)
 80028aa:	400a      	ands	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2108      	movs	r1, #8
 80028ba:	438a      	bics	r2, r1
 80028bc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2101      	movs	r1, #1
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f000 faa5 	bl	8002e20 <UART_CheckIdleState>
 80028d6:	0003      	movs	r3, r0
}
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	b002      	add	sp, #8
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	fffff7ff 	.word	0xfffff7ff

080028e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	1dbb      	adds	r3, r7, #6
 80028f2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d000      	beq.n	80028fe <HAL_UART_Transmit+0x1a>
 80028fc:	e096      	b.n	8002a2c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_UART_Transmit+0x28>
 8002904:	1dbb      	adds	r3, r7, #6
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e08e      	b.n	8002a2e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	2380      	movs	r3, #128	; 0x80
 8002916:	015b      	lsls	r3, r3, #5
 8002918:	429a      	cmp	r2, r3
 800291a:	d109      	bne.n	8002930 <HAL_UART_Transmit+0x4c>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2201      	movs	r2, #1
 8002928:	4013      	ands	r3, r2
 800292a:	d001      	beq.n	8002930 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e07e      	b.n	8002a2e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2274      	movs	r2, #116	; 0x74
 8002934:	5c9b      	ldrb	r3, [r3, r2]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_UART_Transmit+0x5a>
 800293a:	2302      	movs	r3, #2
 800293c:	e077      	b.n	8002a2e <HAL_UART_Transmit+0x14a>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2274      	movs	r2, #116	; 0x74
 8002942:	2101      	movs	r1, #1
 8002944:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2280      	movs	r2, #128	; 0x80
 800294a:	2100      	movs	r1, #0
 800294c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2221      	movs	r2, #33	; 0x21
 8002952:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002954:	f7fe fc84 	bl	8001260 <HAL_GetTick>
 8002958:	0003      	movs	r3, r0
 800295a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1dba      	adds	r2, r7, #6
 8002960:	2150      	movs	r1, #80	; 0x50
 8002962:	8812      	ldrh	r2, [r2, #0]
 8002964:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1dba      	adds	r2, r7, #6
 800296a:	2152      	movs	r1, #82	; 0x52
 800296c:	8812      	ldrh	r2, [r2, #0]
 800296e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	015b      	lsls	r3, r3, #5
 8002978:	429a      	cmp	r2, r3
 800297a:	d108      	bne.n	800298e <HAL_UART_Transmit+0xaa>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d104      	bne.n	800298e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	61bb      	str	r3, [r7, #24]
 800298c:	e003      	b.n	8002996 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2274      	movs	r2, #116	; 0x74
 800299a:	2100      	movs	r1, #0
 800299c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800299e:	e02d      	b.n	80029fc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	0013      	movs	r3, r2
 80029aa:	2200      	movs	r2, #0
 80029ac:	2180      	movs	r1, #128	; 0x80
 80029ae:	f000 fa7f 	bl	8002eb0 <UART_WaitOnFlagUntilTimeout>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d001      	beq.n	80029ba <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e039      	b.n	8002a2e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10b      	bne.n	80029d8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	881a      	ldrh	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	05d2      	lsls	r2, r2, #23
 80029ca:	0dd2      	lsrs	r2, r2, #23
 80029cc:	b292      	uxth	r2, r2
 80029ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	3302      	adds	r3, #2
 80029d4:	61bb      	str	r3, [r7, #24]
 80029d6:	e008      	b.n	80029ea <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	b292      	uxth	r2, r2
 80029e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	3301      	adds	r3, #1
 80029e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2252      	movs	r2, #82	; 0x52
 80029ee:	5a9b      	ldrh	r3, [r3, r2]
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b299      	uxth	r1, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2252      	movs	r2, #82	; 0x52
 80029fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2252      	movs	r2, #82	; 0x52
 8002a00:	5a9b      	ldrh	r3, [r3, r2]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1cb      	bne.n	80029a0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	0013      	movs	r3, r2
 8002a12:	2200      	movs	r2, #0
 8002a14:	2140      	movs	r1, #64	; 0x40
 8002a16:	f000 fa4b 	bl	8002eb0 <UART_WaitOnFlagUntilTimeout>
 8002a1a:	1e03      	subs	r3, r0, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e005      	b.n	8002a2e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2220      	movs	r2, #32
 8002a26:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e000      	b.n	8002a2e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
  }
}
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b008      	add	sp, #32
 8002a34:	bd80      	pop	{r7, pc}
	...

08002a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a40:	231e      	movs	r3, #30
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a8d      	ldr	r2, [pc, #564]	; (8002c9c <UART_SetConfig+0x264>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	0019      	movs	r1, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4a88      	ldr	r2, [pc, #544]	; (8002ca0 <UART_SetConfig+0x268>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a7f      	ldr	r2, [pc, #508]	; (8002ca4 <UART_SetConfig+0x26c>)
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	0019      	movs	r1, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a7b      	ldr	r2, [pc, #492]	; (8002ca8 <UART_SetConfig+0x270>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d127      	bne.n	8002b0e <UART_SetConfig+0xd6>
 8002abe:	4b7b      	ldr	r3, [pc, #492]	; (8002cac <UART_SetConfig+0x274>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d00d      	beq.n	8002ae6 <UART_SetConfig+0xae>
 8002aca:	d81b      	bhi.n	8002b04 <UART_SetConfig+0xcc>
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d014      	beq.n	8002afa <UART_SetConfig+0xc2>
 8002ad0:	d818      	bhi.n	8002b04 <UART_SetConfig+0xcc>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <UART_SetConfig+0xa4>
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d00a      	beq.n	8002af0 <UART_SetConfig+0xb8>
 8002ada:	e013      	b.n	8002b04 <UART_SetConfig+0xcc>
 8002adc:	231f      	movs	r3, #31
 8002ade:	18fb      	adds	r3, r7, r3
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e021      	b.n	8002b2a <UART_SetConfig+0xf2>
 8002ae6:	231f      	movs	r3, #31
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e01c      	b.n	8002b2a <UART_SetConfig+0xf2>
 8002af0:	231f      	movs	r3, #31
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	2204      	movs	r2, #4
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e017      	b.n	8002b2a <UART_SetConfig+0xf2>
 8002afa:	231f      	movs	r3, #31
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	2208      	movs	r2, #8
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	e012      	b.n	8002b2a <UART_SetConfig+0xf2>
 8002b04:	231f      	movs	r3, #31
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	2210      	movs	r2, #16
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e00d      	b.n	8002b2a <UART_SetConfig+0xf2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a67      	ldr	r2, [pc, #412]	; (8002cb0 <UART_SetConfig+0x278>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d104      	bne.n	8002b22 <UART_SetConfig+0xea>
 8002b18:	231f      	movs	r3, #31
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	e003      	b.n	8002b2a <UART_SetConfig+0xf2>
 8002b22:	231f      	movs	r3, #31
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2210      	movs	r2, #16
 8002b28:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	021b      	lsls	r3, r3, #8
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d15d      	bne.n	8002bf2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002b36:	231f      	movs	r3, #31
 8002b38:	18fb      	adds	r3, r7, r3
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d015      	beq.n	8002b6c <UART_SetConfig+0x134>
 8002b40:	dc18      	bgt.n	8002b74 <UART_SetConfig+0x13c>
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d00d      	beq.n	8002b62 <UART_SetConfig+0x12a>
 8002b46:	dc15      	bgt.n	8002b74 <UART_SetConfig+0x13c>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <UART_SetConfig+0x11a>
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d005      	beq.n	8002b5c <UART_SetConfig+0x124>
 8002b50:	e010      	b.n	8002b74 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b52:	f7ff fa91 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8002b56:	0003      	movs	r3, r0
 8002b58:	61bb      	str	r3, [r7, #24]
        break;
 8002b5a:	e012      	b.n	8002b82 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b5c:	4b55      	ldr	r3, [pc, #340]	; (8002cb4 <UART_SetConfig+0x27c>)
 8002b5e:	61bb      	str	r3, [r7, #24]
        break;
 8002b60:	e00f      	b.n	8002b82 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b62:	f7ff fa1b 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8002b66:	0003      	movs	r3, r0
 8002b68:	61bb      	str	r3, [r7, #24]
        break;
 8002b6a:	e00a      	b.n	8002b82 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	61bb      	str	r3, [r7, #24]
        break;
 8002b72:	e006      	b.n	8002b82 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b78:	231e      	movs	r3, #30
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
        break;
 8002b80:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d100      	bne.n	8002b8a <UART_SetConfig+0x152>
 8002b88:	e07b      	b.n	8002c82 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	005a      	lsls	r2, r3, #1
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	085b      	lsrs	r3, r3, #1
 8002b94:	18d2      	adds	r2, r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	0010      	movs	r0, r2
 8002b9e:	f7fd fac5 	bl	800012c <__udivsi3>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2b0f      	cmp	r3, #15
 8002bac:	d91c      	bls.n	8002be8 <UART_SetConfig+0x1b0>
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	025b      	lsls	r3, r3, #9
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d217      	bcs.n	8002be8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	200e      	movs	r0, #14
 8002bbe:	183b      	adds	r3, r7, r0
 8002bc0:	210f      	movs	r1, #15
 8002bc2:	438a      	bics	r2, r1
 8002bc4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2207      	movs	r2, #7
 8002bce:	4013      	ands	r3, r2
 8002bd0:	b299      	uxth	r1, r3
 8002bd2:	183b      	adds	r3, r7, r0
 8002bd4:	183a      	adds	r2, r7, r0
 8002bd6:	8812      	ldrh	r2, [r2, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	183a      	adds	r2, r7, r0
 8002be2:	8812      	ldrh	r2, [r2, #0]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	e04c      	b.n	8002c82 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002be8:	231e      	movs	r3, #30
 8002bea:	18fb      	adds	r3, r7, r3
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e047      	b.n	8002c82 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bf2:	231f      	movs	r3, #31
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	d015      	beq.n	8002c28 <UART_SetConfig+0x1f0>
 8002bfc:	dc18      	bgt.n	8002c30 <UART_SetConfig+0x1f8>
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d00d      	beq.n	8002c1e <UART_SetConfig+0x1e6>
 8002c02:	dc15      	bgt.n	8002c30 <UART_SetConfig+0x1f8>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <UART_SetConfig+0x1d6>
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d005      	beq.n	8002c18 <UART_SetConfig+0x1e0>
 8002c0c:	e010      	b.n	8002c30 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c0e:	f7ff fa33 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8002c12:	0003      	movs	r3, r0
 8002c14:	61bb      	str	r3, [r7, #24]
        break;
 8002c16:	e012      	b.n	8002c3e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c18:	4b26      	ldr	r3, [pc, #152]	; (8002cb4 <UART_SetConfig+0x27c>)
 8002c1a:	61bb      	str	r3, [r7, #24]
        break;
 8002c1c:	e00f      	b.n	8002c3e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c1e:	f7ff f9bd 	bl	8001f9c <HAL_RCC_GetSysClockFreq>
 8002c22:	0003      	movs	r3, r0
 8002c24:	61bb      	str	r3, [r7, #24]
        break;
 8002c26:	e00a      	b.n	8002c3e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	021b      	lsls	r3, r3, #8
 8002c2c:	61bb      	str	r3, [r7, #24]
        break;
 8002c2e:	e006      	b.n	8002c3e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002c34:	231e      	movs	r3, #30
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
        break;
 8002c3c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01e      	beq.n	8002c82 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	085a      	lsrs	r2, r3, #1
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	18d2      	adds	r2, r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	0019      	movs	r1, r3
 8002c54:	0010      	movs	r0, r2
 8002c56:	f7fd fa69 	bl	800012c <__udivsi3>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b0f      	cmp	r3, #15
 8002c64:	d909      	bls.n	8002c7a <UART_SetConfig+0x242>
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	025b      	lsls	r3, r3, #9
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d204      	bcs.n	8002c7a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	e003      	b.n	8002c82 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002c7a:	231e      	movs	r3, #30
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c8e:	231e      	movs	r3, #30
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	781b      	ldrb	r3, [r3, #0]
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b008      	add	sp, #32
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	ffff69f3 	.word	0xffff69f3
 8002ca0:	ffffcfff 	.word	0xffffcfff
 8002ca4:	fffff4ff 	.word	0xfffff4ff
 8002ca8:	40013800 	.word	0x40013800
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40004400 	.word	0x40004400
 8002cb4:	007a1200 	.word	0x007a1200

08002cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d00b      	beq.n	8002ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <UART_AdvFeatureConfig+0x144>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	4a43      	ldr	r2, [pc, #268]	; (8002e00 <UART_AdvFeatureConfig+0x148>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2204      	movs	r2, #4
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d00b      	beq.n	8002d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a3b      	ldr	r2, [pc, #236]	; (8002e04 <UART_AdvFeatureConfig+0x14c>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d00b      	beq.n	8002d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a34      	ldr	r2, [pc, #208]	; (8002e08 <UART_AdvFeatureConfig+0x150>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2210      	movs	r2, #16
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d00b      	beq.n	8002d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	4a2c      	ldr	r2, [pc, #176]	; (8002e0c <UART_AdvFeatureConfig+0x154>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2220      	movs	r2, #32
 8002d70:	4013      	ands	r3, r2
 8002d72:	d00b      	beq.n	8002d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	4a25      	ldr	r2, [pc, #148]	; (8002e10 <UART_AdvFeatureConfig+0x158>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	0019      	movs	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2240      	movs	r2, #64	; 0x40
 8002d92:	4013      	ands	r3, r2
 8002d94:	d01d      	beq.n	8002dd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <UART_AdvFeatureConfig+0x15c>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	0019      	movs	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	035b      	lsls	r3, r3, #13
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d10b      	bne.n	8002dd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <UART_AdvFeatureConfig+0x160>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d00b      	beq.n	8002df4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4a0e      	ldr	r2, [pc, #56]	; (8002e1c <UART_AdvFeatureConfig+0x164>)
 8002de4:	4013      	ands	r3, r2
 8002de6:	0019      	movs	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
  }
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	fffdffff 	.word	0xfffdffff
 8002e00:	fffeffff 	.word	0xfffeffff
 8002e04:	fffbffff 	.word	0xfffbffff
 8002e08:	ffff7fff 	.word	0xffff7fff
 8002e0c:	ffffefff 	.word	0xffffefff
 8002e10:	ffffdfff 	.word	0xffffdfff
 8002e14:	ffefffff 	.word	0xffefffff
 8002e18:	ff9fffff 	.word	0xff9fffff
 8002e1c:	fff7ffff 	.word	0xfff7ffff

08002e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2280      	movs	r2, #128	; 0x80
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e30:	f7fe fa16 	bl	8001260 <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2208      	movs	r2, #8
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d10c      	bne.n	8002e60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	0391      	lsls	r1, r2, #14
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	4a17      	ldr	r2, [pc, #92]	; (8002eac <UART_CheckIdleState+0x8c>)
 8002e50:	9200      	str	r2, [sp, #0]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f000 f82c 	bl	8002eb0 <UART_WaitOnFlagUntilTimeout>
 8002e58:	1e03      	subs	r3, r0, #0
 8002e5a:	d001      	beq.n	8002e60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e021      	b.n	8002ea4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2204      	movs	r2, #4
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d10c      	bne.n	8002e88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2280      	movs	r2, #128	; 0x80
 8002e72:	03d1      	lsls	r1, r2, #15
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <UART_CheckIdleState+0x8c>)
 8002e78:	9200      	str	r2, [sp, #0]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f000 f818 	bl	8002eb0 <UART_WaitOnFlagUntilTimeout>
 8002e80:	1e03      	subs	r3, r0, #0
 8002e82:	d001      	beq.n	8002e88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e00d      	b.n	8002ea4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2220      	movs	r2, #32
 8002e92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2274      	movs	r2, #116	; 0x74
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b004      	add	sp, #16
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	01ffffff 	.word	0x01ffffff

08002eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b094      	sub	sp, #80	; 0x50
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	1dfb      	adds	r3, r7, #7
 8002ebe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec0:	e0a3      	b.n	800300a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	d100      	bne.n	8002eca <UART_WaitOnFlagUntilTimeout+0x1a>
 8002ec8:	e09f      	b.n	800300a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eca:	f7fe f9c9 	bl	8001260 <HAL_GetTick>
 8002ece:	0002      	movs	r2, r0
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d302      	bcc.n	8002ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d13d      	bne.n	8002f5c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8002eea:	2301      	movs	r3, #1
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef0:	f383 8810 	msr	PRIMASK, r3
}
 8002ef4:	46c0      	nop			; (mov r8, r8)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	494c      	ldr	r1, [pc, #304]	; (8003034 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f08:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0c:	f383 8810 	msr	PRIMASK, r3
}
 8002f10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f12:	f3ef 8310 	mrs	r3, PRIMASK
 8002f16:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f22:	f383 8810 	msr	PRIMASK, r3
}
 8002f26:	46c0      	nop			; (mov r8, r8)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2101      	movs	r1, #1
 8002f34:	438a      	bics	r2, r1
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3e:	f383 8810 	msr	PRIMASK, r3
}
 8002f42:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2220      	movs	r2, #32
 8002f48:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2274      	movs	r2, #116	; 0x74
 8002f54:	2100      	movs	r1, #0
 8002f56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e067      	b.n	800302c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2204      	movs	r2, #4
 8002f64:	4013      	ands	r3, r2
 8002f66:	d050      	beq.n	800300a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	401a      	ands	r2, r3
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d146      	bne.n	800300a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2280      	movs	r2, #128	; 0x80
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f86:	f3ef 8310 	mrs	r3, PRIMASK
 8002f8a:	613b      	str	r3, [r7, #16]
  return(result);
 8002f8c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f90:	2301      	movs	r3, #1
 8002f92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f383 8810 	msr	PRIMASK, r3
}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4923      	ldr	r1, [pc, #140]	; (8003034 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002fa8:	400a      	ands	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f383 8810 	msr	PRIMASK, r3
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8002fbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8002fbe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	f383 8810 	msr	PRIMASK, r3
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2101      	movs	r1, #1
 8002fda:	438a      	bics	r2, r1
 8002fdc:	609a      	str	r2, [r3, #8]
 8002fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	f383 8810 	msr	PRIMASK, r3
}
 8002fe8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2280      	movs	r2, #128	; 0x80
 8002ffa:	2120      	movs	r1, #32
 8002ffc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2274      	movs	r2, #116	; 0x74
 8003002:	2100      	movs	r1, #0
 8003004:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e010      	b.n	800302c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	68ba      	ldr	r2, [r7, #8]
 8003012:	4013      	ands	r3, r2
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	425a      	negs	r2, r3
 800301a:	4153      	adcs	r3, r2
 800301c:	b2db      	uxtb	r3, r3
 800301e:	001a      	movs	r2, r3
 8003020:	1dfb      	adds	r3, r7, #7
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d100      	bne.n	800302a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003028:	e74b      	b.n	8002ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b014      	add	sp, #80	; 0x50
 8003032:	bd80      	pop	{r7, pc}
 8003034:	fffffe5f 	.word	0xfffffe5f

08003038 <__errno>:
 8003038:	4b01      	ldr	r3, [pc, #4]	; (8003040 <__errno+0x8>)
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	4770      	bx	lr
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	2000000c 	.word	0x2000000c

08003044 <__libc_init_array>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	2600      	movs	r6, #0
 8003048:	4d0c      	ldr	r5, [pc, #48]	; (800307c <__libc_init_array+0x38>)
 800304a:	4c0d      	ldr	r4, [pc, #52]	; (8003080 <__libc_init_array+0x3c>)
 800304c:	1b64      	subs	r4, r4, r5
 800304e:	10a4      	asrs	r4, r4, #2
 8003050:	42a6      	cmp	r6, r4
 8003052:	d109      	bne.n	8003068 <__libc_init_array+0x24>
 8003054:	2600      	movs	r6, #0
 8003056:	f000 fc8b 	bl	8003970 <_init>
 800305a:	4d0a      	ldr	r5, [pc, #40]	; (8003084 <__libc_init_array+0x40>)
 800305c:	4c0a      	ldr	r4, [pc, #40]	; (8003088 <__libc_init_array+0x44>)
 800305e:	1b64      	subs	r4, r4, r5
 8003060:	10a4      	asrs	r4, r4, #2
 8003062:	42a6      	cmp	r6, r4
 8003064:	d105      	bne.n	8003072 <__libc_init_array+0x2e>
 8003066:	bd70      	pop	{r4, r5, r6, pc}
 8003068:	00b3      	lsls	r3, r6, #2
 800306a:	58eb      	ldr	r3, [r5, r3]
 800306c:	4798      	blx	r3
 800306e:	3601      	adds	r6, #1
 8003070:	e7ee      	b.n	8003050 <__libc_init_array+0xc>
 8003072:	00b3      	lsls	r3, r6, #2
 8003074:	58eb      	ldr	r3, [r5, r3]
 8003076:	4798      	blx	r3
 8003078:	3601      	adds	r6, #1
 800307a:	e7f2      	b.n	8003062 <__libc_init_array+0x1e>
 800307c:	08003ad4 	.word	0x08003ad4
 8003080:	08003ad4 	.word	0x08003ad4
 8003084:	08003ad4 	.word	0x08003ad4
 8003088:	08003ad8 	.word	0x08003ad8

0800308c <memset>:
 800308c:	0003      	movs	r3, r0
 800308e:	1882      	adds	r2, r0, r2
 8003090:	4293      	cmp	r3, r2
 8003092:	d100      	bne.n	8003096 <memset+0xa>
 8003094:	4770      	bx	lr
 8003096:	7019      	strb	r1, [r3, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	e7f9      	b.n	8003090 <memset+0x4>

0800309c <siprintf>:
 800309c:	b40e      	push	{r1, r2, r3}
 800309e:	b500      	push	{lr}
 80030a0:	490b      	ldr	r1, [pc, #44]	; (80030d0 <siprintf+0x34>)
 80030a2:	b09c      	sub	sp, #112	; 0x70
 80030a4:	ab1d      	add	r3, sp, #116	; 0x74
 80030a6:	9002      	str	r0, [sp, #8]
 80030a8:	9006      	str	r0, [sp, #24]
 80030aa:	9107      	str	r1, [sp, #28]
 80030ac:	9104      	str	r1, [sp, #16]
 80030ae:	4809      	ldr	r0, [pc, #36]	; (80030d4 <siprintf+0x38>)
 80030b0:	4909      	ldr	r1, [pc, #36]	; (80030d8 <siprintf+0x3c>)
 80030b2:	cb04      	ldmia	r3!, {r2}
 80030b4:	9105      	str	r1, [sp, #20]
 80030b6:	6800      	ldr	r0, [r0, #0]
 80030b8:	a902      	add	r1, sp, #8
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	f000 f870 	bl	80031a0 <_svfiprintf_r>
 80030c0:	2300      	movs	r3, #0
 80030c2:	9a02      	ldr	r2, [sp, #8]
 80030c4:	7013      	strb	r3, [r2, #0]
 80030c6:	b01c      	add	sp, #112	; 0x70
 80030c8:	bc08      	pop	{r3}
 80030ca:	b003      	add	sp, #12
 80030cc:	4718      	bx	r3
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	7fffffff 	.word	0x7fffffff
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	ffff0208 	.word	0xffff0208

080030dc <__ssputs_r>:
 80030dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030de:	688e      	ldr	r6, [r1, #8]
 80030e0:	b085      	sub	sp, #20
 80030e2:	0007      	movs	r7, r0
 80030e4:	000c      	movs	r4, r1
 80030e6:	9203      	str	r2, [sp, #12]
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	429e      	cmp	r6, r3
 80030ec:	d83c      	bhi.n	8003168 <__ssputs_r+0x8c>
 80030ee:	2390      	movs	r3, #144	; 0x90
 80030f0:	898a      	ldrh	r2, [r1, #12]
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	421a      	tst	r2, r3
 80030f6:	d034      	beq.n	8003162 <__ssputs_r+0x86>
 80030f8:	6909      	ldr	r1, [r1, #16]
 80030fa:	6823      	ldr	r3, [r4, #0]
 80030fc:	6960      	ldr	r0, [r4, #20]
 80030fe:	1a5b      	subs	r3, r3, r1
 8003100:	9302      	str	r3, [sp, #8]
 8003102:	2303      	movs	r3, #3
 8003104:	4343      	muls	r3, r0
 8003106:	0fdd      	lsrs	r5, r3, #31
 8003108:	18ed      	adds	r5, r5, r3
 800310a:	9b01      	ldr	r3, [sp, #4]
 800310c:	9802      	ldr	r0, [sp, #8]
 800310e:	3301      	adds	r3, #1
 8003110:	181b      	adds	r3, r3, r0
 8003112:	106d      	asrs	r5, r5, #1
 8003114:	42ab      	cmp	r3, r5
 8003116:	d900      	bls.n	800311a <__ssputs_r+0x3e>
 8003118:	001d      	movs	r5, r3
 800311a:	0553      	lsls	r3, r2, #21
 800311c:	d532      	bpl.n	8003184 <__ssputs_r+0xa8>
 800311e:	0029      	movs	r1, r5
 8003120:	0038      	movs	r0, r7
 8003122:	f000 fb53 	bl	80037cc <_malloc_r>
 8003126:	1e06      	subs	r6, r0, #0
 8003128:	d109      	bne.n	800313e <__ssputs_r+0x62>
 800312a:	230c      	movs	r3, #12
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	2340      	movs	r3, #64	; 0x40
 8003130:	2001      	movs	r0, #1
 8003132:	89a2      	ldrh	r2, [r4, #12]
 8003134:	4240      	negs	r0, r0
 8003136:	4313      	orrs	r3, r2
 8003138:	81a3      	strh	r3, [r4, #12]
 800313a:	b005      	add	sp, #20
 800313c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800313e:	9a02      	ldr	r2, [sp, #8]
 8003140:	6921      	ldr	r1, [r4, #16]
 8003142:	f000 faba 	bl	80036ba <memcpy>
 8003146:	89a3      	ldrh	r3, [r4, #12]
 8003148:	4a14      	ldr	r2, [pc, #80]	; (800319c <__ssputs_r+0xc0>)
 800314a:	401a      	ands	r2, r3
 800314c:	2380      	movs	r3, #128	; 0x80
 800314e:	4313      	orrs	r3, r2
 8003150:	81a3      	strh	r3, [r4, #12]
 8003152:	9b02      	ldr	r3, [sp, #8]
 8003154:	6126      	str	r6, [r4, #16]
 8003156:	18f6      	adds	r6, r6, r3
 8003158:	6026      	str	r6, [r4, #0]
 800315a:	6165      	str	r5, [r4, #20]
 800315c:	9e01      	ldr	r6, [sp, #4]
 800315e:	1aed      	subs	r5, r5, r3
 8003160:	60a5      	str	r5, [r4, #8]
 8003162:	9b01      	ldr	r3, [sp, #4]
 8003164:	429e      	cmp	r6, r3
 8003166:	d900      	bls.n	800316a <__ssputs_r+0x8e>
 8003168:	9e01      	ldr	r6, [sp, #4]
 800316a:	0032      	movs	r2, r6
 800316c:	9903      	ldr	r1, [sp, #12]
 800316e:	6820      	ldr	r0, [r4, #0]
 8003170:	f000 faac 	bl	80036cc <memmove>
 8003174:	68a3      	ldr	r3, [r4, #8]
 8003176:	2000      	movs	r0, #0
 8003178:	1b9b      	subs	r3, r3, r6
 800317a:	60a3      	str	r3, [r4, #8]
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	199e      	adds	r6, r3, r6
 8003180:	6026      	str	r6, [r4, #0]
 8003182:	e7da      	b.n	800313a <__ssputs_r+0x5e>
 8003184:	002a      	movs	r2, r5
 8003186:	0038      	movs	r0, r7
 8003188:	f000 fb96 	bl	80038b8 <_realloc_r>
 800318c:	1e06      	subs	r6, r0, #0
 800318e:	d1e0      	bne.n	8003152 <__ssputs_r+0x76>
 8003190:	0038      	movs	r0, r7
 8003192:	6921      	ldr	r1, [r4, #16]
 8003194:	f000 faae 	bl	80036f4 <_free_r>
 8003198:	e7c7      	b.n	800312a <__ssputs_r+0x4e>
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	fffffb7f 	.word	0xfffffb7f

080031a0 <_svfiprintf_r>:
 80031a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a2:	b0a1      	sub	sp, #132	; 0x84
 80031a4:	9003      	str	r0, [sp, #12]
 80031a6:	001d      	movs	r5, r3
 80031a8:	898b      	ldrh	r3, [r1, #12]
 80031aa:	000f      	movs	r7, r1
 80031ac:	0016      	movs	r6, r2
 80031ae:	061b      	lsls	r3, r3, #24
 80031b0:	d511      	bpl.n	80031d6 <_svfiprintf_r+0x36>
 80031b2:	690b      	ldr	r3, [r1, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10e      	bne.n	80031d6 <_svfiprintf_r+0x36>
 80031b8:	2140      	movs	r1, #64	; 0x40
 80031ba:	f000 fb07 	bl	80037cc <_malloc_r>
 80031be:	6038      	str	r0, [r7, #0]
 80031c0:	6138      	str	r0, [r7, #16]
 80031c2:	2800      	cmp	r0, #0
 80031c4:	d105      	bne.n	80031d2 <_svfiprintf_r+0x32>
 80031c6:	230c      	movs	r3, #12
 80031c8:	9a03      	ldr	r2, [sp, #12]
 80031ca:	3801      	subs	r0, #1
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	b021      	add	sp, #132	; 0x84
 80031d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031d2:	2340      	movs	r3, #64	; 0x40
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	2300      	movs	r3, #0
 80031d8:	ac08      	add	r4, sp, #32
 80031da:	6163      	str	r3, [r4, #20]
 80031dc:	3320      	adds	r3, #32
 80031de:	7663      	strb	r3, [r4, #25]
 80031e0:	3310      	adds	r3, #16
 80031e2:	76a3      	strb	r3, [r4, #26]
 80031e4:	9507      	str	r5, [sp, #28]
 80031e6:	0035      	movs	r5, r6
 80031e8:	782b      	ldrb	r3, [r5, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <_svfiprintf_r+0x52>
 80031ee:	2b25      	cmp	r3, #37	; 0x25
 80031f0:	d147      	bne.n	8003282 <_svfiprintf_r+0xe2>
 80031f2:	1bab      	subs	r3, r5, r6
 80031f4:	9305      	str	r3, [sp, #20]
 80031f6:	42b5      	cmp	r5, r6
 80031f8:	d00c      	beq.n	8003214 <_svfiprintf_r+0x74>
 80031fa:	0032      	movs	r2, r6
 80031fc:	0039      	movs	r1, r7
 80031fe:	9803      	ldr	r0, [sp, #12]
 8003200:	f7ff ff6c 	bl	80030dc <__ssputs_r>
 8003204:	1c43      	adds	r3, r0, #1
 8003206:	d100      	bne.n	800320a <_svfiprintf_r+0x6a>
 8003208:	e0ae      	b.n	8003368 <_svfiprintf_r+0x1c8>
 800320a:	6962      	ldr	r2, [r4, #20]
 800320c:	9b05      	ldr	r3, [sp, #20]
 800320e:	4694      	mov	ip, r2
 8003210:	4463      	add	r3, ip
 8003212:	6163      	str	r3, [r4, #20]
 8003214:	782b      	ldrb	r3, [r5, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d100      	bne.n	800321c <_svfiprintf_r+0x7c>
 800321a:	e0a5      	b.n	8003368 <_svfiprintf_r+0x1c8>
 800321c:	2201      	movs	r2, #1
 800321e:	2300      	movs	r3, #0
 8003220:	4252      	negs	r2, r2
 8003222:	6062      	str	r2, [r4, #4]
 8003224:	a904      	add	r1, sp, #16
 8003226:	3254      	adds	r2, #84	; 0x54
 8003228:	1852      	adds	r2, r2, r1
 800322a:	1c6e      	adds	r6, r5, #1
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	60e3      	str	r3, [r4, #12]
 8003230:	60a3      	str	r3, [r4, #8]
 8003232:	7013      	strb	r3, [r2, #0]
 8003234:	65a3      	str	r3, [r4, #88]	; 0x58
 8003236:	2205      	movs	r2, #5
 8003238:	7831      	ldrb	r1, [r6, #0]
 800323a:	4854      	ldr	r0, [pc, #336]	; (800338c <_svfiprintf_r+0x1ec>)
 800323c:	f000 fa32 	bl	80036a4 <memchr>
 8003240:	1c75      	adds	r5, r6, #1
 8003242:	2800      	cmp	r0, #0
 8003244:	d11f      	bne.n	8003286 <_svfiprintf_r+0xe6>
 8003246:	6822      	ldr	r2, [r4, #0]
 8003248:	06d3      	lsls	r3, r2, #27
 800324a:	d504      	bpl.n	8003256 <_svfiprintf_r+0xb6>
 800324c:	2353      	movs	r3, #83	; 0x53
 800324e:	a904      	add	r1, sp, #16
 8003250:	185b      	adds	r3, r3, r1
 8003252:	2120      	movs	r1, #32
 8003254:	7019      	strb	r1, [r3, #0]
 8003256:	0713      	lsls	r3, r2, #28
 8003258:	d504      	bpl.n	8003264 <_svfiprintf_r+0xc4>
 800325a:	2353      	movs	r3, #83	; 0x53
 800325c:	a904      	add	r1, sp, #16
 800325e:	185b      	adds	r3, r3, r1
 8003260:	212b      	movs	r1, #43	; 0x2b
 8003262:	7019      	strb	r1, [r3, #0]
 8003264:	7833      	ldrb	r3, [r6, #0]
 8003266:	2b2a      	cmp	r3, #42	; 0x2a
 8003268:	d016      	beq.n	8003298 <_svfiprintf_r+0xf8>
 800326a:	0035      	movs	r5, r6
 800326c:	2100      	movs	r1, #0
 800326e:	200a      	movs	r0, #10
 8003270:	68e3      	ldr	r3, [r4, #12]
 8003272:	782a      	ldrb	r2, [r5, #0]
 8003274:	1c6e      	adds	r6, r5, #1
 8003276:	3a30      	subs	r2, #48	; 0x30
 8003278:	2a09      	cmp	r2, #9
 800327a:	d94e      	bls.n	800331a <_svfiprintf_r+0x17a>
 800327c:	2900      	cmp	r1, #0
 800327e:	d111      	bne.n	80032a4 <_svfiprintf_r+0x104>
 8003280:	e017      	b.n	80032b2 <_svfiprintf_r+0x112>
 8003282:	3501      	adds	r5, #1
 8003284:	e7b0      	b.n	80031e8 <_svfiprintf_r+0x48>
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <_svfiprintf_r+0x1ec>)
 8003288:	6822      	ldr	r2, [r4, #0]
 800328a:	1ac0      	subs	r0, r0, r3
 800328c:	2301      	movs	r3, #1
 800328e:	4083      	lsls	r3, r0
 8003290:	4313      	orrs	r3, r2
 8003292:	002e      	movs	r6, r5
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	e7ce      	b.n	8003236 <_svfiprintf_r+0x96>
 8003298:	9b07      	ldr	r3, [sp, #28]
 800329a:	1d19      	adds	r1, r3, #4
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	9107      	str	r1, [sp, #28]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	db01      	blt.n	80032a8 <_svfiprintf_r+0x108>
 80032a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80032a6:	e004      	b.n	80032b2 <_svfiprintf_r+0x112>
 80032a8:	425b      	negs	r3, r3
 80032aa:	60e3      	str	r3, [r4, #12]
 80032ac:	2302      	movs	r3, #2
 80032ae:	4313      	orrs	r3, r2
 80032b0:	6023      	str	r3, [r4, #0]
 80032b2:	782b      	ldrb	r3, [r5, #0]
 80032b4:	2b2e      	cmp	r3, #46	; 0x2e
 80032b6:	d10a      	bne.n	80032ce <_svfiprintf_r+0x12e>
 80032b8:	786b      	ldrb	r3, [r5, #1]
 80032ba:	2b2a      	cmp	r3, #42	; 0x2a
 80032bc:	d135      	bne.n	800332a <_svfiprintf_r+0x18a>
 80032be:	9b07      	ldr	r3, [sp, #28]
 80032c0:	3502      	adds	r5, #2
 80032c2:	1d1a      	adds	r2, r3, #4
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	9207      	str	r2, [sp, #28]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db2b      	blt.n	8003324 <_svfiprintf_r+0x184>
 80032cc:	9309      	str	r3, [sp, #36]	; 0x24
 80032ce:	4e30      	ldr	r6, [pc, #192]	; (8003390 <_svfiprintf_r+0x1f0>)
 80032d0:	2203      	movs	r2, #3
 80032d2:	0030      	movs	r0, r6
 80032d4:	7829      	ldrb	r1, [r5, #0]
 80032d6:	f000 f9e5 	bl	80036a4 <memchr>
 80032da:	2800      	cmp	r0, #0
 80032dc:	d006      	beq.n	80032ec <_svfiprintf_r+0x14c>
 80032de:	2340      	movs	r3, #64	; 0x40
 80032e0:	1b80      	subs	r0, r0, r6
 80032e2:	4083      	lsls	r3, r0
 80032e4:	6822      	ldr	r2, [r4, #0]
 80032e6:	3501      	adds	r5, #1
 80032e8:	4313      	orrs	r3, r2
 80032ea:	6023      	str	r3, [r4, #0]
 80032ec:	7829      	ldrb	r1, [r5, #0]
 80032ee:	2206      	movs	r2, #6
 80032f0:	4828      	ldr	r0, [pc, #160]	; (8003394 <_svfiprintf_r+0x1f4>)
 80032f2:	1c6e      	adds	r6, r5, #1
 80032f4:	7621      	strb	r1, [r4, #24]
 80032f6:	f000 f9d5 	bl	80036a4 <memchr>
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d03c      	beq.n	8003378 <_svfiprintf_r+0x1d8>
 80032fe:	4b26      	ldr	r3, [pc, #152]	; (8003398 <_svfiprintf_r+0x1f8>)
 8003300:	2b00      	cmp	r3, #0
 8003302:	d125      	bne.n	8003350 <_svfiprintf_r+0x1b0>
 8003304:	2207      	movs	r2, #7
 8003306:	9b07      	ldr	r3, [sp, #28]
 8003308:	3307      	adds	r3, #7
 800330a:	4393      	bics	r3, r2
 800330c:	3308      	adds	r3, #8
 800330e:	9307      	str	r3, [sp, #28]
 8003310:	6963      	ldr	r3, [r4, #20]
 8003312:	9a04      	ldr	r2, [sp, #16]
 8003314:	189b      	adds	r3, r3, r2
 8003316:	6163      	str	r3, [r4, #20]
 8003318:	e765      	b.n	80031e6 <_svfiprintf_r+0x46>
 800331a:	4343      	muls	r3, r0
 800331c:	0035      	movs	r5, r6
 800331e:	2101      	movs	r1, #1
 8003320:	189b      	adds	r3, r3, r2
 8003322:	e7a6      	b.n	8003272 <_svfiprintf_r+0xd2>
 8003324:	2301      	movs	r3, #1
 8003326:	425b      	negs	r3, r3
 8003328:	e7d0      	b.n	80032cc <_svfiprintf_r+0x12c>
 800332a:	2300      	movs	r3, #0
 800332c:	200a      	movs	r0, #10
 800332e:	001a      	movs	r2, r3
 8003330:	3501      	adds	r5, #1
 8003332:	6063      	str	r3, [r4, #4]
 8003334:	7829      	ldrb	r1, [r5, #0]
 8003336:	1c6e      	adds	r6, r5, #1
 8003338:	3930      	subs	r1, #48	; 0x30
 800333a:	2909      	cmp	r1, #9
 800333c:	d903      	bls.n	8003346 <_svfiprintf_r+0x1a6>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0c5      	beq.n	80032ce <_svfiprintf_r+0x12e>
 8003342:	9209      	str	r2, [sp, #36]	; 0x24
 8003344:	e7c3      	b.n	80032ce <_svfiprintf_r+0x12e>
 8003346:	4342      	muls	r2, r0
 8003348:	0035      	movs	r5, r6
 800334a:	2301      	movs	r3, #1
 800334c:	1852      	adds	r2, r2, r1
 800334e:	e7f1      	b.n	8003334 <_svfiprintf_r+0x194>
 8003350:	ab07      	add	r3, sp, #28
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	003a      	movs	r2, r7
 8003356:	0021      	movs	r1, r4
 8003358:	4b10      	ldr	r3, [pc, #64]	; (800339c <_svfiprintf_r+0x1fc>)
 800335a:	9803      	ldr	r0, [sp, #12]
 800335c:	e000      	b.n	8003360 <_svfiprintf_r+0x1c0>
 800335e:	bf00      	nop
 8003360:	9004      	str	r0, [sp, #16]
 8003362:	9b04      	ldr	r3, [sp, #16]
 8003364:	3301      	adds	r3, #1
 8003366:	d1d3      	bne.n	8003310 <_svfiprintf_r+0x170>
 8003368:	89bb      	ldrh	r3, [r7, #12]
 800336a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800336c:	065b      	lsls	r3, r3, #25
 800336e:	d400      	bmi.n	8003372 <_svfiprintf_r+0x1d2>
 8003370:	e72d      	b.n	80031ce <_svfiprintf_r+0x2e>
 8003372:	2001      	movs	r0, #1
 8003374:	4240      	negs	r0, r0
 8003376:	e72a      	b.n	80031ce <_svfiprintf_r+0x2e>
 8003378:	ab07      	add	r3, sp, #28
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	003a      	movs	r2, r7
 800337e:	0021      	movs	r1, r4
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <_svfiprintf_r+0x1fc>)
 8003382:	9803      	ldr	r0, [sp, #12]
 8003384:	f000 f87c 	bl	8003480 <_printf_i>
 8003388:	e7ea      	b.n	8003360 <_svfiprintf_r+0x1c0>
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	08003aa0 	.word	0x08003aa0
 8003390:	08003aa6 	.word	0x08003aa6
 8003394:	08003aaa 	.word	0x08003aaa
 8003398:	00000000 	.word	0x00000000
 800339c:	080030dd 	.word	0x080030dd

080033a0 <_printf_common>:
 80033a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033a2:	0015      	movs	r5, r2
 80033a4:	9301      	str	r3, [sp, #4]
 80033a6:	688a      	ldr	r2, [r1, #8]
 80033a8:	690b      	ldr	r3, [r1, #16]
 80033aa:	000c      	movs	r4, r1
 80033ac:	9000      	str	r0, [sp, #0]
 80033ae:	4293      	cmp	r3, r2
 80033b0:	da00      	bge.n	80033b4 <_printf_common+0x14>
 80033b2:	0013      	movs	r3, r2
 80033b4:	0022      	movs	r2, r4
 80033b6:	602b      	str	r3, [r5, #0]
 80033b8:	3243      	adds	r2, #67	; 0x43
 80033ba:	7812      	ldrb	r2, [r2, #0]
 80033bc:	2a00      	cmp	r2, #0
 80033be:	d001      	beq.n	80033c4 <_printf_common+0x24>
 80033c0:	3301      	adds	r3, #1
 80033c2:	602b      	str	r3, [r5, #0]
 80033c4:	6823      	ldr	r3, [r4, #0]
 80033c6:	069b      	lsls	r3, r3, #26
 80033c8:	d502      	bpl.n	80033d0 <_printf_common+0x30>
 80033ca:	682b      	ldr	r3, [r5, #0]
 80033cc:	3302      	adds	r3, #2
 80033ce:	602b      	str	r3, [r5, #0]
 80033d0:	6822      	ldr	r2, [r4, #0]
 80033d2:	2306      	movs	r3, #6
 80033d4:	0017      	movs	r7, r2
 80033d6:	401f      	ands	r7, r3
 80033d8:	421a      	tst	r2, r3
 80033da:	d027      	beq.n	800342c <_printf_common+0x8c>
 80033dc:	0023      	movs	r3, r4
 80033de:	3343      	adds	r3, #67	; 0x43
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	1e5a      	subs	r2, r3, #1
 80033e4:	4193      	sbcs	r3, r2
 80033e6:	6822      	ldr	r2, [r4, #0]
 80033e8:	0692      	lsls	r2, r2, #26
 80033ea:	d430      	bmi.n	800344e <_printf_common+0xae>
 80033ec:	0022      	movs	r2, r4
 80033ee:	9901      	ldr	r1, [sp, #4]
 80033f0:	9800      	ldr	r0, [sp, #0]
 80033f2:	9e08      	ldr	r6, [sp, #32]
 80033f4:	3243      	adds	r2, #67	; 0x43
 80033f6:	47b0      	blx	r6
 80033f8:	1c43      	adds	r3, r0, #1
 80033fa:	d025      	beq.n	8003448 <_printf_common+0xa8>
 80033fc:	2306      	movs	r3, #6
 80033fe:	6820      	ldr	r0, [r4, #0]
 8003400:	682a      	ldr	r2, [r5, #0]
 8003402:	68e1      	ldr	r1, [r4, #12]
 8003404:	2500      	movs	r5, #0
 8003406:	4003      	ands	r3, r0
 8003408:	2b04      	cmp	r3, #4
 800340a:	d103      	bne.n	8003414 <_printf_common+0x74>
 800340c:	1a8d      	subs	r5, r1, r2
 800340e:	43eb      	mvns	r3, r5
 8003410:	17db      	asrs	r3, r3, #31
 8003412:	401d      	ands	r5, r3
 8003414:	68a3      	ldr	r3, [r4, #8]
 8003416:	6922      	ldr	r2, [r4, #16]
 8003418:	4293      	cmp	r3, r2
 800341a:	dd01      	ble.n	8003420 <_printf_common+0x80>
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	18ed      	adds	r5, r5, r3
 8003420:	2700      	movs	r7, #0
 8003422:	42bd      	cmp	r5, r7
 8003424:	d120      	bne.n	8003468 <_printf_common+0xc8>
 8003426:	2000      	movs	r0, #0
 8003428:	e010      	b.n	800344c <_printf_common+0xac>
 800342a:	3701      	adds	r7, #1
 800342c:	68e3      	ldr	r3, [r4, #12]
 800342e:	682a      	ldr	r2, [r5, #0]
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	42bb      	cmp	r3, r7
 8003434:	ddd2      	ble.n	80033dc <_printf_common+0x3c>
 8003436:	0022      	movs	r2, r4
 8003438:	2301      	movs	r3, #1
 800343a:	9901      	ldr	r1, [sp, #4]
 800343c:	9800      	ldr	r0, [sp, #0]
 800343e:	9e08      	ldr	r6, [sp, #32]
 8003440:	3219      	adds	r2, #25
 8003442:	47b0      	blx	r6
 8003444:	1c43      	adds	r3, r0, #1
 8003446:	d1f0      	bne.n	800342a <_printf_common+0x8a>
 8003448:	2001      	movs	r0, #1
 800344a:	4240      	negs	r0, r0
 800344c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800344e:	2030      	movs	r0, #48	; 0x30
 8003450:	18e1      	adds	r1, r4, r3
 8003452:	3143      	adds	r1, #67	; 0x43
 8003454:	7008      	strb	r0, [r1, #0]
 8003456:	0021      	movs	r1, r4
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	3145      	adds	r1, #69	; 0x45
 800345c:	7809      	ldrb	r1, [r1, #0]
 800345e:	18a2      	adds	r2, r4, r2
 8003460:	3243      	adds	r2, #67	; 0x43
 8003462:	3302      	adds	r3, #2
 8003464:	7011      	strb	r1, [r2, #0]
 8003466:	e7c1      	b.n	80033ec <_printf_common+0x4c>
 8003468:	0022      	movs	r2, r4
 800346a:	2301      	movs	r3, #1
 800346c:	9901      	ldr	r1, [sp, #4]
 800346e:	9800      	ldr	r0, [sp, #0]
 8003470:	9e08      	ldr	r6, [sp, #32]
 8003472:	321a      	adds	r2, #26
 8003474:	47b0      	blx	r6
 8003476:	1c43      	adds	r3, r0, #1
 8003478:	d0e6      	beq.n	8003448 <_printf_common+0xa8>
 800347a:	3701      	adds	r7, #1
 800347c:	e7d1      	b.n	8003422 <_printf_common+0x82>
	...

08003480 <_printf_i>:
 8003480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003482:	b08b      	sub	sp, #44	; 0x2c
 8003484:	9206      	str	r2, [sp, #24]
 8003486:	000a      	movs	r2, r1
 8003488:	3243      	adds	r2, #67	; 0x43
 800348a:	9307      	str	r3, [sp, #28]
 800348c:	9005      	str	r0, [sp, #20]
 800348e:	9204      	str	r2, [sp, #16]
 8003490:	7e0a      	ldrb	r2, [r1, #24]
 8003492:	000c      	movs	r4, r1
 8003494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003496:	2a78      	cmp	r2, #120	; 0x78
 8003498:	d807      	bhi.n	80034aa <_printf_i+0x2a>
 800349a:	2a62      	cmp	r2, #98	; 0x62
 800349c:	d809      	bhi.n	80034b2 <_printf_i+0x32>
 800349e:	2a00      	cmp	r2, #0
 80034a0:	d100      	bne.n	80034a4 <_printf_i+0x24>
 80034a2:	e0c1      	b.n	8003628 <_printf_i+0x1a8>
 80034a4:	2a58      	cmp	r2, #88	; 0x58
 80034a6:	d100      	bne.n	80034aa <_printf_i+0x2a>
 80034a8:	e08c      	b.n	80035c4 <_printf_i+0x144>
 80034aa:	0026      	movs	r6, r4
 80034ac:	3642      	adds	r6, #66	; 0x42
 80034ae:	7032      	strb	r2, [r6, #0]
 80034b0:	e022      	b.n	80034f8 <_printf_i+0x78>
 80034b2:	0010      	movs	r0, r2
 80034b4:	3863      	subs	r0, #99	; 0x63
 80034b6:	2815      	cmp	r0, #21
 80034b8:	d8f7      	bhi.n	80034aa <_printf_i+0x2a>
 80034ba:	f7fc fe2d 	bl	8000118 <__gnu_thumb1_case_shi>
 80034be:	0016      	.short	0x0016
 80034c0:	fff6001f 	.word	0xfff6001f
 80034c4:	fff6fff6 	.word	0xfff6fff6
 80034c8:	001ffff6 	.word	0x001ffff6
 80034cc:	fff6fff6 	.word	0xfff6fff6
 80034d0:	fff6fff6 	.word	0xfff6fff6
 80034d4:	003600a8 	.word	0x003600a8
 80034d8:	fff6009a 	.word	0xfff6009a
 80034dc:	00b9fff6 	.word	0x00b9fff6
 80034e0:	0036fff6 	.word	0x0036fff6
 80034e4:	fff6fff6 	.word	0xfff6fff6
 80034e8:	009e      	.short	0x009e
 80034ea:	0026      	movs	r6, r4
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	3642      	adds	r6, #66	; 0x42
 80034f0:	1d11      	adds	r1, r2, #4
 80034f2:	6019      	str	r1, [r3, #0]
 80034f4:	6813      	ldr	r3, [r2, #0]
 80034f6:	7033      	strb	r3, [r6, #0]
 80034f8:	2301      	movs	r3, #1
 80034fa:	e0a7      	b.n	800364c <_printf_i+0x1cc>
 80034fc:	6808      	ldr	r0, [r1, #0]
 80034fe:	6819      	ldr	r1, [r3, #0]
 8003500:	1d0a      	adds	r2, r1, #4
 8003502:	0605      	lsls	r5, r0, #24
 8003504:	d50b      	bpl.n	800351e <_printf_i+0x9e>
 8003506:	680d      	ldr	r5, [r1, #0]
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	2d00      	cmp	r5, #0
 800350c:	da03      	bge.n	8003516 <_printf_i+0x96>
 800350e:	232d      	movs	r3, #45	; 0x2d
 8003510:	9a04      	ldr	r2, [sp, #16]
 8003512:	426d      	negs	r5, r5
 8003514:	7013      	strb	r3, [r2, #0]
 8003516:	4b61      	ldr	r3, [pc, #388]	; (800369c <_printf_i+0x21c>)
 8003518:	270a      	movs	r7, #10
 800351a:	9303      	str	r3, [sp, #12]
 800351c:	e01b      	b.n	8003556 <_printf_i+0xd6>
 800351e:	680d      	ldr	r5, [r1, #0]
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	0641      	lsls	r1, r0, #25
 8003524:	d5f1      	bpl.n	800350a <_printf_i+0x8a>
 8003526:	b22d      	sxth	r5, r5
 8003528:	e7ef      	b.n	800350a <_printf_i+0x8a>
 800352a:	680d      	ldr	r5, [r1, #0]
 800352c:	6819      	ldr	r1, [r3, #0]
 800352e:	1d08      	adds	r0, r1, #4
 8003530:	6018      	str	r0, [r3, #0]
 8003532:	062e      	lsls	r6, r5, #24
 8003534:	d501      	bpl.n	800353a <_printf_i+0xba>
 8003536:	680d      	ldr	r5, [r1, #0]
 8003538:	e003      	b.n	8003542 <_printf_i+0xc2>
 800353a:	066d      	lsls	r5, r5, #25
 800353c:	d5fb      	bpl.n	8003536 <_printf_i+0xb6>
 800353e:	680d      	ldr	r5, [r1, #0]
 8003540:	b2ad      	uxth	r5, r5
 8003542:	4b56      	ldr	r3, [pc, #344]	; (800369c <_printf_i+0x21c>)
 8003544:	2708      	movs	r7, #8
 8003546:	9303      	str	r3, [sp, #12]
 8003548:	2a6f      	cmp	r2, #111	; 0x6f
 800354a:	d000      	beq.n	800354e <_printf_i+0xce>
 800354c:	3702      	adds	r7, #2
 800354e:	0023      	movs	r3, r4
 8003550:	2200      	movs	r2, #0
 8003552:	3343      	adds	r3, #67	; 0x43
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	6863      	ldr	r3, [r4, #4]
 8003558:	60a3      	str	r3, [r4, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	db03      	blt.n	8003566 <_printf_i+0xe6>
 800355e:	2204      	movs	r2, #4
 8003560:	6821      	ldr	r1, [r4, #0]
 8003562:	4391      	bics	r1, r2
 8003564:	6021      	str	r1, [r4, #0]
 8003566:	2d00      	cmp	r5, #0
 8003568:	d102      	bne.n	8003570 <_printf_i+0xf0>
 800356a:	9e04      	ldr	r6, [sp, #16]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00c      	beq.n	800358a <_printf_i+0x10a>
 8003570:	9e04      	ldr	r6, [sp, #16]
 8003572:	0028      	movs	r0, r5
 8003574:	0039      	movs	r1, r7
 8003576:	f7fc fe5f 	bl	8000238 <__aeabi_uidivmod>
 800357a:	9b03      	ldr	r3, [sp, #12]
 800357c:	3e01      	subs	r6, #1
 800357e:	5c5b      	ldrb	r3, [r3, r1]
 8003580:	7033      	strb	r3, [r6, #0]
 8003582:	002b      	movs	r3, r5
 8003584:	0005      	movs	r5, r0
 8003586:	429f      	cmp	r7, r3
 8003588:	d9f3      	bls.n	8003572 <_printf_i+0xf2>
 800358a:	2f08      	cmp	r7, #8
 800358c:	d109      	bne.n	80035a2 <_printf_i+0x122>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	07db      	lsls	r3, r3, #31
 8003592:	d506      	bpl.n	80035a2 <_printf_i+0x122>
 8003594:	6863      	ldr	r3, [r4, #4]
 8003596:	6922      	ldr	r2, [r4, #16]
 8003598:	4293      	cmp	r3, r2
 800359a:	dc02      	bgt.n	80035a2 <_printf_i+0x122>
 800359c:	2330      	movs	r3, #48	; 0x30
 800359e:	3e01      	subs	r6, #1
 80035a0:	7033      	strb	r3, [r6, #0]
 80035a2:	9b04      	ldr	r3, [sp, #16]
 80035a4:	1b9b      	subs	r3, r3, r6
 80035a6:	6123      	str	r3, [r4, #16]
 80035a8:	9b07      	ldr	r3, [sp, #28]
 80035aa:	0021      	movs	r1, r4
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	9805      	ldr	r0, [sp, #20]
 80035b0:	9b06      	ldr	r3, [sp, #24]
 80035b2:	aa09      	add	r2, sp, #36	; 0x24
 80035b4:	f7ff fef4 	bl	80033a0 <_printf_common>
 80035b8:	1c43      	adds	r3, r0, #1
 80035ba:	d14c      	bne.n	8003656 <_printf_i+0x1d6>
 80035bc:	2001      	movs	r0, #1
 80035be:	4240      	negs	r0, r0
 80035c0:	b00b      	add	sp, #44	; 0x2c
 80035c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c4:	3145      	adds	r1, #69	; 0x45
 80035c6:	700a      	strb	r2, [r1, #0]
 80035c8:	4a34      	ldr	r2, [pc, #208]	; (800369c <_printf_i+0x21c>)
 80035ca:	9203      	str	r2, [sp, #12]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	6821      	ldr	r1, [r4, #0]
 80035d0:	ca20      	ldmia	r2!, {r5}
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	0608      	lsls	r0, r1, #24
 80035d6:	d516      	bpl.n	8003606 <_printf_i+0x186>
 80035d8:	07cb      	lsls	r3, r1, #31
 80035da:	d502      	bpl.n	80035e2 <_printf_i+0x162>
 80035dc:	2320      	movs	r3, #32
 80035de:	4319      	orrs	r1, r3
 80035e0:	6021      	str	r1, [r4, #0]
 80035e2:	2710      	movs	r7, #16
 80035e4:	2d00      	cmp	r5, #0
 80035e6:	d1b2      	bne.n	800354e <_printf_i+0xce>
 80035e8:	2320      	movs	r3, #32
 80035ea:	6822      	ldr	r2, [r4, #0]
 80035ec:	439a      	bics	r2, r3
 80035ee:	6022      	str	r2, [r4, #0]
 80035f0:	e7ad      	b.n	800354e <_printf_i+0xce>
 80035f2:	2220      	movs	r2, #32
 80035f4:	6809      	ldr	r1, [r1, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	6022      	str	r2, [r4, #0]
 80035fa:	0022      	movs	r2, r4
 80035fc:	2178      	movs	r1, #120	; 0x78
 80035fe:	3245      	adds	r2, #69	; 0x45
 8003600:	7011      	strb	r1, [r2, #0]
 8003602:	4a27      	ldr	r2, [pc, #156]	; (80036a0 <_printf_i+0x220>)
 8003604:	e7e1      	b.n	80035ca <_printf_i+0x14a>
 8003606:	0648      	lsls	r0, r1, #25
 8003608:	d5e6      	bpl.n	80035d8 <_printf_i+0x158>
 800360a:	b2ad      	uxth	r5, r5
 800360c:	e7e4      	b.n	80035d8 <_printf_i+0x158>
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	680d      	ldr	r5, [r1, #0]
 8003612:	1d10      	adds	r0, r2, #4
 8003614:	6949      	ldr	r1, [r1, #20]
 8003616:	6018      	str	r0, [r3, #0]
 8003618:	6813      	ldr	r3, [r2, #0]
 800361a:	062e      	lsls	r6, r5, #24
 800361c:	d501      	bpl.n	8003622 <_printf_i+0x1a2>
 800361e:	6019      	str	r1, [r3, #0]
 8003620:	e002      	b.n	8003628 <_printf_i+0x1a8>
 8003622:	066d      	lsls	r5, r5, #25
 8003624:	d5fb      	bpl.n	800361e <_printf_i+0x19e>
 8003626:	8019      	strh	r1, [r3, #0]
 8003628:	2300      	movs	r3, #0
 800362a:	9e04      	ldr	r6, [sp, #16]
 800362c:	6123      	str	r3, [r4, #16]
 800362e:	e7bb      	b.n	80035a8 <_printf_i+0x128>
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	1d11      	adds	r1, r2, #4
 8003634:	6019      	str	r1, [r3, #0]
 8003636:	6816      	ldr	r6, [r2, #0]
 8003638:	2100      	movs	r1, #0
 800363a:	0030      	movs	r0, r6
 800363c:	6862      	ldr	r2, [r4, #4]
 800363e:	f000 f831 	bl	80036a4 <memchr>
 8003642:	2800      	cmp	r0, #0
 8003644:	d001      	beq.n	800364a <_printf_i+0x1ca>
 8003646:	1b80      	subs	r0, r0, r6
 8003648:	6060      	str	r0, [r4, #4]
 800364a:	6863      	ldr	r3, [r4, #4]
 800364c:	6123      	str	r3, [r4, #16]
 800364e:	2300      	movs	r3, #0
 8003650:	9a04      	ldr	r2, [sp, #16]
 8003652:	7013      	strb	r3, [r2, #0]
 8003654:	e7a8      	b.n	80035a8 <_printf_i+0x128>
 8003656:	6923      	ldr	r3, [r4, #16]
 8003658:	0032      	movs	r2, r6
 800365a:	9906      	ldr	r1, [sp, #24]
 800365c:	9805      	ldr	r0, [sp, #20]
 800365e:	9d07      	ldr	r5, [sp, #28]
 8003660:	47a8      	blx	r5
 8003662:	1c43      	adds	r3, r0, #1
 8003664:	d0aa      	beq.n	80035bc <_printf_i+0x13c>
 8003666:	6823      	ldr	r3, [r4, #0]
 8003668:	079b      	lsls	r3, r3, #30
 800366a:	d415      	bmi.n	8003698 <_printf_i+0x218>
 800366c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800366e:	68e0      	ldr	r0, [r4, #12]
 8003670:	4298      	cmp	r0, r3
 8003672:	daa5      	bge.n	80035c0 <_printf_i+0x140>
 8003674:	0018      	movs	r0, r3
 8003676:	e7a3      	b.n	80035c0 <_printf_i+0x140>
 8003678:	0022      	movs	r2, r4
 800367a:	2301      	movs	r3, #1
 800367c:	9906      	ldr	r1, [sp, #24]
 800367e:	9805      	ldr	r0, [sp, #20]
 8003680:	9e07      	ldr	r6, [sp, #28]
 8003682:	3219      	adds	r2, #25
 8003684:	47b0      	blx	r6
 8003686:	1c43      	adds	r3, r0, #1
 8003688:	d098      	beq.n	80035bc <_printf_i+0x13c>
 800368a:	3501      	adds	r5, #1
 800368c:	68e3      	ldr	r3, [r4, #12]
 800368e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	42ab      	cmp	r3, r5
 8003694:	dcf0      	bgt.n	8003678 <_printf_i+0x1f8>
 8003696:	e7e9      	b.n	800366c <_printf_i+0x1ec>
 8003698:	2500      	movs	r5, #0
 800369a:	e7f7      	b.n	800368c <_printf_i+0x20c>
 800369c:	08003ab1 	.word	0x08003ab1
 80036a0:	08003ac2 	.word	0x08003ac2

080036a4 <memchr>:
 80036a4:	b2c9      	uxtb	r1, r1
 80036a6:	1882      	adds	r2, r0, r2
 80036a8:	4290      	cmp	r0, r2
 80036aa:	d101      	bne.n	80036b0 <memchr+0xc>
 80036ac:	2000      	movs	r0, #0
 80036ae:	4770      	bx	lr
 80036b0:	7803      	ldrb	r3, [r0, #0]
 80036b2:	428b      	cmp	r3, r1
 80036b4:	d0fb      	beq.n	80036ae <memchr+0xa>
 80036b6:	3001      	adds	r0, #1
 80036b8:	e7f6      	b.n	80036a8 <memchr+0x4>

080036ba <memcpy>:
 80036ba:	2300      	movs	r3, #0
 80036bc:	b510      	push	{r4, lr}
 80036be:	429a      	cmp	r2, r3
 80036c0:	d100      	bne.n	80036c4 <memcpy+0xa>
 80036c2:	bd10      	pop	{r4, pc}
 80036c4:	5ccc      	ldrb	r4, [r1, r3]
 80036c6:	54c4      	strb	r4, [r0, r3]
 80036c8:	3301      	adds	r3, #1
 80036ca:	e7f8      	b.n	80036be <memcpy+0x4>

080036cc <memmove>:
 80036cc:	b510      	push	{r4, lr}
 80036ce:	4288      	cmp	r0, r1
 80036d0:	d902      	bls.n	80036d8 <memmove+0xc>
 80036d2:	188b      	adds	r3, r1, r2
 80036d4:	4298      	cmp	r0, r3
 80036d6:	d303      	bcc.n	80036e0 <memmove+0x14>
 80036d8:	2300      	movs	r3, #0
 80036da:	e007      	b.n	80036ec <memmove+0x20>
 80036dc:	5c8b      	ldrb	r3, [r1, r2]
 80036de:	5483      	strb	r3, [r0, r2]
 80036e0:	3a01      	subs	r2, #1
 80036e2:	d2fb      	bcs.n	80036dc <memmove+0x10>
 80036e4:	bd10      	pop	{r4, pc}
 80036e6:	5ccc      	ldrb	r4, [r1, r3]
 80036e8:	54c4      	strb	r4, [r0, r3]
 80036ea:	3301      	adds	r3, #1
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1fa      	bne.n	80036e6 <memmove+0x1a>
 80036f0:	e7f8      	b.n	80036e4 <memmove+0x18>
	...

080036f4 <_free_r>:
 80036f4:	b570      	push	{r4, r5, r6, lr}
 80036f6:	0005      	movs	r5, r0
 80036f8:	2900      	cmp	r1, #0
 80036fa:	d010      	beq.n	800371e <_free_r+0x2a>
 80036fc:	1f0c      	subs	r4, r1, #4
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	da00      	bge.n	8003706 <_free_r+0x12>
 8003704:	18e4      	adds	r4, r4, r3
 8003706:	0028      	movs	r0, r5
 8003708:	f000 f918 	bl	800393c <__malloc_lock>
 800370c:	4a1d      	ldr	r2, [pc, #116]	; (8003784 <_free_r+0x90>)
 800370e:	6813      	ldr	r3, [r2, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d105      	bne.n	8003720 <_free_r+0x2c>
 8003714:	6063      	str	r3, [r4, #4]
 8003716:	6014      	str	r4, [r2, #0]
 8003718:	0028      	movs	r0, r5
 800371a:	f000 f917 	bl	800394c <__malloc_unlock>
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	42a3      	cmp	r3, r4
 8003722:	d908      	bls.n	8003736 <_free_r+0x42>
 8003724:	6821      	ldr	r1, [r4, #0]
 8003726:	1860      	adds	r0, r4, r1
 8003728:	4283      	cmp	r3, r0
 800372a:	d1f3      	bne.n	8003714 <_free_r+0x20>
 800372c:	6818      	ldr	r0, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	1841      	adds	r1, r0, r1
 8003732:	6021      	str	r1, [r4, #0]
 8003734:	e7ee      	b.n	8003714 <_free_r+0x20>
 8003736:	001a      	movs	r2, r3
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <_free_r+0x4e>
 800373e:	42a3      	cmp	r3, r4
 8003740:	d9f9      	bls.n	8003736 <_free_r+0x42>
 8003742:	6811      	ldr	r1, [r2, #0]
 8003744:	1850      	adds	r0, r2, r1
 8003746:	42a0      	cmp	r0, r4
 8003748:	d10b      	bne.n	8003762 <_free_r+0x6e>
 800374a:	6820      	ldr	r0, [r4, #0]
 800374c:	1809      	adds	r1, r1, r0
 800374e:	1850      	adds	r0, r2, r1
 8003750:	6011      	str	r1, [r2, #0]
 8003752:	4283      	cmp	r3, r0
 8003754:	d1e0      	bne.n	8003718 <_free_r+0x24>
 8003756:	6818      	ldr	r0, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	1841      	adds	r1, r0, r1
 800375c:	6011      	str	r1, [r2, #0]
 800375e:	6053      	str	r3, [r2, #4]
 8003760:	e7da      	b.n	8003718 <_free_r+0x24>
 8003762:	42a0      	cmp	r0, r4
 8003764:	d902      	bls.n	800376c <_free_r+0x78>
 8003766:	230c      	movs	r3, #12
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	e7d5      	b.n	8003718 <_free_r+0x24>
 800376c:	6821      	ldr	r1, [r4, #0]
 800376e:	1860      	adds	r0, r4, r1
 8003770:	4283      	cmp	r3, r0
 8003772:	d103      	bne.n	800377c <_free_r+0x88>
 8003774:	6818      	ldr	r0, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	1841      	adds	r1, r0, r1
 800377a:	6021      	str	r1, [r4, #0]
 800377c:	6063      	str	r3, [r4, #4]
 800377e:	6054      	str	r4, [r2, #4]
 8003780:	e7ca      	b.n	8003718 <_free_r+0x24>
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	200001fc 	.word	0x200001fc

08003788 <sbrk_aligned>:
 8003788:	b570      	push	{r4, r5, r6, lr}
 800378a:	4e0f      	ldr	r6, [pc, #60]	; (80037c8 <sbrk_aligned+0x40>)
 800378c:	000d      	movs	r5, r1
 800378e:	6831      	ldr	r1, [r6, #0]
 8003790:	0004      	movs	r4, r0
 8003792:	2900      	cmp	r1, #0
 8003794:	d102      	bne.n	800379c <sbrk_aligned+0x14>
 8003796:	f000 f8bf 	bl	8003918 <_sbrk_r>
 800379a:	6030      	str	r0, [r6, #0]
 800379c:	0029      	movs	r1, r5
 800379e:	0020      	movs	r0, r4
 80037a0:	f000 f8ba 	bl	8003918 <_sbrk_r>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	d00a      	beq.n	80037be <sbrk_aligned+0x36>
 80037a8:	2303      	movs	r3, #3
 80037aa:	1cc5      	adds	r5, r0, #3
 80037ac:	439d      	bics	r5, r3
 80037ae:	42a8      	cmp	r0, r5
 80037b0:	d007      	beq.n	80037c2 <sbrk_aligned+0x3a>
 80037b2:	1a29      	subs	r1, r5, r0
 80037b4:	0020      	movs	r0, r4
 80037b6:	f000 f8af 	bl	8003918 <_sbrk_r>
 80037ba:	1c43      	adds	r3, r0, #1
 80037bc:	d101      	bne.n	80037c2 <sbrk_aligned+0x3a>
 80037be:	2501      	movs	r5, #1
 80037c0:	426d      	negs	r5, r5
 80037c2:	0028      	movs	r0, r5
 80037c4:	bd70      	pop	{r4, r5, r6, pc}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	20000200 	.word	0x20000200

080037cc <_malloc_r>:
 80037cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037ce:	2203      	movs	r2, #3
 80037d0:	1ccb      	adds	r3, r1, #3
 80037d2:	4393      	bics	r3, r2
 80037d4:	3308      	adds	r3, #8
 80037d6:	0006      	movs	r6, r0
 80037d8:	001f      	movs	r7, r3
 80037da:	2b0c      	cmp	r3, #12
 80037dc:	d232      	bcs.n	8003844 <_malloc_r+0x78>
 80037de:	270c      	movs	r7, #12
 80037e0:	42b9      	cmp	r1, r7
 80037e2:	d831      	bhi.n	8003848 <_malloc_r+0x7c>
 80037e4:	0030      	movs	r0, r6
 80037e6:	f000 f8a9 	bl	800393c <__malloc_lock>
 80037ea:	4d32      	ldr	r5, [pc, #200]	; (80038b4 <_malloc_r+0xe8>)
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	001c      	movs	r4, r3
 80037f0:	2c00      	cmp	r4, #0
 80037f2:	d12e      	bne.n	8003852 <_malloc_r+0x86>
 80037f4:	0039      	movs	r1, r7
 80037f6:	0030      	movs	r0, r6
 80037f8:	f7ff ffc6 	bl	8003788 <sbrk_aligned>
 80037fc:	0004      	movs	r4, r0
 80037fe:	1c43      	adds	r3, r0, #1
 8003800:	d11e      	bne.n	8003840 <_malloc_r+0x74>
 8003802:	682c      	ldr	r4, [r5, #0]
 8003804:	0025      	movs	r5, r4
 8003806:	2d00      	cmp	r5, #0
 8003808:	d14a      	bne.n	80038a0 <_malloc_r+0xd4>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	0029      	movs	r1, r5
 800380e:	18e3      	adds	r3, r4, r3
 8003810:	0030      	movs	r0, r6
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	f000 f880 	bl	8003918 <_sbrk_r>
 8003818:	9b01      	ldr	r3, [sp, #4]
 800381a:	4283      	cmp	r3, r0
 800381c:	d143      	bne.n	80038a6 <_malloc_r+0xda>
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	3703      	adds	r7, #3
 8003822:	1aff      	subs	r7, r7, r3
 8003824:	2303      	movs	r3, #3
 8003826:	439f      	bics	r7, r3
 8003828:	3708      	adds	r7, #8
 800382a:	2f0c      	cmp	r7, #12
 800382c:	d200      	bcs.n	8003830 <_malloc_r+0x64>
 800382e:	270c      	movs	r7, #12
 8003830:	0039      	movs	r1, r7
 8003832:	0030      	movs	r0, r6
 8003834:	f7ff ffa8 	bl	8003788 <sbrk_aligned>
 8003838:	1c43      	adds	r3, r0, #1
 800383a:	d034      	beq.n	80038a6 <_malloc_r+0xda>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	19df      	adds	r7, r3, r7
 8003840:	6027      	str	r7, [r4, #0]
 8003842:	e013      	b.n	800386c <_malloc_r+0xa0>
 8003844:	2b00      	cmp	r3, #0
 8003846:	dacb      	bge.n	80037e0 <_malloc_r+0x14>
 8003848:	230c      	movs	r3, #12
 800384a:	2500      	movs	r5, #0
 800384c:	6033      	str	r3, [r6, #0]
 800384e:	0028      	movs	r0, r5
 8003850:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003852:	6822      	ldr	r2, [r4, #0]
 8003854:	1bd1      	subs	r1, r2, r7
 8003856:	d420      	bmi.n	800389a <_malloc_r+0xce>
 8003858:	290b      	cmp	r1, #11
 800385a:	d917      	bls.n	800388c <_malloc_r+0xc0>
 800385c:	19e2      	adds	r2, r4, r7
 800385e:	6027      	str	r7, [r4, #0]
 8003860:	42a3      	cmp	r3, r4
 8003862:	d111      	bne.n	8003888 <_malloc_r+0xbc>
 8003864:	602a      	str	r2, [r5, #0]
 8003866:	6863      	ldr	r3, [r4, #4]
 8003868:	6011      	str	r1, [r2, #0]
 800386a:	6053      	str	r3, [r2, #4]
 800386c:	0030      	movs	r0, r6
 800386e:	0025      	movs	r5, r4
 8003870:	f000 f86c 	bl	800394c <__malloc_unlock>
 8003874:	2207      	movs	r2, #7
 8003876:	350b      	adds	r5, #11
 8003878:	1d23      	adds	r3, r4, #4
 800387a:	4395      	bics	r5, r2
 800387c:	1aea      	subs	r2, r5, r3
 800387e:	429d      	cmp	r5, r3
 8003880:	d0e5      	beq.n	800384e <_malloc_r+0x82>
 8003882:	1b5b      	subs	r3, r3, r5
 8003884:	50a3      	str	r3, [r4, r2]
 8003886:	e7e2      	b.n	800384e <_malloc_r+0x82>
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	e7ec      	b.n	8003866 <_malloc_r+0x9a>
 800388c:	6862      	ldr	r2, [r4, #4]
 800388e:	42a3      	cmp	r3, r4
 8003890:	d101      	bne.n	8003896 <_malloc_r+0xca>
 8003892:	602a      	str	r2, [r5, #0]
 8003894:	e7ea      	b.n	800386c <_malloc_r+0xa0>
 8003896:	605a      	str	r2, [r3, #4]
 8003898:	e7e8      	b.n	800386c <_malloc_r+0xa0>
 800389a:	0023      	movs	r3, r4
 800389c:	6864      	ldr	r4, [r4, #4]
 800389e:	e7a7      	b.n	80037f0 <_malloc_r+0x24>
 80038a0:	002c      	movs	r4, r5
 80038a2:	686d      	ldr	r5, [r5, #4]
 80038a4:	e7af      	b.n	8003806 <_malloc_r+0x3a>
 80038a6:	230c      	movs	r3, #12
 80038a8:	0030      	movs	r0, r6
 80038aa:	6033      	str	r3, [r6, #0]
 80038ac:	f000 f84e 	bl	800394c <__malloc_unlock>
 80038b0:	e7cd      	b.n	800384e <_malloc_r+0x82>
 80038b2:	46c0      	nop			; (mov r8, r8)
 80038b4:	200001fc 	.word	0x200001fc

080038b8 <_realloc_r>:
 80038b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038ba:	0007      	movs	r7, r0
 80038bc:	000e      	movs	r6, r1
 80038be:	0014      	movs	r4, r2
 80038c0:	2900      	cmp	r1, #0
 80038c2:	d105      	bne.n	80038d0 <_realloc_r+0x18>
 80038c4:	0011      	movs	r1, r2
 80038c6:	f7ff ff81 	bl	80037cc <_malloc_r>
 80038ca:	0005      	movs	r5, r0
 80038cc:	0028      	movs	r0, r5
 80038ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80038d0:	2a00      	cmp	r2, #0
 80038d2:	d103      	bne.n	80038dc <_realloc_r+0x24>
 80038d4:	f7ff ff0e 	bl	80036f4 <_free_r>
 80038d8:	0025      	movs	r5, r4
 80038da:	e7f7      	b.n	80038cc <_realloc_r+0x14>
 80038dc:	f000 f83e 	bl	800395c <_malloc_usable_size_r>
 80038e0:	9001      	str	r0, [sp, #4]
 80038e2:	4284      	cmp	r4, r0
 80038e4:	d803      	bhi.n	80038ee <_realloc_r+0x36>
 80038e6:	0035      	movs	r5, r6
 80038e8:	0843      	lsrs	r3, r0, #1
 80038ea:	42a3      	cmp	r3, r4
 80038ec:	d3ee      	bcc.n	80038cc <_realloc_r+0x14>
 80038ee:	0021      	movs	r1, r4
 80038f0:	0038      	movs	r0, r7
 80038f2:	f7ff ff6b 	bl	80037cc <_malloc_r>
 80038f6:	1e05      	subs	r5, r0, #0
 80038f8:	d0e8      	beq.n	80038cc <_realloc_r+0x14>
 80038fa:	9b01      	ldr	r3, [sp, #4]
 80038fc:	0022      	movs	r2, r4
 80038fe:	429c      	cmp	r4, r3
 8003900:	d900      	bls.n	8003904 <_realloc_r+0x4c>
 8003902:	001a      	movs	r2, r3
 8003904:	0031      	movs	r1, r6
 8003906:	0028      	movs	r0, r5
 8003908:	f7ff fed7 	bl	80036ba <memcpy>
 800390c:	0031      	movs	r1, r6
 800390e:	0038      	movs	r0, r7
 8003910:	f7ff fef0 	bl	80036f4 <_free_r>
 8003914:	e7da      	b.n	80038cc <_realloc_r+0x14>
	...

08003918 <_sbrk_r>:
 8003918:	2300      	movs	r3, #0
 800391a:	b570      	push	{r4, r5, r6, lr}
 800391c:	4d06      	ldr	r5, [pc, #24]	; (8003938 <_sbrk_r+0x20>)
 800391e:	0004      	movs	r4, r0
 8003920:	0008      	movs	r0, r1
 8003922:	602b      	str	r3, [r5, #0]
 8003924:	f7fd fbdc 	bl	80010e0 <_sbrk>
 8003928:	1c43      	adds	r3, r0, #1
 800392a:	d103      	bne.n	8003934 <_sbrk_r+0x1c>
 800392c:	682b      	ldr	r3, [r5, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d000      	beq.n	8003934 <_sbrk_r+0x1c>
 8003932:	6023      	str	r3, [r4, #0]
 8003934:	bd70      	pop	{r4, r5, r6, pc}
 8003936:	46c0      	nop			; (mov r8, r8)
 8003938:	20000204 	.word	0x20000204

0800393c <__malloc_lock>:
 800393c:	b510      	push	{r4, lr}
 800393e:	4802      	ldr	r0, [pc, #8]	; (8003948 <__malloc_lock+0xc>)
 8003940:	f000 f814 	bl	800396c <__retarget_lock_acquire_recursive>
 8003944:	bd10      	pop	{r4, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	20000208 	.word	0x20000208

0800394c <__malloc_unlock>:
 800394c:	b510      	push	{r4, lr}
 800394e:	4802      	ldr	r0, [pc, #8]	; (8003958 <__malloc_unlock+0xc>)
 8003950:	f000 f80d 	bl	800396e <__retarget_lock_release_recursive>
 8003954:	bd10      	pop	{r4, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	20000208 	.word	0x20000208

0800395c <_malloc_usable_size_r>:
 800395c:	1f0b      	subs	r3, r1, #4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	1f18      	subs	r0, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	da01      	bge.n	800396a <_malloc_usable_size_r+0xe>
 8003966:	580b      	ldr	r3, [r1, r0]
 8003968:	18c0      	adds	r0, r0, r3
 800396a:	4770      	bx	lr

0800396c <__retarget_lock_acquire_recursive>:
 800396c:	4770      	bx	lr

0800396e <__retarget_lock_release_recursive>:
 800396e:	4770      	bx	lr

08003970 <_init>:
 8003970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003976:	bc08      	pop	{r3}
 8003978:	469e      	mov	lr, r3
 800397a:	4770      	bx	lr

0800397c <_fini>:
 800397c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003982:	bc08      	pop	{r3}
 8003984:	469e      	mov	lr, r3
 8003986:	4770      	bx	lr
