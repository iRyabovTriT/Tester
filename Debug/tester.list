
tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080026b8  080026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800272c  0800272c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800272c  0800272c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800272c  0800272c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800272c  0800272c  0001272c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  08002740  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08002740  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092fd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018d8  00000000  00000000  00029331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002ac10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  0002b658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fa69  00000000  00000000  0002bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b60d  00000000  00000000  0003ba59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061d9f  00000000  00000000  00047066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a8e05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000248c  00000000  00000000  000a8e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026a0 	.word	0x080026a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080026a0 	.word	0x080026a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fecb 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f89d 	bl	8000368 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f99d 	bl	800056c <MX_GPIO_Init>
  MX_RTC_Init();
 8000232:	f000 f92b 	bl	800048c <MX_RTC_Init>
  MX_TIM6_Init();
 8000236:	f000 f94f 	bl	80004d8 <MX_TIM6_Init>
  MX_TIM14_Init();
 800023a:	f000 f971 	bl	8000520 <MX_TIM14_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800023e:	f000 f8f7 	bl	8000430 <MX_NVIC_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(arrayCount < 11)
 8000242:	4b44      	ldr	r3, [pc, #272]	; (8000354 <main+0x134>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	2b0a      	cmp	r3, #10
 8000248:	dc2a      	bgt.n	80002a0 <main+0x80>
	  {
		  HAL_GPIO_WritePin(GetPort(arrayCount), Cabel_Pin[arrayCount], GPIO_PIN_SET);
 800024a:	4b42      	ldr	r3, [pc, #264]	; (8000354 <main+0x134>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	b29b      	uxth	r3, r3
 8000250:	0018      	movs	r0, r3
 8000252:	f000 fcfd 	bl	8000c50 <GetPort>
 8000256:	4b3f      	ldr	r3, [pc, #252]	; (8000354 <main+0x134>)
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	4b3f      	ldr	r3, [pc, #252]	; (8000358 <main+0x138>)
 800025c:	0052      	lsls	r2, r2, #1
 800025e:	5ad3      	ldrh	r3, [r2, r3]
 8000260:	2201      	movs	r2, #1
 8000262:	0019      	movs	r1, r3
 8000264:	f001 f99f 	bl	80015a6 <HAL_GPIO_WritePin>
		  //HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);

		  HAL_Delay(100);
 8000268:	2064      	movs	r0, #100	; 0x64
 800026a:	f000 ff0d 	bl	8001088 <HAL_Delay>

		  HAL_GPIO_WritePin(GetPort(arrayCount), Cabel_Pin[arrayCount], GPIO_PIN_RESET);
 800026e:	4b39      	ldr	r3, [pc, #228]	; (8000354 <main+0x134>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	b29b      	uxth	r3, r3
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fceb 	bl	8000c50 <GetPort>
 800027a:	4b36      	ldr	r3, [pc, #216]	; (8000354 <main+0x134>)
 800027c:	681a      	ldr	r2, [r3, #0]
 800027e:	4b36      	ldr	r3, [pc, #216]	; (8000358 <main+0x138>)
 8000280:	0052      	lsls	r2, r2, #1
 8000282:	5ad3      	ldrh	r3, [r2, r3]
 8000284:	2200      	movs	r2, #0
 8000286:	0019      	movs	r1, r3
 8000288:	f001 f98d 	bl	80015a6 <HAL_GPIO_WritePin>

		  arrayCount++;
 800028c:	4b31      	ldr	r3, [pc, #196]	; (8000354 <main+0x134>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	1c5a      	adds	r2, r3, #1
 8000292:	4b30      	ldr	r3, [pc, #192]	; (8000354 <main+0x134>)
 8000294:	601a      	str	r2, [r3, #0]
		  count++;
 8000296:	4b31      	ldr	r3, [pc, #196]	; (800035c <main+0x13c>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	1c5a      	adds	r2, r3, #1
 800029c:	4b2f      	ldr	r3, [pc, #188]	; (800035c <main+0x13c>)
 800029e:	601a      	str	r2, [r3, #0]
	  }

	  if(arrayCount == 11)
 80002a0:	4b2c      	ldr	r3, [pc, #176]	; (8000354 <main+0x134>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	2b0b      	cmp	r3, #11
 80002a6:	d1cc      	bne.n	8000242 <main+0x22>
	  {
		  for(int i = 0; i < 11; i++)
 80002a8:	2300      	movs	r3, #0
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	e00b      	b.n	80002c6 <main+0xa6>
		  {
			  if(ResPinTest[i] == 0)
 80002ae:	4b2c      	ldr	r3, [pc, #176]	; (8000360 <main+0x140>)
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	0052      	lsls	r2, r2, #1
 80002b4:	5ad3      	ldrh	r3, [r2, r3]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d102      	bne.n	80002c0 <main+0xa0>
			  {
				  ErrorTest = 1;
 80002ba:	4b2a      	ldr	r3, [pc, #168]	; (8000364 <main+0x144>)
 80002bc:	2201      	movs	r2, #1
 80002be:	701a      	strb	r2, [r3, #0]
		  for(int i = 0; i < 11; i++)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	3301      	adds	r3, #1
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2b0a      	cmp	r3, #10
 80002ca:	ddf0      	ble.n	80002ae <main+0x8e>
			  }
		  }
		  if(ErrorTest)
 80002cc:	4b25      	ldr	r3, [pc, #148]	; (8000364 <main+0x144>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d036      	beq.n	8000342 <main+0x122>
		  {
			  arrayCount++;
 80002d4:	4b1f      	ldr	r3, [pc, #124]	; (8000354 <main+0x134>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	1c5a      	adds	r2, r3, #1
 80002da:	4b1e      	ldr	r3, [pc, #120]	; (8000354 <main+0x134>)
 80002dc:	601a      	str	r2, [r3, #0]

			  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80002de:	2390      	movs	r3, #144	; 0x90
 80002e0:	05db      	lsls	r3, r3, #23
 80002e2:	2200      	movs	r2, #0
 80002e4:	2108      	movs	r1, #8
 80002e6:	0018      	movs	r0, r3
 80002e8:	f001 f95d 	bl	80015a6 <HAL_GPIO_WritePin>

			  for(int i = 0; i < 3; i++)
 80002ec:	2300      	movs	r3, #0
 80002ee:	603b      	str	r3, [r7, #0]
 80002f0:	e023      	b.n	800033a <main+0x11a>
			  {
				  HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, GPIO_PIN_SET);
 80002f2:	2390      	movs	r3, #144	; 0x90
 80002f4:	05db      	lsls	r3, r3, #23
 80002f6:	2201      	movs	r2, #1
 80002f8:	2104      	movs	r1, #4
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 f953 	bl	80015a6 <HAL_GPIO_WritePin>
				  if(i == 2)
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	2b02      	cmp	r3, #2
 8000304:	d105      	bne.n	8000312 <main+0xf2>
				  {
					  HAL_Delay(1000);
 8000306:	23fa      	movs	r3, #250	; 0xfa
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	0018      	movs	r0, r3
 800030c:	f000 febc 	bl	8001088 <HAL_Delay>
 8000310:	e004      	b.n	800031c <main+0xfc>
				  }else
				  {
					  HAL_Delay(500);
 8000312:	23fa      	movs	r3, #250	; 0xfa
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	0018      	movs	r0, r3
 8000318:	f000 feb6 	bl	8001088 <HAL_Delay>
				  }

				  HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, GPIO_PIN_RESET);
 800031c:	2390      	movs	r3, #144	; 0x90
 800031e:	05db      	lsls	r3, r3, #23
 8000320:	2200      	movs	r2, #0
 8000322:	2104      	movs	r1, #4
 8000324:	0018      	movs	r0, r3
 8000326:	f001 f93e 	bl	80015a6 <HAL_GPIO_WritePin>
				  HAL_Delay(500);
 800032a:	23fa      	movs	r3, #250	; 0xfa
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	0018      	movs	r0, r3
 8000330:	f000 feaa 	bl	8001088 <HAL_Delay>
			  for(int i = 0; i < 3; i++)
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	3301      	adds	r3, #1
 8000338:	603b      	str	r3, [r7, #0]
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	2b02      	cmp	r3, #2
 800033e:	ddd8      	ble.n	80002f2 <main+0xd2>
 8000340:	e77f      	b.n	8000242 <main+0x22>
			  }
		  }
		  else
		  {
			  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000342:	2390      	movs	r3, #144	; 0x90
 8000344:	05db      	lsls	r3, r3, #23
 8000346:	2200      	movs	r2, #0
 8000348:	2102      	movs	r1, #2
 800034a:	0018      	movs	r0, r3
 800034c:	f001 f92b 	bl	80015a6 <HAL_GPIO_WritePin>
	  if(arrayCount < 11)
 8000350:	e777      	b.n	8000242 <main+0x22>
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	200000f8 	.word	0x200000f8
 8000358:	080026d8 	.word	0x080026d8
 800035c:	200000f4 	.word	0x200000f4
 8000360:	200000dc 	.word	0x200000dc
 8000364:	200000d9 	.word	0x200000d9

08000368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000368:	b590      	push	{r4, r7, lr}
 800036a:	b095      	sub	sp, #84	; 0x54
 800036c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036e:	2420      	movs	r4, #32
 8000370:	193b      	adds	r3, r7, r4
 8000372:	0018      	movs	r0, r3
 8000374:	2330      	movs	r3, #48	; 0x30
 8000376:	001a      	movs	r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	f002 f989 	bl	8002690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037e:	2310      	movs	r3, #16
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	0018      	movs	r0, r3
 8000384:	2310      	movs	r3, #16
 8000386:	001a      	movs	r2, r3
 8000388:	2100      	movs	r1, #0
 800038a:	f002 f981 	bl	8002690 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800038e:	003b      	movs	r3, r7
 8000390:	0018      	movs	r0, r3
 8000392:	2310      	movs	r3, #16
 8000394:	001a      	movs	r2, r3
 8000396:	2100      	movs	r1, #0
 8000398:	f002 f97a 	bl	8002690 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800039c:	0021      	movs	r1, r4
 800039e:	187b      	adds	r3, r7, r1
 80003a0:	2209      	movs	r2, #9
 80003a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003a4:	187b      	adds	r3, r7, r1
 80003a6:	2201      	movs	r2, #1
 80003a8:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2201      	movs	r2, #1
 80003ae:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2202      	movs	r2, #2
 80003b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2280      	movs	r2, #128	; 0x80
 80003ba:	0252      	lsls	r2, r2, #9
 80003bc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2280      	movs	r2, #128	; 0x80
 80003c2:	0352      	lsls	r2, r2, #13
 80003c4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2200      	movs	r2, #0
 80003ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	0018      	movs	r0, r3
 80003d0:	f001 f922 	bl	8001618 <HAL_RCC_OscConfig>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80003d8:	f000 fce6 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003dc:	2110      	movs	r1, #16
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2207      	movs	r2, #7
 80003e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2202      	movs	r2, #2
 80003e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2101      	movs	r1, #1
 80003fa:	0018      	movs	r0, r3
 80003fc:	f001 fc26 	bl	8001c4c <HAL_RCC_ClockConfig>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000404:	f000 fcd0 	bl	8000da8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000408:	003b      	movs	r3, r7
 800040a:	2280      	movs	r2, #128	; 0x80
 800040c:	0252      	lsls	r2, r2, #9
 800040e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000410:	003b      	movs	r3, r7
 8000412:	2280      	movs	r2, #128	; 0x80
 8000414:	0092      	lsls	r2, r2, #2
 8000416:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000418:	003b      	movs	r3, r7
 800041a:	0018      	movs	r0, r3
 800041c:	f001 fd48 	bl	8001eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000424:	f000 fcc0 	bl	8000da8 <Error_Handler>
  }
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b015      	add	sp, #84	; 0x54
 800042e:	bd90      	pop	{r4, r7, pc}

08000430 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* EXTI0_1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000434:	2200      	movs	r2, #0
 8000436:	2100      	movs	r1, #0
 8000438:	2005      	movs	r0, #5
 800043a:	f000 fef5 	bl	8001228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800043e:	2005      	movs	r0, #5
 8000440:	f000 ff07 	bl	8001252 <HAL_NVIC_EnableIRQ>
  /* EXTI2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	2100      	movs	r1, #0
 8000448:	2006      	movs	r0, #6
 800044a:	f000 feed 	bl	8001228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800044e:	2006      	movs	r0, #6
 8000450:	f000 feff 	bl	8001252 <HAL_NVIC_EnableIRQ>
  /* EXTI4_15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000454:	2200      	movs	r2, #0
 8000456:	2100      	movs	r1, #0
 8000458:	2007      	movs	r0, #7
 800045a:	f000 fee5 	bl	8001228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800045e:	2007      	movs	r0, #7
 8000460:	f000 fef7 	bl	8001252 <HAL_NVIC_EnableIRQ>
  /* TIM6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000464:	2200      	movs	r2, #0
 8000466:	2100      	movs	r1, #0
 8000468:	2011      	movs	r0, #17
 800046a:	f000 fedd 	bl	8001228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800046e:	2011      	movs	r0, #17
 8000470:	f000 feef 	bl	8001252 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	2100      	movs	r1, #0
 8000478:	2004      	movs	r0, #4
 800047a:	f000 fed5 	bl	8001228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800047e:	2004      	movs	r0, #4
 8000480:	f000 fee7 	bl	8001252 <HAL_NVIC_EnableIRQ>
}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <MX_RTC_Init+0x44>)
 8000492:	4a10      	ldr	r2, [pc, #64]	; (80004d4 <MX_RTC_Init+0x48>)
 8000494:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <MX_RTC_Init+0x44>)
 8000498:	2200      	movs	r2, #0
 800049a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <MX_RTC_Init+0x44>)
 800049e:	227f      	movs	r2, #127	; 0x7f
 80004a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <MX_RTC_Init+0x44>)
 80004a4:	22ff      	movs	r2, #255	; 0xff
 80004a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <MX_RTC_Init+0x44>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <MX_RTC_Init+0x44>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80004b4:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <MX_RTC_Init+0x44>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <MX_RTC_Init+0x44>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f001 fdc5 	bl	800204c <HAL_RTC_Init>
 80004c2:	1e03      	subs	r3, r0, #0
 80004c4:	d001      	beq.n	80004ca <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80004c6:	f000 fc6f 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000028 	.word	0x20000028
 80004d4:	40002800 	.word	0x40002800

080004d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80004dc:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <MX_TIM6_Init+0x3c>)
 80004de:	4a0e      	ldr	r2, [pc, #56]	; (8000518 <MX_TIM6_Init+0x40>)
 80004e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 359;
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_TIM6_Init+0x3c>)
 80004e4:	2268      	movs	r2, #104	; 0x68
 80004e6:	32ff      	adds	r2, #255	; 0xff
 80004e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ea:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <MX_TIM6_Init+0x3c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <MX_TIM6_Init+0x3c>)
 80004f2:	4a0a      	ldr	r2, [pc, #40]	; (800051c <MX_TIM6_Init+0x44>)
 80004f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <MX_TIM6_Init+0x3c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <MX_TIM6_Init+0x3c>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 fe8d 	bl	800221e <HAL_TIM_Base_Init>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <MX_TIM6_Init+0x34>
  {
    Error_Handler();
 8000508:	f000 fc4e 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	20000048 	.word	0x20000048
 8000518:	40001000 	.word	0x40001000
 800051c:	00002710 	.word	0x00002710

08000520 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_TIM14_Init+0x40>)
 8000526:	4a0f      	ldr	r2, [pc, #60]	; (8000564 <MX_TIM14_Init+0x44>)
 8000528:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <MX_TIM14_Init+0x40>)
 800052c:	2200      	movs	r2, #0
 800052e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <MX_TIM14_Init+0x40>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <MX_TIM14_Init+0x40>)
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <MX_TIM14_Init+0x48>)
 800053a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800053c:	4b08      	ldr	r3, [pc, #32]	; (8000560 <MX_TIM14_Init+0x40>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000542:	4b07      	ldr	r3, [pc, #28]	; (8000560 <MX_TIM14_Init+0x40>)
 8000544:	2200      	movs	r2, #0
 8000546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <MX_TIM14_Init+0x40>)
 800054a:	0018      	movs	r0, r3
 800054c:	f001 fe67 	bl	800221e <HAL_TIM_Base_Init>
 8000550:	1e03      	subs	r3, r0, #0
 8000552:	d001      	beq.n	8000558 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000554:	f000 fc28 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	20000090 	.word	0x20000090
 8000564:	40002000 	.word	0x40002000
 8000568:	0000ffff 	.word	0x0000ffff

0800056c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b08b      	sub	sp, #44	; 0x2c
 8000570:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	2414      	movs	r4, #20
 8000574:	193b      	adds	r3, r7, r4
 8000576:	0018      	movs	r0, r3
 8000578:	2314      	movs	r3, #20
 800057a:	001a      	movs	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	f002 f887 	bl	8002690 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4bb4      	ldr	r3, [pc, #720]	; (8000854 <MX_GPIO_Init+0x2e8>)
 8000584:	695a      	ldr	r2, [r3, #20]
 8000586:	4bb3      	ldr	r3, [pc, #716]	; (8000854 <MX_GPIO_Init+0x2e8>)
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0309      	lsls	r1, r1, #12
 800058c:	430a      	orrs	r2, r1
 800058e:	615a      	str	r2, [r3, #20]
 8000590:	4bb0      	ldr	r3, [pc, #704]	; (8000854 <MX_GPIO_Init+0x2e8>)
 8000592:	695a      	ldr	r2, [r3, #20]
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	031b      	lsls	r3, r3, #12
 8000598:	4013      	ands	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059e:	4bad      	ldr	r3, [pc, #692]	; (8000854 <MX_GPIO_Init+0x2e8>)
 80005a0:	695a      	ldr	r2, [r3, #20]
 80005a2:	4bac      	ldr	r3, [pc, #688]	; (8000854 <MX_GPIO_Init+0x2e8>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	03c9      	lsls	r1, r1, #15
 80005a8:	430a      	orrs	r2, r1
 80005aa:	615a      	str	r2, [r3, #20]
 80005ac:	4ba9      	ldr	r3, [pc, #676]	; (8000854 <MX_GPIO_Init+0x2e8>)
 80005ae:	695a      	ldr	r2, [r3, #20]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	03db      	lsls	r3, r3, #15
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	4ba6      	ldr	r3, [pc, #664]	; (8000854 <MX_GPIO_Init+0x2e8>)
 80005bc:	695a      	ldr	r2, [r3, #20]
 80005be:	4ba5      	ldr	r3, [pc, #660]	; (8000854 <MX_GPIO_Init+0x2e8>)
 80005c0:	2180      	movs	r1, #128	; 0x80
 80005c2:	0289      	lsls	r1, r1, #10
 80005c4:	430a      	orrs	r2, r1
 80005c6:	615a      	str	r2, [r3, #20]
 80005c8:	4ba2      	ldr	r3, [pc, #648]	; (8000854 <MX_GPIO_Init+0x2e8>)
 80005ca:	695a      	ldr	r2, [r3, #20]
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	029b      	lsls	r3, r3, #10
 80005d0:	4013      	ands	r3, r2
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b9f      	ldr	r3, [pc, #636]	; (8000854 <MX_GPIO_Init+0x2e8>)
 80005d8:	695a      	ldr	r2, [r3, #20]
 80005da:	4b9e      	ldr	r3, [pc, #632]	; (8000854 <MX_GPIO_Init+0x2e8>)
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	02c9      	lsls	r1, r1, #11
 80005e0:	430a      	orrs	r2, r1
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	4b9b      	ldr	r3, [pc, #620]	; (8000854 <MX_GPIO_Init+0x2e8>)
 80005e6:	695a      	ldr	r2, [r3, #20]
 80005e8:	2380      	movs	r3, #128	; 0x80
 80005ea:	02db      	lsls	r3, r3, #11
 80005ec:	4013      	ands	r3, r2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f2:	4b98      	ldr	r3, [pc, #608]	; (8000854 <MX_GPIO_Init+0x2e8>)
 80005f4:	695a      	ldr	r2, [r3, #20]
 80005f6:	4b97      	ldr	r3, [pc, #604]	; (8000854 <MX_GPIO_Init+0x2e8>)
 80005f8:	2180      	movs	r1, #128	; 0x80
 80005fa:	0349      	lsls	r1, r1, #13
 80005fc:	430a      	orrs	r2, r1
 80005fe:	615a      	str	r2, [r3, #20]
 8000600:	4b94      	ldr	r3, [pc, #592]	; (8000854 <MX_GPIO_Init+0x2e8>)
 8000602:	695a      	ldr	r2, [r3, #20]
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	035b      	lsls	r3, r3, #13
 8000608:	4013      	ands	r3, r2
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_LED_Pin|SPEAKER_Pin|RED_LED_Pin|CABEL5_O_Pin
 800060e:	4992      	ldr	r1, [pc, #584]	; (8000858 <MX_GPIO_Init+0x2ec>)
 8000610:	2390      	movs	r3, #144	; 0x90
 8000612:	05db      	lsls	r3, r3, #23
 8000614:	2200      	movs	r2, #0
 8000616:	0018      	movs	r0, r3
 8000618:	f000 ffc5 	bl	80015a6 <HAL_GPIO_WritePin>
                          |CABEL4_O_Pin|CABEL3_O_Pin|CABEL2_O_Pin|LED11_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CABEL1_O_Pin|CABEL6_O_Pin|LED10_Pin|LED9_Pin
 800061c:	498f      	ldr	r1, [pc, #572]	; (800085c <MX_GPIO_Init+0x2f0>)
 800061e:	4b90      	ldr	r3, [pc, #576]	; (8000860 <MX_GPIO_Init+0x2f4>)
 8000620:	2200      	movs	r2, #0
 8000622:	0018      	movs	r0, r3
 8000624:	f000 ffbf 	bl	80015a6 <HAL_GPIO_WritePin>
                          |LED8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CABEL7_O_Pin|CABEL8_O_Pin|CABEL9_O_Pin|CABEL10_O_Pin
 8000628:	498e      	ldr	r1, [pc, #568]	; (8000864 <MX_GPIO_Init+0x2f8>)
 800062a:	4b8f      	ldr	r3, [pc, #572]	; (8000868 <MX_GPIO_Init+0x2fc>)
 800062c:	2200      	movs	r2, #0
 800062e:	0018      	movs	r0, r3
 8000630:	f000 ffb9 	bl	80015a6 <HAL_GPIO_WritePin>
                          |CABEL11_O_Pin|LED6_Pin|LED5_Pin|LED4_Pin
                          |LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 8000634:	4b8d      	ldr	r3, [pc, #564]	; (800086c <MX_GPIO_Init+0x300>)
 8000636:	2200      	movs	r2, #0
 8000638:	2104      	movs	r1, #4
 800063a:	0018      	movs	r0, r3
 800063c:	f000 ffb3 	bl	80015a6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CABEL9_I_Pin CABEL10_I_Pin CABEL11_I_Pin */
  GPIO_InitStruct.Pin = CABEL9_I_Pin|CABEL10_I_Pin|CABEL11_I_Pin;
 8000640:	193b      	adds	r3, r7, r4
 8000642:	2207      	movs	r2, #7
 8000644:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000646:	193b      	adds	r3, r7, r4
 8000648:	2288      	movs	r2, #136	; 0x88
 800064a:	0352      	lsls	r2, r2, #13
 800064c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800064e:	193b      	adds	r3, r7, r4
 8000650:	2202      	movs	r2, #2
 8000652:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000654:	193b      	adds	r3, r7, r4
 8000656:	4a82      	ldr	r2, [pc, #520]	; (8000860 <MX_GPIO_Init+0x2f4>)
 8000658:	0019      	movs	r1, r3
 800065a:	0010      	movs	r0, r2
 800065c:	f000 fe16 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8000660:	193b      	adds	r3, r7, r4
 8000662:	220a      	movs	r2, #10
 8000664:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	193b      	adds	r3, r7, r4
 8000668:	2201      	movs	r2, #1
 800066a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2201      	movs	r2, #1
 8000670:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	193b      	adds	r3, r7, r4
 8000674:	2203      	movs	r2, #3
 8000676:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	193a      	adds	r2, r7, r4
 800067a:	2390      	movs	r3, #144	; 0x90
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	0011      	movs	r1, r2
 8000680:	0018      	movs	r0, r3
 8000682:	f000 fe03 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEAKER_Pin */
  GPIO_InitStruct.Pin = SPEAKER_Pin;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2204      	movs	r2, #4
 800068a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2201      	movs	r2, #1
 8000690:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPEAKER_GPIO_Port, &GPIO_InitStruct);
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	2390      	movs	r3, #144	; 0x90
 80006a2:	05db      	lsls	r3, r3, #23
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f000 fdf0 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80006ac:	0021      	movs	r1, r4
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2210      	movs	r2, #16
 80006b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	2284      	movs	r2, #132	; 0x84
 80006b8:	0392      	lsls	r2, r2, #14
 80006ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006bc:	000c      	movs	r4, r1
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2201      	movs	r2, #1
 80006c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	4a6a      	ldr	r2, [pc, #424]	; (8000870 <MX_GPIO_Init+0x304>)
 80006c8:	0019      	movs	r1, r3
 80006ca:	0010      	movs	r0, r2
 80006cc:	f000 fdde 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : CABEL5_O_Pin CABEL4_O_Pin CABEL3_O_Pin CABEL2_O_Pin */
  GPIO_InitStruct.Pin = CABEL5_O_Pin|CABEL4_O_Pin|CABEL3_O_Pin|CABEL2_O_Pin;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	22f0      	movs	r2, #240	; 0xf0
 80006d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2201      	movs	r2, #1
 80006da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2202      	movs	r2, #2
 80006e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	193a      	adds	r2, r7, r4
 80006ea:	2390      	movs	r3, #144	; 0x90
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	0011      	movs	r1, r2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f000 fdcb 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : CABEL1_O_Pin CABEL6_O_Pin */
  GPIO_InitStruct.Pin = CABEL1_O_Pin|CABEL6_O_Pin;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2230      	movs	r2, #48	; 0x30
 80006fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2201      	movs	r2, #1
 8000700:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2202      	movs	r2, #2
 8000706:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	193b      	adds	r3, r7, r4
 8000710:	4a53      	ldr	r2, [pc, #332]	; (8000860 <MX_GPIO_Init+0x2f4>)
 8000712:	0019      	movs	r1, r3
 8000714:	0010      	movs	r0, r2
 8000716:	f000 fdb9 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : CABEL7_O_Pin CABEL8_O_Pin CABEL9_O_Pin CABEL10_O_Pin
                           CABEL11_O_Pin */
  GPIO_InitStruct.Pin = CABEL7_O_Pin|CABEL8_O_Pin|CABEL9_O_Pin|CABEL10_O_Pin
 800071a:	193b      	adds	r3, r7, r4
 800071c:	4a55      	ldr	r2, [pc, #340]	; (8000874 <MX_GPIO_Init+0x308>)
 800071e:	601a      	str	r2, [r3, #0]
                          |CABEL11_O_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2201      	movs	r2, #1
 8000724:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2202      	movs	r2, #2
 800072a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000732:	193b      	adds	r3, r7, r4
 8000734:	4a4c      	ldr	r2, [pc, #304]	; (8000868 <MX_GPIO_Init+0x2fc>)
 8000736:	0019      	movs	r1, r3
 8000738:	0010      	movs	r0, r2
 800073a:	f000 fda7 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : CABEL8_I_Pin CABEL7_I_Pin CABEL6_I_Pin */
  GPIO_InitStruct.Pin = CABEL8_I_Pin|CABEL7_I_Pin|CABEL6_I_Pin;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	22e0      	movs	r2, #224	; 0xe0
 8000742:	01d2      	lsls	r2, r2, #7
 8000744:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2288      	movs	r2, #136	; 0x88
 800074a:	0352      	lsls	r2, r2, #13
 800074c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2202      	movs	r2, #2
 8000752:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	193b      	adds	r3, r7, r4
 8000756:	4a44      	ldr	r2, [pc, #272]	; (8000868 <MX_GPIO_Init+0x2fc>)
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
 800075c:	f000 fd96 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : CABEL5_I_Pin CABEL4_I_Pin CABEL3_I_Pin */
  GPIO_InitStruct.Pin = CABEL5_I_Pin|CABEL4_I_Pin|CABEL3_I_Pin;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	22e0      	movs	r2, #224	; 0xe0
 8000764:	0112      	lsls	r2, r2, #4
 8000766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2288      	movs	r2, #136	; 0x88
 800076c:	0352      	lsls	r2, r2, #13
 800076e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000770:	193b      	adds	r3, r7, r4
 8000772:	2202      	movs	r2, #2
 8000774:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	193a      	adds	r2, r7, r4
 8000778:	2390      	movs	r3, #144	; 0x90
 800077a:	05db      	lsls	r3, r3, #23
 800077c:	0011      	movs	r1, r2
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fd84 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : CABEL2_I_Pin CABEL1_I_Pin */
  GPIO_InitStruct.Pin = CABEL2_I_Pin|CABEL1_I_Pin;
 8000784:	0021      	movs	r1, r4
 8000786:	187b      	adds	r3, r7, r1
 8000788:	22c0      	movs	r2, #192	; 0xc0
 800078a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2288      	movs	r2, #136	; 0x88
 8000790:	0352      	lsls	r2, r2, #13
 8000792:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2202      	movs	r2, #2
 8000798:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079a:	000c      	movs	r4, r1
 800079c:	187b      	adds	r3, r7, r1
 800079e:	4a34      	ldr	r2, [pc, #208]	; (8000870 <MX_GPIO_Init+0x304>)
 80007a0:	0019      	movs	r1, r3
 80007a2:	0010      	movs	r0, r2
 80007a4:	f000 fd72 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED11_Pin */
  GPIO_InitStruct.Pin = LED11_Pin;
 80007a8:	0021      	movs	r1, r4
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2280      	movs	r2, #128	; 0x80
 80007ae:	0212      	lsls	r2, r2, #8
 80007b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b2:	000c      	movs	r4, r1
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	2201      	movs	r2, #1
 80007b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ba:	193b      	adds	r3, r7, r4
 80007bc:	2201      	movs	r2, #1
 80007be:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED11_GPIO_Port, &GPIO_InitStruct);
 80007c6:	193a      	adds	r2, r7, r4
 80007c8:	2390      	movs	r3, #144	; 0x90
 80007ca:	05db      	lsls	r3, r3, #23
 80007cc:	0011      	movs	r1, r2
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fd5c 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED10_Pin LED9_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED10_Pin|LED9_Pin|LED8_Pin;
 80007d4:	0021      	movs	r1, r4
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	22e0      	movs	r2, #224	; 0xe0
 80007da:	0152      	lsls	r2, r2, #5
 80007dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	000c      	movs	r4, r1
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2201      	movs	r2, #1
 80007e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2201      	movs	r2, #1
 80007ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	2203      	movs	r2, #3
 80007f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	4a1a      	ldr	r2, [pc, #104]	; (8000860 <MX_GPIO_Init+0x2f4>)
 80007f6:	0019      	movs	r1, r3
 80007f8:	0010      	movs	r0, r2
 80007fa:	f000 fd47 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED7_Pin */
  GPIO_InitStruct.Pin = LED7_Pin;
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	2204      	movs	r2, #4
 8000802:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2201      	movs	r2, #1
 8000808:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2201      	movs	r2, #1
 800080e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000810:	193b      	adds	r3, r7, r4
 8000812:	2203      	movs	r2, #3
 8000814:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED7_GPIO_Port, &GPIO_InitStruct);
 8000816:	193b      	adds	r3, r7, r4
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <MX_GPIO_Init+0x300>)
 800081a:	0019      	movs	r1, r3
 800081c:	0010      	movs	r0, r2
 800081e:	f000 fd35 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED6_Pin LED5_Pin LED4_Pin LED3_Pin
                           LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED6_Pin|LED5_Pin|LED4_Pin|LED3_Pin
 8000822:	0021      	movs	r1, r4
 8000824:	187b      	adds	r3, r7, r1
 8000826:	22fc      	movs	r2, #252	; 0xfc
 8000828:	0052      	lsls	r2, r2, #1
 800082a:	601a      	str	r2, [r3, #0]
                          |LED2_Pin|LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2201      	movs	r2, #1
 8000830:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2201      	movs	r2, #1
 8000836:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2203      	movs	r2, #3
 800083c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	187b      	adds	r3, r7, r1
 8000840:	4a09      	ldr	r2, [pc, #36]	; (8000868 <MX_GPIO_Init+0x2fc>)
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f000 fd21 	bl	800128c <HAL_GPIO_Init>

}
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b00b      	add	sp, #44	; 0x2c
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	40021000 	.word	0x40021000
 8000858:	000080fe 	.word	0x000080fe
 800085c:	00001c30 	.word	0x00001c30
 8000860:	48000800 	.word	0x48000800
 8000864:	00000dff 	.word	0x00000dff
 8000868:	48000400 	.word	0x48000400
 800086c:	48000c00 	.word	0x48000c00
 8000870:	48001400 	.word	0x48001400
 8000874:	00000c07 	.word	0x00000c07

08000878 <HAL_GPIO_EXTI_Callback>:
}

static uint8_t wait = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	0002      	movs	r2, r0
 8000880:	1dbb      	adds	r3, r7, #6
 8000882:	801a      	strh	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);

  switch(GPIO_Pin)
 8000884:	1dbb      	adds	r3, r7, #6
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	2280      	movs	r2, #128	; 0x80
 800088a:	01d2      	lsls	r2, r2, #7
 800088c:	4293      	cmp	r3, r2
 800088e:	d100      	bne.n	8000892 <HAL_GPIO_EXTI_Callback+0x1a>
 8000890:	e0c8      	b.n	8000a24 <HAL_GPIO_EXTI_Callback+0x1ac>
 8000892:	2280      	movs	r2, #128	; 0x80
 8000894:	01d2      	lsls	r2, r2, #7
 8000896:	4293      	cmp	r3, r2
 8000898:	dd00      	ble.n	800089c <HAL_GPIO_EXTI_Callback+0x24>
 800089a:	e11a      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x25a>
 800089c:	2280      	movs	r2, #128	; 0x80
 800089e:	0192      	lsls	r2, r2, #6
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d100      	bne.n	80008a6 <HAL_GPIO_EXTI_Callback+0x2e>
 80008a4:	e0cb      	b.n	8000a3e <HAL_GPIO_EXTI_Callback+0x1c6>
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	0192      	lsls	r2, r2, #6
 80008aa:	4293      	cmp	r3, r2
 80008ac:	dd00      	ble.n	80008b0 <HAL_GPIO_EXTI_Callback+0x38>
 80008ae:	e110      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x25a>
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	0152      	lsls	r2, r2, #5
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d100      	bne.n	80008ba <HAL_GPIO_EXTI_Callback+0x42>
 80008b8:	e0ce      	b.n	8000a58 <HAL_GPIO_EXTI_Callback+0x1e0>
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	0152      	lsls	r2, r2, #5
 80008be:	4293      	cmp	r3, r2
 80008c0:	dd00      	ble.n	80008c4 <HAL_GPIO_EXTI_Callback+0x4c>
 80008c2:	e106      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x25a>
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d100      	bne.n	80008ce <HAL_GPIO_EXTI_Callback+0x56>
 80008cc:	e080      	b.n	80009d0 <HAL_GPIO_EXTI_Callback+0x158>
 80008ce:	2280      	movs	r2, #128	; 0x80
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	4293      	cmp	r3, r2
 80008d4:	dd00      	ble.n	80008d8 <HAL_GPIO_EXTI_Callback+0x60>
 80008d6:	e0fc      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x25a>
 80008d8:	2280      	movs	r2, #128	; 0x80
 80008da:	00d2      	lsls	r2, r2, #3
 80008dc:	4293      	cmp	r3, r2
 80008de:	d100      	bne.n	80008e2 <HAL_GPIO_EXTI_Callback+0x6a>
 80008e0:	e084      	b.n	80009ec <HAL_GPIO_EXTI_Callback+0x174>
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	00d2      	lsls	r2, r2, #3
 80008e6:	4293      	cmp	r3, r2
 80008e8:	dd00      	ble.n	80008ec <HAL_GPIO_EXTI_Callback+0x74>
 80008ea:	e0f2      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x25a>
 80008ec:	2280      	movs	r2, #128	; 0x80
 80008ee:	0092      	lsls	r2, r2, #2
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d100      	bne.n	80008f6 <HAL_GPIO_EXTI_Callback+0x7e>
 80008f4:	e088      	b.n	8000a08 <HAL_GPIO_EXTI_Callback+0x190>
 80008f6:	2280      	movs	r2, #128	; 0x80
 80008f8:	0092      	lsls	r2, r2, #2
 80008fa:	4293      	cmp	r3, r2
 80008fc:	dd00      	ble.n	8000900 <HAL_GPIO_EXTI_Callback+0x88>
 80008fe:	e0e8      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x25a>
 8000900:	2b80      	cmp	r3, #128	; 0x80
 8000902:	d047      	beq.n	8000994 <HAL_GPIO_EXTI_Callback+0x11c>
 8000904:	dd00      	ble.n	8000908 <HAL_GPIO_EXTI_Callback+0x90>
 8000906:	e0e4      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x25a>
 8000908:	2b40      	cmp	r3, #64	; 0x40
 800090a:	d053      	beq.n	80009b4 <HAL_GPIO_EXTI_Callback+0x13c>
 800090c:	dd00      	ble.n	8000910 <HAL_GPIO_EXTI_Callback+0x98>
 800090e:	e0e0      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x25a>
 8000910:	2b10      	cmp	r3, #16
 8000912:	d00d      	beq.n	8000930 <HAL_GPIO_EXTI_Callback+0xb8>
 8000914:	dd00      	ble.n	8000918 <HAL_GPIO_EXTI_Callback+0xa0>
 8000916:	e0dc      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x25a>
 8000918:	2b04      	cmp	r3, #4
 800091a:	d100      	bne.n	800091e <HAL_GPIO_EXTI_Callback+0xa6>
 800091c:	e0c9      	b.n	8000ab2 <HAL_GPIO_EXTI_Callback+0x23a>
 800091e:	dd00      	ble.n	8000922 <HAL_GPIO_EXTI_Callback+0xaa>
 8000920:	e0d7      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x25a>
 8000922:	2b01      	cmp	r3, #1
 8000924:	d100      	bne.n	8000928 <HAL_GPIO_EXTI_Callback+0xb0>
 8000926:	e0a6      	b.n	8000a76 <HAL_GPIO_EXTI_Callback+0x1fe>
 8000928:	2b02      	cmp	r3, #2
 800092a:	d100      	bne.n	800092e <HAL_GPIO_EXTI_Callback+0xb6>
 800092c:	e0b2      	b.n	8000a94 <HAL_GPIO_EXTI_Callback+0x21c>
 800092e:	e0d0      	b.n	8000ad2 <HAL_GPIO_EXTI_Callback+0x25a>
  {
  	  case BUTTON_Pin:
  		for(int i=0; i<500; i++)
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	e00a      	b.n	800094c <HAL_GPIO_EXTI_Callback+0xd4>
  		{
  			if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == 0)
 8000936:	4b77      	ldr	r3, [pc, #476]	; (8000b14 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000938:	2110      	movs	r1, #16
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fe16 	bl	800156c <HAL_GPIO_ReadPin>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d000      	beq.n	8000946 <HAL_GPIO_EXTI_Callback+0xce>
 8000944:	e0c9      	b.n	8000ada <HAL_GPIO_EXTI_Callback+0x262>
  		for(int i=0; i<500; i++)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	3301      	adds	r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	23fa      	movs	r3, #250	; 0xfa
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	429a      	cmp	r2, r3
 8000954:	dbef      	blt.n	8000936 <HAL_GPIO_EXTI_Callback+0xbe>
  			{
  				return;
  			}
  		}

  		  if(TestState == STOP)
 8000956:	4b70      	ldr	r3, [pc, #448]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d105      	bne.n	800096a <HAL_GPIO_EXTI_Callback+0xf2>
  		  {

  			TestState = START;
 800095e:	4b6e      	ldr	r3, [pc, #440]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000960:	2201      	movs	r2, #1
 8000962:	701a      	strb	r2, [r3, #0]
  			CabelTestStart();
 8000964:	f000 f8f8 	bl	8000b58 <CabelTestStart>
  		  {
  			for(int i=0; i<600000; i++);
  			TestState = STOP;
  			LedOffAll();
  		  }
  		  break;
 8000968:	e0b9      	b.n	8000ade <HAL_GPIO_EXTI_Callback+0x266>
  		  else if(TestState == START)
 800096a:	4b6b      	ldr	r3, [pc, #428]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d000      	beq.n	8000974 <HAL_GPIO_EXTI_Callback+0xfc>
 8000972:	e0b4      	b.n	8000ade <HAL_GPIO_EXTI_Callback+0x266>
  			for(int i=0; i<600000; i++);
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	e002      	b.n	8000980 <HAL_GPIO_EXTI_Callback+0x108>
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	3301      	adds	r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4a66      	ldr	r2, [pc, #408]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	ddf8      	ble.n	800097a <HAL_GPIO_EXTI_Callback+0x102>
  			TestState = STOP;
 8000988:	4b63      	ldr	r3, [pc, #396]	; (8000b18 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
  			LedOffAll();
 800098e:	f000 f9a7 	bl	8000ce0 <LedOffAll>
  		  break;
 8000992:	e0a4      	b.n	8000ade <HAL_GPIO_EXTI_Callback+0x266>
  	  case CABEL1_I_Pin:
  		  if(count == 0)
 8000994:	4b62      	ldr	r3, [pc, #392]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d000      	beq.n	800099e <HAL_GPIO_EXTI_Callback+0x126>
 800099c:	e0a1      	b.n	8000ae2 <HAL_GPIO_EXTI_Callback+0x26a>
  		  {
  			  ResPinTest[0] = 1;
 800099e:	4b61      	ldr	r3, [pc, #388]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	801a      	strh	r2, [r3, #0]
  			  LedOn(LED1_GPIO_Port, LED1_Pin);
 80009a4:	2380      	movs	r3, #128	; 0x80
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4a5f      	ldr	r2, [pc, #380]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009aa:	0019      	movs	r1, r3
 80009ac:	0010      	movs	r0, r2
 80009ae:	f000 f985 	bl	8000cbc <LedOn>
  		  }
  		  break;
 80009b2:	e096      	b.n	8000ae2 <HAL_GPIO_EXTI_Callback+0x26a>
  	  case CABEL2_I_Pin:
  		  if(count == 1)
 80009b4:	4b5a      	ldr	r3, [pc, #360]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d000      	beq.n	80009be <HAL_GPIO_EXTI_Callback+0x146>
 80009bc:	e093      	b.n	8000ae6 <HAL_GPIO_EXTI_Callback+0x26e>
  		  {
  			  ResPinTest[1] = 1;
 80009be:	4b59      	ldr	r3, [pc, #356]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	805a      	strh	r2, [r3, #2]
  			  LedOn(LED2_GPIO_Port, LED2_Pin);
 80009c4:	4b58      	ldr	r3, [pc, #352]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 f977 	bl	8000cbc <LedOn>
  		  }
  		  break;
 80009ce:	e08a      	b.n	8000ae6 <HAL_GPIO_EXTI_Callback+0x26e>
  	  case CABEL3_I_Pin:
  		  if(count == 2)
 80009d0:	4b53      	ldr	r3, [pc, #332]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d000      	beq.n	80009da <HAL_GPIO_EXTI_Callback+0x162>
 80009d8:	e087      	b.n	8000aea <HAL_GPIO_EXTI_Callback+0x272>
  		  {
  			  ResPinTest[2] = 1;
 80009da:	4b52      	ldr	r3, [pc, #328]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80009dc:	2201      	movs	r2, #1
 80009de:	809a      	strh	r2, [r3, #4]
  			  LedOn(LED3_GPIO_Port, LED3_Pin);
 80009e0:	4b51      	ldr	r3, [pc, #324]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009e2:	2140      	movs	r1, #64	; 0x40
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 f969 	bl	8000cbc <LedOn>
  		  }
  	  	  break;
 80009ea:	e07e      	b.n	8000aea <HAL_GPIO_EXTI_Callback+0x272>
  	  case CABEL4_I_Pin:
  		  if(count == 3)
 80009ec:	4b4c      	ldr	r3, [pc, #304]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	d000      	beq.n	80009f6 <HAL_GPIO_EXTI_Callback+0x17e>
 80009f4:	e07b      	b.n	8000aee <HAL_GPIO_EXTI_Callback+0x276>
  		  {
  			  ResPinTest[3] = 1;
 80009f6:	4b4b      	ldr	r3, [pc, #300]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	80da      	strh	r2, [r3, #6]
  			  LedOn(LED4_GPIO_Port, LED4_Pin);
 80009fc:	4b4a      	ldr	r3, [pc, #296]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80009fe:	2120      	movs	r1, #32
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 f95b 	bl	8000cbc <LedOn>
  		  }
  		  break;
 8000a06:	e072      	b.n	8000aee <HAL_GPIO_EXTI_Callback+0x276>
  	  case CABEL5_I_Pin:
  		  if(count == 4)
 8000a08:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	d000      	beq.n	8000a12 <HAL_GPIO_EXTI_Callback+0x19a>
 8000a10:	e06f      	b.n	8000af2 <HAL_GPIO_EXTI_Callback+0x27a>
  		  {
  			  ResPinTest[4] = 1;
 8000a12:	4b44      	ldr	r3, [pc, #272]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	811a      	strh	r2, [r3, #8]
  			  LedOn(LED5_GPIO_Port, LED5_Pin);
 8000a18:	4b43      	ldr	r3, [pc, #268]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 f94d 	bl	8000cbc <LedOn>
  		  }
  		  break;
 8000a22:	e066      	b.n	8000af2 <HAL_GPIO_EXTI_Callback+0x27a>
  	  case CABEL6_I_Pin:
  		  if(count == 5)
 8000a24:	4b3e      	ldr	r3, [pc, #248]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b05      	cmp	r3, #5
 8000a2a:	d164      	bne.n	8000af6 <HAL_GPIO_EXTI_Callback+0x27e>
  		  {
  			  LedOn(LED6_GPIO_Port, LED6_Pin);
 8000a2c:	4b3e      	ldr	r3, [pc, #248]	; (8000b28 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000a2e:	2108      	movs	r1, #8
 8000a30:	0018      	movs	r0, r3
 8000a32:	f000 f943 	bl	8000cbc <LedOn>
  			  ResPinTest[5] = 1;
 8000a36:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	815a      	strh	r2, [r3, #10]
  		  }
  		  break;
 8000a3c:	e05b      	b.n	8000af6 <HAL_GPIO_EXTI_Callback+0x27e>
  	  case CABEL7_I_Pin:
  		  if(count == 6)
 8000a3e:	4b38      	ldr	r3, [pc, #224]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b06      	cmp	r3, #6
 8000a44:	d159      	bne.n	8000afa <HAL_GPIO_EXTI_Callback+0x282>
  		  {
  			  ResPinTest[6] = 1;
 8000a46:	4b37      	ldr	r3, [pc, #220]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	819a      	strh	r2, [r3, #12]
  			  LedOn(LED7_GPIO_Port, LED7_Pin);
 8000a4c:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000a4e:	2104      	movs	r1, #4
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 f933 	bl	8000cbc <LedOn>
  		  }
  		  break;
 8000a56:	e050      	b.n	8000afa <HAL_GPIO_EXTI_Callback+0x282>
  	  case CABEL8_I_Pin:
  		  if(count == 7)
 8000a58:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b07      	cmp	r3, #7
 8000a5e:	d14e      	bne.n	8000afe <HAL_GPIO_EXTI_Callback+0x286>
  		  {
  			  ResPinTest[7] = 1;
 8000a60:	4b30      	ldr	r3, [pc, #192]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	81da      	strh	r2, [r3, #14]
  			  LedOn(LED8_GPIO_Port, LED8_Pin);
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	015b      	lsls	r3, r3, #5
 8000a6a:	4a31      	ldr	r2, [pc, #196]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	0010      	movs	r0, r2
 8000a70:	f000 f924 	bl	8000cbc <LedOn>
  		  }
  		  break;
 8000a74:	e043      	b.n	8000afe <HAL_GPIO_EXTI_Callback+0x286>
  	  case CABEL9_I_Pin:
  		  if(count == 8)
 8000a76:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b08      	cmp	r3, #8
 8000a7c:	d141      	bne.n	8000b02 <HAL_GPIO_EXTI_Callback+0x28a>
  		  {
  			  ResPinTest[8] = 1;
 8000a7e:	4b29      	ldr	r3, [pc, #164]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	821a      	strh	r2, [r3, #16]
  			  LedOn(LED9_GPIO_Port, LED9_Pin);
 8000a84:	2380      	movs	r3, #128	; 0x80
 8000a86:	011b      	lsls	r3, r3, #4
 8000a88:	4a29      	ldr	r2, [pc, #164]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000a8a:	0019      	movs	r1, r3
 8000a8c:	0010      	movs	r0, r2
 8000a8e:	f000 f915 	bl	8000cbc <LedOn>
  		  }
  		  break;
 8000a92:	e036      	b.n	8000b02 <HAL_GPIO_EXTI_Callback+0x28a>
  	  case CABEL10_I_Pin:
  		  if(count == 9)
 8000a94:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b09      	cmp	r3, #9
 8000a9a:	d134      	bne.n	8000b06 <HAL_GPIO_EXTI_Callback+0x28e>
  		  {
  			  ResPinTest[9] = 1;
 8000a9c:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	825a      	strh	r2, [r3, #18]
  			  LedOn(LED10_GPIO_Port, LED10_Pin);
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	0010      	movs	r0, r2
 8000aac:	f000 f906 	bl	8000cbc <LedOn>
  		  }
  		  break;
 8000ab0:	e029      	b.n	8000b06 <HAL_GPIO_EXTI_Callback+0x28e>
  	  case CABEL11_I_Pin:
  		  if(count == 10)
 8000ab2:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b0a      	cmp	r3, #10
 8000ab8:	d127      	bne.n	8000b0a <HAL_GPIO_EXTI_Callback+0x292>
  		  {
  			  ResPinTest[10] = 1;
 8000aba:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	829a      	strh	r2, [r3, #20]
  			  LedOn(LED11_GPIO_Port, LED11_Pin);
 8000ac0:	2380      	movs	r3, #128	; 0x80
 8000ac2:	021a      	lsls	r2, r3, #8
 8000ac4:	2390      	movs	r3, #144	; 0x90
 8000ac6:	05db      	lsls	r3, r3, #23
 8000ac8:	0011      	movs	r1, r2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f8f6 	bl	8000cbc <LedOn>
  		  }
  		  break;
 8000ad0:	e01b      	b.n	8000b0a <HAL_GPIO_EXTI_Callback+0x292>
  	  default:
  		  TestRes = ERROR;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
  		  break;
 8000ad8:	e018      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  				return;
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	e016      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  		  break;
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	e014      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  		  break;
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	e012      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  		  break;
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	e010      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  	  	  break;
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	e00e      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  		  break;
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	e00c      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  		  break;
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	e00a      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  		  break;
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	e008      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  		  break;
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	e006      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  		  break;
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	e004      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  		  break;
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	e002      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  		  break;
 8000b06:	46c0      	nop			; (mov r8, r8)
 8000b08:	e000      	b.n	8000b0c <HAL_GPIO_EXTI_Callback+0x294>
  		  break;
 8000b0a:	46c0      	nop			; (mov r8, r8)
  }

}
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b004      	add	sp, #16
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	48001400 	.word	0x48001400
 8000b18:	200000fc 	.word	0x200000fc
 8000b1c:	000927bf 	.word	0x000927bf
 8000b20:	200000f4 	.word	0x200000f4
 8000b24:	200000dc 	.word	0x200000dc
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48000c00 	.word	0x48000c00
 8000b30:	48000800 	.word	0x48000800
 8000b34:	200000fd 	.word	0x200000fd

08000b38 <Delay>:



void Delay(uint32_t value)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	while(value > 0)
 8000b40:	e002      	b.n	8000b48 <Delay+0x10>
	{
		value--;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3b01      	subs	r3, #1
 8000b46:	607b      	str	r3, [r7, #4]
	while(value > 0)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d1f9      	bne.n	8000b42 <Delay+0xa>
	}
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	b002      	add	sp, #8
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <CabelTestStart>:

void CabelTestStart()
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
	StartTest = 0;
 8000b5e:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <CabelTestStart+0xdc>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < 11; i++)
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	e026      	b.n	8000bb8 <CabelTestStart+0x60>
	{
		wait = 1;
 8000b6a:	4b33      	ldr	r3, [pc, #204]	; (8000c38 <CabelTestStart+0xe0>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GetPort(i), Cabel_Pin[i], GPIO_PIN_SET);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	0018      	movs	r0, r3
 8000b76:	f000 f86b 	bl	8000c50 <GetPort>
 8000b7a:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <CabelTestStart+0xe4>)
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	0052      	lsls	r2, r2, #1
 8000b80:	5ad3      	ldrh	r3, [r2, r3]
 8000b82:	2201      	movs	r2, #1
 8000b84:	0019      	movs	r1, r3
 8000b86:	f000 fd0e 	bl	80015a6 <HAL_GPIO_WritePin>
		Delay(0xffffff);
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <CabelTestStart+0xe8>)
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff ffd3 	bl	8000b38 <Delay>
		HAL_GPIO_WritePin(GetPort(i), Cabel_Pin[i], GPIO_PIN_RESET);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	0018      	movs	r0, r3
 8000b98:	f000 f85a 	bl	8000c50 <GetPort>
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <CabelTestStart+0xe4>)
 8000b9e:	68fa      	ldr	r2, [r7, #12]
 8000ba0:	0052      	lsls	r2, r2, #1
 8000ba2:	5ad3      	ldrh	r3, [r2, r3]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	0019      	movs	r1, r3
 8000ba8:	f000 fcfd 	bl	80015a6 <HAL_GPIO_WritePin>
		if(TestRes == SUCCESS)
		{
			//ResPinTest[i] = SUCCESS;
		}
		TestRes = ERROR;
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <CabelTestStart+0xec>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 11; i++)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b0a      	cmp	r3, #10
 8000bbc:	ddd5      	ble.n	8000b6a <CabelTestStart+0x12>
	}

	for(int i = 0; i < 11; i++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	e00b      	b.n	8000bdc <CabelTestStart+0x84>
	{
		if(ResPinTest[i] == ERROR)
 8000bc4:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <CabelTestStart+0xf0>)
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	0052      	lsls	r2, r2, #1
 8000bca:	5ad3      	ldrh	r3, [r2, r3]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <CabelTestStart+0x7e>
		{
			ErrorTest = 1;
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <CabelTestStart+0xf4>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 11; i++)
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	2b0a      	cmp	r3, #10
 8000be0:	ddf0      	ble.n	8000bc4 <CabelTestStart+0x6c>
		}
	}
	if(ErrorTest == 1)
 8000be2:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <CabelTestStart+0xf4>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d105      	bne.n	8000bf6 <CabelTestStart+0x9e>
	{
		SignalError();
 8000bea:	f000 f8bd 	bl	8000d68 <SignalError>
		ErrorTest = 0;
 8000bee:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <CabelTestStart+0xf4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]
 8000bf4:	e005      	b.n	8000c02 <CabelTestStart+0xaa>
	}else
	{
		LedOn(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 8000bf6:	2390      	movs	r3, #144	; 0x90
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f000 f85d 	bl	8000cbc <LedOn>
	}
	StartTest = 0;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <CabelTestStart+0xdc>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
	ErrorTest = 0;
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <CabelTestStart+0xf4>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 11; i++)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	e007      	b.n	8000c24 <CabelTestStart+0xcc>
	{
	  	ResPinTest[i] = ERROR;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <CabelTestStart+0xf0>)
 8000c16:	687a      	ldr	r2, [r7, #4]
 8000c18:	0052      	lsls	r2, r2, #1
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	52d1      	strh	r1, [r2, r3]
	for(int i = 0; i < 11; i++)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3301      	adds	r3, #1
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2b0a      	cmp	r3, #10
 8000c28:	ddf4      	ble.n	8000c14 <CabelTestStart+0xbc>
	}

}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b004      	add	sp, #16
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200000d8 	.word	0x200000d8
 8000c38:	200000fe 	.word	0x200000fe
 8000c3c:	080026d8 	.word	0x080026d8
 8000c40:	00ffffff 	.word	0x00ffffff
 8000c44:	200000fd 	.word	0x200000fd
 8000c48:	200000dc 	.word	0x200000dc
 8000c4c:	200000d9 	.word	0x200000d9

08000c50 <GetPort>:



GPIO_TypeDef* GetPort(uint16_t GPIO_Pin)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	0002      	movs	r2, r0
 8000c58:	1dbb      	adds	r3, r7, #6
 8000c5a:	801a      	strh	r2, [r3, #0]
	switch(GPIO_Pin)
 8000c5c:	1dbb      	adds	r3, r7, #6
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	2b0a      	cmp	r3, #10
 8000c62:	d81e      	bhi.n	8000ca2 <GetPort+0x52>
 8000c64:	009a      	lsls	r2, r3, #2
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <GetPort+0x60>)
 8000c68:	18d3      	adds	r3, r2, r3
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	469f      	mov	pc, r3
	{
	case 0:
		return CABEL1_O_GPIO_Port;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <GetPort+0x64>)
 8000c70:	e019      	b.n	8000ca6 <GetPort+0x56>
		break;
	case 1:
		return CABEL2_O_GPIO_Port;
 8000c72:	2390      	movs	r3, #144	; 0x90
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	e016      	b.n	8000ca6 <GetPort+0x56>
		break;
	case 2:
		return CABEL3_O_GPIO_Port;
 8000c78:	2390      	movs	r3, #144	; 0x90
 8000c7a:	05db      	lsls	r3, r3, #23
 8000c7c:	e013      	b.n	8000ca6 <GetPort+0x56>
		break;
	case 3:
		return CABEL4_O_GPIO_Port;
 8000c7e:	2390      	movs	r3, #144	; 0x90
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	e010      	b.n	8000ca6 <GetPort+0x56>
		break;
	case 4:
		return CABEL5_O_GPIO_Port;
 8000c84:	2390      	movs	r3, #144	; 0x90
 8000c86:	05db      	lsls	r3, r3, #23
 8000c88:	e00d      	b.n	8000ca6 <GetPort+0x56>
		break;
	case 5:
		return CABEL6_O_GPIO_Port;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <GetPort+0x64>)
 8000c8c:	e00b      	b.n	8000ca6 <GetPort+0x56>
		break;
	case 6:
		return CABEL7_O_GPIO_Port;
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <GetPort+0x68>)
 8000c90:	e009      	b.n	8000ca6 <GetPort+0x56>
		break;
	case 7:
		return CABEL8_O_GPIO_Port;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <GetPort+0x68>)
 8000c94:	e007      	b.n	8000ca6 <GetPort+0x56>
		break;
	case 8:
		return CABEL9_O_GPIO_Port;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <GetPort+0x68>)
 8000c98:	e005      	b.n	8000ca6 <GetPort+0x56>
		break;
	case 9:
		return CABEL10_O_GPIO_Port;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <GetPort+0x68>)
 8000c9c:	e003      	b.n	8000ca6 <GetPort+0x56>
		break;
	case 10:
		return CABEL11_O_GPIO_Port;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <GetPort+0x68>)
 8000ca0:	e001      	b.n	8000ca6 <GetPort+0x56>
		break;
	default:
		return GPIOA;
 8000ca2:	2390      	movs	r3, #144	; 0x90
 8000ca4:	05db      	lsls	r3, r3, #23
		break;
	}
}
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	080026f0 	.word	0x080026f0
 8000cb4:	48000800 	.word	0x48000800
 8000cb8:	48000400 	.word	0x48000400

08000cbc <LedOn>:

void LedOn(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	000a      	movs	r2, r1
 8000cc6:	1cbb      	adds	r3, r7, #2
 8000cc8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000cca:	1cbb      	adds	r3, r7, #2
 8000ccc:	8819      	ldrh	r1, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 fc67 	bl	80015a6 <HAL_GPIO_WritePin>
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <LedOffAll>:
{
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
}

void LedOffAll(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, RED_LED_Pin|LED11_Pin, GPIO_PIN_SET);
 8000ce4:	491b      	ldr	r1, [pc, #108]	; (8000d54 <LedOffAll+0x74>)
 8000ce6:	2390      	movs	r3, #144	; 0x90
 8000ce8:	05db      	lsls	r3, r3, #23
 8000cea:	2201      	movs	r2, #1
 8000cec:	0018      	movs	r0, r3
 8000cee:	f000 fc5a 	bl	80015a6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, SPEAKER_Pin|CABEL1_O_Pin|CABEL2_O_Pin
 8000cf2:	2390      	movs	r3, #144	; 0x90
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	21f4      	movs	r1, #244	; 0xf4
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fc53 	bl	80015a6 <HAL_GPIO_WritePin>
		                         |CABEL3_O_Pin|CABEL4_O_Pin, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(GPIOA, GREEN_LED_Pin, GPIO_PIN_SET);
 8000d00:	2390      	movs	r3, #144	; 0x90
 8000d02:	05db      	lsls	r3, r3, #23
 8000d04:	2201      	movs	r2, #1
 8000d06:	2102      	movs	r1, #2
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 fc4c 	bl	80015a6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED10_Pin|LED9_Pin|LED8_Pin, GPIO_PIN_SET);
 8000d0e:	23e0      	movs	r3, #224	; 0xe0
 8000d10:	015b      	lsls	r3, r3, #5
 8000d12:	4811      	ldr	r0, [pc, #68]	; (8000d58 <LedOffAll+0x78>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	0019      	movs	r1, r3
 8000d18:	f000 fc45 	bl	80015a6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, CABEL5_O_Pin|CABEL6_O_Pin, GPIO_PIN_RESET);
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <LedOffAll+0x78>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2130      	movs	r1, #48	; 0x30
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 fc3f 	bl	80015a6 <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED6_Pin|LED5_Pin|LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_SET);
 8000d28:	23fc      	movs	r3, #252	; 0xfc
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <LedOffAll+0x7c>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	0019      	movs	r1, r3
 8000d32:	f000 fc38 	bl	80015a6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, CABEL7_O_Pin|CABEL8_O_Pin|CABEL9_O_Pin|CABEL10_O_Pin
 8000d36:	490a      	ldr	r1, [pc, #40]	; (8000d60 <LedOffAll+0x80>)
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <LedOffAll+0x7c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f000 fc32 	bl	80015a6 <HAL_GPIO_WritePin>
		                         |CABEL11_O_Pin, GPIO_PIN_RESET);
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <LedOffAll+0x84>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	2104      	movs	r1, #4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f000 fc2c 	bl	80015a6 <HAL_GPIO_WritePin>
}
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	00008008 	.word	0x00008008
 8000d58:	48000800 	.word	0x48000800
 8000d5c:	48000400 	.word	0x48000400
 8000d60:	00000c07 	.word	0x00000c07
 8000d64:	48000c00 	.word	0x48000c00

08000d68 <SignalError>:

void SignalError(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000d6c:	2390      	movs	r3, #144	; 0x90
 8000d6e:	05db      	lsls	r3, r3, #23
 8000d70:	2200      	movs	r2, #0
 8000d72:	2108      	movs	r1, #8
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 fc16 	bl	80015a6 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, GPIO_PIN_SET);
 8000d7a:	2390      	movs	r3, #144	; 0x90
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2104      	movs	r1, #4
 8000d82:	0018      	movs	r0, r3
 8000d84:	f000 fc0f 	bl	80015a6 <HAL_GPIO_WritePin>

	Delay(0xffff);
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SignalError+0x3c>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f7ff fed4 	bl	8000b38 <Delay>


	HAL_GPIO_WritePin(SPEAKER_GPIO_Port, SPEAKER_Pin, GPIO_PIN_RESET);
 8000d90:	2390      	movs	r3, #144	; 0x90
 8000d92:	05db      	lsls	r3, r3, #23
 8000d94:	2200      	movs	r2, #0
 8000d96:	2104      	movs	r1, #4
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f000 fc04 	bl	80015a6 <HAL_GPIO_WritePin>

}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	0000ffff 	.word	0x0000ffff

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();
  while (1)
 8000dac:	e7fe      	b.n	8000dac <Error_Handler+0x4>
	...

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_MspInit+0x44>)
 8000db8:	699a      	ldr	r2, [r3, #24]
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_MspInit+0x44>)
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	619a      	str	r2, [r3, #24]
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_MspInit+0x44>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4013      	ands	r3, r2
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_MspInit+0x44>)
 8000dd0:	69da      	ldr	r2, [r3, #28]
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_MspInit+0x44>)
 8000dd4:	2180      	movs	r1, #128	; 0x80
 8000dd6:	0549      	lsls	r1, r1, #21
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	61da      	str	r2, [r3, #28]
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_MspInit+0x44>)
 8000dde:	69da      	ldr	r2, [r3, #28]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	055b      	lsls	r3, r3, #21
 8000de4:	4013      	ands	r3, r2
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a06      	ldr	r2, [pc, #24]	; (8000e20 <HAL_RTC_MspInit+0x28>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d106      	bne.n	8000e18 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_RTC_MspInit+0x2c>)
 8000e0c:	6a1a      	ldr	r2, [r3, #32]
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <HAL_RTC_MspInit+0x2c>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	0209      	lsls	r1, r1, #8
 8000e14:	430a      	orrs	r2, r1
 8000e16:	621a      	str	r2, [r3, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40002800 	.word	0x40002800
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_TIM_Base_MspInit+0x5c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d10c      	bne.n	8000e54 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <HAL_TIM_Base_MspInit+0x60>)
 8000e3c:	69da      	ldr	r2, [r3, #28]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_TIM_Base_MspInit+0x60>)
 8000e40:	2110      	movs	r1, #16
 8000e42:	430a      	orrs	r2, r1
 8000e44:	61da      	str	r2, [r3, #28]
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_TIM_Base_MspInit+0x60>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	2210      	movs	r2, #16
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000e52:	e012      	b.n	8000e7a <HAL_TIM_Base_MspInit+0x52>
  else if(htim_base->Instance==TIM14)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0c      	ldr	r2, [pc, #48]	; (8000e8c <HAL_TIM_Base_MspInit+0x64>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10d      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_TIM_Base_MspInit+0x60>)
 8000e60:	69da      	ldr	r2, [r3, #28]
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_TIM_Base_MspInit+0x60>)
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0049      	lsls	r1, r1, #1
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	61da      	str	r2, [r3, #28]
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_TIM_Base_MspInit+0x60>)
 8000e6e:	69da      	ldr	r2, [r3, #28]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b004      	add	sp, #16
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	40001000 	.word	0x40001000
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40002000 	.word	0x40002000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <NMI_Handler+0x4>

08000e96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9a:	e7fe      	b.n	8000e9a <HardFault_Handler+0x4>

08000e9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f000 f8cc 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CABEL9_I_Pin);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f000 fb87 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL10_I_Pin);
 8000ed2:	2002      	movs	r0, #2
 8000ed4:	f000 fb84 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CABEL11_I_Pin);
 8000ee2:	2004      	movs	r0, #4
 8000ee4:	f000 fb7c 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8000ef2:	2010      	movs	r0, #16
 8000ef4:	f000 fb74 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL2_I_Pin);
 8000ef8:	2040      	movs	r0, #64	; 0x40
 8000efa:	f000 fb71 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL1_I_Pin);
 8000efe:	2080      	movs	r0, #128	; 0x80
 8000f00:	f000 fb6e 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL5_I_Pin);
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f000 fb69 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL4_I_Pin);
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 fb64 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL3_I_Pin);
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f000 fb5f 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL8_I_Pin);
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	015b      	lsls	r3, r3, #5
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 fb5a 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL7_I_Pin);
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	019b      	lsls	r3, r3, #6
 8000f30:	0018      	movs	r0, r3
 8000f32:	f000 fb55 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CABEL6_I_Pin);
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	01db      	lsls	r3, r3, #7
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 fb50 	bl	80015e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f4c:	4b03      	ldr	r3, [pc, #12]	; (8000f5c <TIM6_IRQHandler+0x14>)
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 f9b5 	bl	80022be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	20000048 	.word	0x20000048

08000f60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f72:	490e      	ldr	r1, [pc, #56]	; (8000fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <LoopForever+0xe>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f88:	4c0b      	ldr	r4, [pc, #44]	; (8000fb8 <LoopForever+0x16>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f96:	f7ff ffe3 	bl	8000f60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f9a:	f001 fb55 	bl	8002648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f9e:	f7ff f93f 	bl	8000220 <main>

08000fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fa2:	e7fe      	b.n	8000fa2 <LoopForever>
  ldr   r0, =_estack
 8000fa4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fb0:	08002734 	.word	0x08002734
  ldr r2, =_sbss
 8000fb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fb8:	20000104 	.word	0x20000104

08000fbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC1_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <HAL_Init+0x24>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_Init+0x24>)
 8000fca:	2110      	movs	r1, #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f809 	bl	8000fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd6:	f7ff feeb 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	0018      	movs	r0, r3
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	40022000 	.word	0x40022000

08000fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_InitTick+0x5c>)
 8000ff2:	681c      	ldr	r4, [r3, #0]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_InitTick+0x60>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	0019      	movs	r1, r3
 8000ffa:	23fa      	movs	r3, #250	; 0xfa
 8000ffc:	0098      	lsls	r0, r3, #2
 8000ffe:	f7ff f883 	bl	8000108 <__udivsi3>
 8001002:	0003      	movs	r3, r0
 8001004:	0019      	movs	r1, r3
 8001006:	0020      	movs	r0, r4
 8001008:	f7ff f87e 	bl	8000108 <__udivsi3>
 800100c:	0003      	movs	r3, r0
 800100e:	0018      	movs	r0, r3
 8001010:	f000 f92f 	bl	8001272 <HAL_SYSTICK_Config>
 8001014:	1e03      	subs	r3, r0, #0
 8001016:	d001      	beq.n	800101c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e00f      	b.n	800103c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d80b      	bhi.n	800103a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	2301      	movs	r3, #1
 8001026:	425b      	negs	r3, r3
 8001028:	2200      	movs	r2, #0
 800102a:	0018      	movs	r0, r3
 800102c:	f000 f8fc 	bl	8001228 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_InitTick+0x64>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b003      	add	sp, #12
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	20000008 	.word	0x20000008
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_IncTick+0x1c>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	001a      	movs	r2, r3
 800105a:	4b05      	ldr	r3, [pc, #20]	; (8001070 <HAL_IncTick+0x20>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	18d2      	adds	r2, r2, r3
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_IncTick+0x20>)
 8001062:	601a      	str	r2, [r3, #0]
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	20000008 	.word	0x20000008
 8001070:	20000100 	.word	0x20000100

08001074 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b02      	ldr	r3, [pc, #8]	; (8001084 <HAL_GetTick+0x10>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000100 	.word	0x20000100

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff fff0 	bl	8001074 <HAL_GetTick>
 8001094:	0003      	movs	r3, r0
 8001096:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	3301      	adds	r3, #1
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	001a      	movs	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	189b      	adds	r3, r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	f7ff ffe0 	bl	8001074 <HAL_GetTick>
 80010b4:	0002      	movs	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	46c0      	nop			; (mov r8, r8)
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b004      	add	sp, #16
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	20000008 	.word	0x20000008

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	0002      	movs	r2, r0
 80010d8:	1dfb      	adds	r3, r7, #7
 80010da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b7f      	cmp	r3, #127	; 0x7f
 80010e2:	d809      	bhi.n	80010f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	001a      	movs	r2, r3
 80010ea:	231f      	movs	r3, #31
 80010ec:	401a      	ands	r2, r3
 80010ee:	4b04      	ldr	r3, [pc, #16]	; (8001100 <__NVIC_EnableIRQ+0x30>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	4091      	lsls	r1, r2
 80010f4:	000a      	movs	r2, r1
 80010f6:	601a      	str	r2, [r3, #0]
  }
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b002      	add	sp, #8
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	e000e100 	.word	0xe000e100

08001104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	0002      	movs	r2, r0
 800110c:	6039      	str	r1, [r7, #0]
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b7f      	cmp	r3, #127	; 0x7f
 8001118:	d828      	bhi.n	800116c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800111a:	4a2f      	ldr	r2, [pc, #188]	; (80011d8 <__NVIC_SetPriority+0xd4>)
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	b25b      	sxtb	r3, r3
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	33c0      	adds	r3, #192	; 0xc0
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	589b      	ldr	r3, [r3, r2]
 800112a:	1dfa      	adds	r2, r7, #7
 800112c:	7812      	ldrb	r2, [r2, #0]
 800112e:	0011      	movs	r1, r2
 8001130:	2203      	movs	r2, #3
 8001132:	400a      	ands	r2, r1
 8001134:	00d2      	lsls	r2, r2, #3
 8001136:	21ff      	movs	r1, #255	; 0xff
 8001138:	4091      	lsls	r1, r2
 800113a:	000a      	movs	r2, r1
 800113c:	43d2      	mvns	r2, r2
 800113e:	401a      	ands	r2, r3
 8001140:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	019b      	lsls	r3, r3, #6
 8001146:	22ff      	movs	r2, #255	; 0xff
 8001148:	401a      	ands	r2, r3
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	0018      	movs	r0, r3
 8001150:	2303      	movs	r3, #3
 8001152:	4003      	ands	r3, r0
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001158:	481f      	ldr	r0, [pc, #124]	; (80011d8 <__NVIC_SetPriority+0xd4>)
 800115a:	1dfb      	adds	r3, r7, #7
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	b25b      	sxtb	r3, r3
 8001160:	089b      	lsrs	r3, r3, #2
 8001162:	430a      	orrs	r2, r1
 8001164:	33c0      	adds	r3, #192	; 0xc0
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800116a:	e031      	b.n	80011d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800116c:	4a1b      	ldr	r2, [pc, #108]	; (80011dc <__NVIC_SetPriority+0xd8>)
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	0019      	movs	r1, r3
 8001174:	230f      	movs	r3, #15
 8001176:	400b      	ands	r3, r1
 8001178:	3b08      	subs	r3, #8
 800117a:	089b      	lsrs	r3, r3, #2
 800117c:	3306      	adds	r3, #6
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	18d3      	adds	r3, r2, r3
 8001182:	3304      	adds	r3, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	1dfa      	adds	r2, r7, #7
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	0011      	movs	r1, r2
 800118c:	2203      	movs	r2, #3
 800118e:	400a      	ands	r2, r1
 8001190:	00d2      	lsls	r2, r2, #3
 8001192:	21ff      	movs	r1, #255	; 0xff
 8001194:	4091      	lsls	r1, r2
 8001196:	000a      	movs	r2, r1
 8001198:	43d2      	mvns	r2, r2
 800119a:	401a      	ands	r2, r3
 800119c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	019b      	lsls	r3, r3, #6
 80011a2:	22ff      	movs	r2, #255	; 0xff
 80011a4:	401a      	ands	r2, r3
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	0018      	movs	r0, r3
 80011ac:	2303      	movs	r3, #3
 80011ae:	4003      	ands	r3, r0
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011b4:	4809      	ldr	r0, [pc, #36]	; (80011dc <__NVIC_SetPriority+0xd8>)
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	001c      	movs	r4, r3
 80011bc:	230f      	movs	r3, #15
 80011be:	4023      	ands	r3, r4
 80011c0:	3b08      	subs	r3, #8
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	430a      	orrs	r2, r1
 80011c6:	3306      	adds	r3, #6
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	18c3      	adds	r3, r0, r3
 80011cc:	3304      	adds	r3, #4
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b003      	add	sp, #12
 80011d6:	bd90      	pop	{r4, r7, pc}
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	045b      	lsls	r3, r3, #17
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d301      	bcc.n	80011f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f4:	2301      	movs	r3, #1
 80011f6:	e010      	b.n	800121a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <SysTick_Config+0x44>)
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	3a01      	subs	r2, #1
 80011fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001200:	2301      	movs	r3, #1
 8001202:	425b      	negs	r3, r3
 8001204:	2103      	movs	r1, #3
 8001206:	0018      	movs	r0, r3
 8001208:	f7ff ff7c 	bl	8001104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x44>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x44>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	0018      	movs	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	b002      	add	sp, #8
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	60b9      	str	r1, [r7, #8]
 8001230:	607a      	str	r2, [r7, #4]
 8001232:	210f      	movs	r1, #15
 8001234:	187b      	adds	r3, r7, r1
 8001236:	1c02      	adds	r2, r0, #0
 8001238:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	187b      	adds	r3, r7, r1
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	0011      	movs	r1, r2
 8001244:	0018      	movs	r0, r3
 8001246:	f7ff ff5d 	bl	8001104 <__NVIC_SetPriority>
}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	b004      	add	sp, #16
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	0002      	movs	r2, r0
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b25b      	sxtb	r3, r3
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff ff33 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff ffaf 	bl	80011e0 <SysTick_Config>
 8001282:	0003      	movs	r3, r0
}
 8001284:	0018      	movs	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e14f      	b.n	800153c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4091      	lsls	r1, r2
 80012a6:	000a      	movs	r2, r1
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <HAL_GPIO_Init+0x28>
 80012b2:	e140      	b.n	8001536 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	2203      	movs	r2, #3
 80012c6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	409a      	lsls	r2, r3
 80012da:	0013      	movs	r3, r2
 80012dc:	43da      	mvns	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	409a      	lsls	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	2201      	movs	r2, #1
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	4013      	ands	r3, r2
 8001336:	2b03      	cmp	r3, #3
 8001338:	d017      	beq.n	800136a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	409a      	lsls	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	43da      	mvns	r2, r3
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2203      	movs	r2, #3
 8001370:	4013      	ands	r3, r2
 8001372:	2b02      	cmp	r3, #2
 8001374:	d123      	bne.n	80013be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	0092      	lsls	r2, r2, #2
 8001380:	58d3      	ldr	r3, [r2, r3]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2207      	movs	r2, #7
 8001388:	4013      	ands	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	43da      	mvns	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2107      	movs	r1, #7
 80013a2:	400b      	ands	r3, r1
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	0092      	lsls	r2, r2, #2
 80013ba:	6939      	ldr	r1, [r7, #16]
 80013bc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	43da      	mvns	r2, r3
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2203      	movs	r2, #3
 80013dc:	401a      	ands	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	409a      	lsls	r2, r3
 80013e4:	0013      	movs	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	23c0      	movs	r3, #192	; 0xc0
 80013f8:	029b      	lsls	r3, r3, #10
 80013fa:	4013      	ands	r3, r2
 80013fc:	d100      	bne.n	8001400 <HAL_GPIO_Init+0x174>
 80013fe:	e09a      	b.n	8001536 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001400:	4b54      	ldr	r3, [pc, #336]	; (8001554 <HAL_GPIO_Init+0x2c8>)
 8001402:	699a      	ldr	r2, [r3, #24]
 8001404:	4b53      	ldr	r3, [pc, #332]	; (8001554 <HAL_GPIO_Init+0x2c8>)
 8001406:	2101      	movs	r1, #1
 8001408:	430a      	orrs	r2, r1
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	4b51      	ldr	r3, [pc, #324]	; (8001554 <HAL_GPIO_Init+0x2c8>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2201      	movs	r2, #1
 8001412:	4013      	ands	r3, r2
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001418:	4a4f      	ldr	r2, [pc, #316]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	589b      	ldr	r3, [r3, r2]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2203      	movs	r2, #3
 800142a:	4013      	ands	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	409a      	lsls	r2, r3
 8001432:	0013      	movs	r3, r2
 8001434:	43da      	mvns	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	2390      	movs	r3, #144	; 0x90
 8001440:	05db      	lsls	r3, r3, #23
 8001442:	429a      	cmp	r2, r3
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0x1e2>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a44      	ldr	r2, [pc, #272]	; (800155c <HAL_GPIO_Init+0x2d0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d00d      	beq.n	800146a <HAL_GPIO_Init+0x1de>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a43      	ldr	r2, [pc, #268]	; (8001560 <HAL_GPIO_Init+0x2d4>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d007      	beq.n	8001466 <HAL_GPIO_Init+0x1da>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a42      	ldr	r2, [pc, #264]	; (8001564 <HAL_GPIO_Init+0x2d8>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d101      	bne.n	8001462 <HAL_GPIO_Init+0x1d6>
 800145e:	2303      	movs	r3, #3
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x1e4>
 8001462:	2305      	movs	r3, #5
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x1e4>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x1e4>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x1e4>
 800146e:	2300      	movs	r3, #0
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	2103      	movs	r1, #3
 8001474:	400a      	ands	r2, r1
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	; (8001558 <HAL_GPIO_Init+0x2cc>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800148e:	4b36      	ldr	r3, [pc, #216]	; (8001568 <HAL_GPIO_Init+0x2dc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43da      	mvns	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	025b      	lsls	r3, r3, #9
 80014a6:	4013      	ands	r3, r2
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014b2:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_GPIO_Init+0x2dc>)
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014b8:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <HAL_GPIO_Init+0x2dc>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	43da      	mvns	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	029b      	lsls	r3, r3, #10
 80014d0:	4013      	ands	r3, r2
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4313      	orrs	r3, r2
 80014da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <HAL_GPIO_Init+0x2dc>)
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e2:	4b21      	ldr	r3, [pc, #132]	; (8001568 <HAL_GPIO_Init+0x2dc>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	035b      	lsls	r3, r3, #13
 80014fa:	4013      	ands	r3, r2
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <HAL_GPIO_Init+0x2dc>)
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_GPIO_Init+0x2dc>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	43da      	mvns	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	039b      	lsls	r3, r3, #14
 8001524:	4013      	ands	r3, r2
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001530:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_GPIO_Init+0x2dc>)
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	3301      	adds	r3, #1
 800153a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	40da      	lsrs	r2, r3
 8001544:	1e13      	subs	r3, r2, #0
 8001546:	d000      	beq.n	800154a <HAL_GPIO_Init+0x2be>
 8001548:	e6a8      	b.n	800129c <HAL_GPIO_Init+0x10>
  } 
}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46c0      	nop			; (mov r8, r8)
 800154e:	46bd      	mov	sp, r7
 8001550:	b006      	add	sp, #24
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40021000 	.word	0x40021000
 8001558:	40010000 	.word	0x40010000
 800155c:	48000400 	.word	0x48000400
 8001560:	48000800 	.word	0x48000800
 8001564:	48000c00 	.word	0x48000c00
 8001568:	40010400 	.word	0x40010400

0800156c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	000a      	movs	r2, r1
 8001576:	1cbb      	adds	r3, r7, #2
 8001578:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	1cba      	adds	r2, r7, #2
 8001580:	8812      	ldrh	r2, [r2, #0]
 8001582:	4013      	ands	r3, r2
 8001584:	d004      	beq.n	8001590 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001586:	230f      	movs	r3, #15
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	2201      	movs	r2, #1
 800158c:	701a      	strb	r2, [r3, #0]
 800158e:	e003      	b.n	8001598 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001590:	230f      	movs	r3, #15
 8001592:	18fb      	adds	r3, r7, r3
 8001594:	2200      	movs	r2, #0
 8001596:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001598:	230f      	movs	r3, #15
 800159a:	18fb      	adds	r3, r7, r3
 800159c:	781b      	ldrb	r3, [r3, #0]
  }
 800159e:	0018      	movs	r0, r3
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b004      	add	sp, #16
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	0008      	movs	r0, r1
 80015b0:	0011      	movs	r1, r2
 80015b2:	1cbb      	adds	r3, r7, #2
 80015b4:	1c02      	adds	r2, r0, #0
 80015b6:	801a      	strh	r2, [r3, #0]
 80015b8:	1c7b      	adds	r3, r7, #1
 80015ba:	1c0a      	adds	r2, r1, #0
 80015bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015be:	1c7b      	adds	r3, r7, #1
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015c6:	1cbb      	adds	r3, r7, #2
 80015c8:	881a      	ldrh	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015ce:	e003      	b.n	80015d8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015d0:	1cbb      	adds	r3, r7, #2
 80015d2:	881a      	ldrh	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015d8:	46c0      	nop			; (mov r8, r8)
 80015da:	46bd      	mov	sp, r7
 80015dc:	b002      	add	sp, #8
 80015de:	bd80      	pop	{r7, pc}

080015e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	0002      	movs	r2, r0
 80015e8:	1dbb      	adds	r3, r7, #6
 80015ea:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	1dba      	adds	r2, r7, #6
 80015f2:	8812      	ldrh	r2, [r2, #0]
 80015f4:	4013      	ands	r3, r2
 80015f6:	d008      	beq.n	800160a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80015fa:	1dba      	adds	r2, r7, #6
 80015fc:	8812      	ldrh	r2, [r2, #0]
 80015fe:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001600:	1dbb      	adds	r3, r7, #6
 8001602:	881b      	ldrh	r3, [r3, #0]
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff f937 	bl	8000878 <HAL_GPIO_EXTI_Callback>
  }
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46bd      	mov	sp, r7
 800160e:	b002      	add	sp, #8
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	40010400 	.word	0x40010400

08001618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e301      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2201      	movs	r2, #1
 8001630:	4013      	ands	r3, r2
 8001632:	d100      	bne.n	8001636 <HAL_RCC_OscConfig+0x1e>
 8001634:	e08d      	b.n	8001752 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001636:	4bc3      	ldr	r3, [pc, #780]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	220c      	movs	r2, #12
 800163c:	4013      	ands	r3, r2
 800163e:	2b04      	cmp	r3, #4
 8001640:	d00e      	beq.n	8001660 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001642:	4bc0      	ldr	r3, [pc, #768]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	220c      	movs	r2, #12
 8001648:	4013      	ands	r3, r2
 800164a:	2b08      	cmp	r3, #8
 800164c:	d116      	bne.n	800167c <HAL_RCC_OscConfig+0x64>
 800164e:	4bbd      	ldr	r3, [pc, #756]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	2380      	movs	r3, #128	; 0x80
 8001654:	025b      	lsls	r3, r3, #9
 8001656:	401a      	ands	r2, r3
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	429a      	cmp	r2, r3
 800165e:	d10d      	bne.n	800167c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001660:	4bb8      	ldr	r3, [pc, #736]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	029b      	lsls	r3, r3, #10
 8001668:	4013      	ands	r3, r2
 800166a:	d100      	bne.n	800166e <HAL_RCC_OscConfig+0x56>
 800166c:	e070      	b.n	8001750 <HAL_RCC_OscConfig+0x138>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d000      	beq.n	8001678 <HAL_RCC_OscConfig+0x60>
 8001676:	e06b      	b.n	8001750 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e2d8      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d107      	bne.n	8001694 <HAL_RCC_OscConfig+0x7c>
 8001684:	4baf      	ldr	r3, [pc, #700]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4bae      	ldr	r3, [pc, #696]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	0249      	lsls	r1, r1, #9
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	e02f      	b.n	80016f4 <HAL_RCC_OscConfig+0xdc>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10c      	bne.n	80016b6 <HAL_RCC_OscConfig+0x9e>
 800169c:	4ba9      	ldr	r3, [pc, #676]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4ba8      	ldr	r3, [pc, #672]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	49a9      	ldr	r1, [pc, #676]	; (8001948 <HAL_RCC_OscConfig+0x330>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	4ba6      	ldr	r3, [pc, #664]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4ba5      	ldr	r3, [pc, #660]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	49a7      	ldr	r1, [pc, #668]	; (800194c <HAL_RCC_OscConfig+0x334>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e01e      	b.n	80016f4 <HAL_RCC_OscConfig+0xdc>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d10e      	bne.n	80016dc <HAL_RCC_OscConfig+0xc4>
 80016be:	4ba1      	ldr	r3, [pc, #644]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	4ba0      	ldr	r3, [pc, #640]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	02c9      	lsls	r1, r1, #11
 80016c8:	430a      	orrs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	4b9d      	ldr	r3, [pc, #628]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b9c      	ldr	r3, [pc, #624]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	0249      	lsls	r1, r1, #9
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0xdc>
 80016dc:	4b99      	ldr	r3, [pc, #612]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b98      	ldr	r3, [pc, #608]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	4999      	ldr	r1, [pc, #612]	; (8001948 <HAL_RCC_OscConfig+0x330>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	4b96      	ldr	r3, [pc, #600]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b95      	ldr	r3, [pc, #596]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	4997      	ldr	r1, [pc, #604]	; (800194c <HAL_RCC_OscConfig+0x334>)
 80016f0:	400a      	ands	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d014      	beq.n	8001726 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fcba 	bl	8001074 <HAL_GetTick>
 8001700:	0003      	movs	r3, r0
 8001702:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001706:	f7ff fcb5 	bl	8001074 <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b64      	cmp	r3, #100	; 0x64
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e28a      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001718:	4b8a      	ldr	r3, [pc, #552]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	029b      	lsls	r3, r3, #10
 8001720:	4013      	ands	r3, r2
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0xee>
 8001724:	e015      	b.n	8001752 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff fca5 	bl	8001074 <HAL_GetTick>
 800172a:	0003      	movs	r3, r0
 800172c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff fca0 	bl	8001074 <HAL_GetTick>
 8001734:	0002      	movs	r2, r0
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	; 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e275      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001742:	4b80      	ldr	r3, [pc, #512]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	029b      	lsls	r3, r3, #10
 800174a:	4013      	ands	r3, r2
 800174c:	d1f0      	bne.n	8001730 <HAL_RCC_OscConfig+0x118>
 800174e:	e000      	b.n	8001752 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001750:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2202      	movs	r2, #2
 8001758:	4013      	ands	r3, r2
 800175a:	d100      	bne.n	800175e <HAL_RCC_OscConfig+0x146>
 800175c:	e069      	b.n	8001832 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800175e:	4b79      	ldr	r3, [pc, #484]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	220c      	movs	r2, #12
 8001764:	4013      	ands	r3, r2
 8001766:	d00b      	beq.n	8001780 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001768:	4b76      	ldr	r3, [pc, #472]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	220c      	movs	r2, #12
 800176e:	4013      	ands	r3, r2
 8001770:	2b08      	cmp	r3, #8
 8001772:	d11c      	bne.n	80017ae <HAL_RCC_OscConfig+0x196>
 8001774:	4b73      	ldr	r3, [pc, #460]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	025b      	lsls	r3, r3, #9
 800177c:	4013      	ands	r3, r2
 800177e:	d116      	bne.n	80017ae <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001780:	4b70      	ldr	r3, [pc, #448]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2202      	movs	r2, #2
 8001786:	4013      	ands	r3, r2
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x17e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e24b      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b6b      	ldr	r3, [pc, #428]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	22f8      	movs	r2, #248	; 0xf8
 800179c:	4393      	bics	r3, r2
 800179e:	0019      	movs	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	00da      	lsls	r2, r3, #3
 80017a6:	4b67      	ldr	r3, [pc, #412]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ac:	e041      	b.n	8001832 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d024      	beq.n	8001800 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b6:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4b62      	ldr	r3, [pc, #392]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	2101      	movs	r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fc57 	bl	8001074 <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff fc52 	bl	8001074 <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e227      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017de:	4b59      	ldr	r3, [pc, #356]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	d0f1      	beq.n	80017cc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b56      	ldr	r3, [pc, #344]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	22f8      	movs	r2, #248	; 0xf8
 80017ee:	4393      	bics	r3, r2
 80017f0:	0019      	movs	r1, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	00da      	lsls	r2, r3, #3
 80017f8:	4b52      	ldr	r3, [pc, #328]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	e018      	b.n	8001832 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001800:	4b50      	ldr	r3, [pc, #320]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b4f      	ldr	r3, [pc, #316]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001806:	2101      	movs	r1, #1
 8001808:	438a      	bics	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fc32 	bl	8001074 <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001816:	f7ff fc2d 	bl	8001074 <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e202      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001828:	4b46      	ldr	r3, [pc, #280]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2202      	movs	r2, #2
 800182e:	4013      	ands	r3, r2
 8001830:	d1f1      	bne.n	8001816 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2208      	movs	r2, #8
 8001838:	4013      	ands	r3, r2
 800183a:	d036      	beq.n	80018aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d019      	beq.n	8001878 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001844:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001848:	4b3e      	ldr	r3, [pc, #248]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 800184a:	2101      	movs	r1, #1
 800184c:	430a      	orrs	r2, r1
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001850:	f7ff fc10 	bl	8001074 <HAL_GetTick>
 8001854:	0003      	movs	r3, r0
 8001856:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff fc0b 	bl	8001074 <HAL_GetTick>
 800185e:	0002      	movs	r2, r0
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e1e0      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186c:	4b35      	ldr	r3, [pc, #212]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	2202      	movs	r2, #2
 8001872:	4013      	ands	r3, r2
 8001874:	d0f1      	beq.n	800185a <HAL_RCC_OscConfig+0x242>
 8001876:	e018      	b.n	80018aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001878:	4b32      	ldr	r3, [pc, #200]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 800187a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800187c:	4b31      	ldr	r3, [pc, #196]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 800187e:	2101      	movs	r1, #1
 8001880:	438a      	bics	r2, r1
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001884:	f7ff fbf6 	bl	8001074 <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800188e:	f7ff fbf1 	bl	8001074 <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e1c6      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	2202      	movs	r2, #2
 80018a6:	4013      	ands	r3, r2
 80018a8:	d1f1      	bne.n	800188e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2204      	movs	r2, #4
 80018b0:	4013      	ands	r3, r2
 80018b2:	d100      	bne.n	80018b6 <HAL_RCC_OscConfig+0x29e>
 80018b4:	e0b4      	b.n	8001a20 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b6:	201f      	movs	r0, #31
 80018b8:	183b      	adds	r3, r7, r0
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b21      	ldr	r3, [pc, #132]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80018c0:	69da      	ldr	r2, [r3, #28]
 80018c2:	2380      	movs	r3, #128	; 0x80
 80018c4:	055b      	lsls	r3, r3, #21
 80018c6:	4013      	ands	r3, r2
 80018c8:	d110      	bne.n	80018ec <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	69da      	ldr	r2, [r3, #28]
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	0549      	lsls	r1, r1, #21
 80018d4:	430a      	orrs	r2, r1
 80018d6:	61da      	str	r2, [r3, #28]
 80018d8:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	055b      	lsls	r3, r3, #21
 80018e0:	4013      	ands	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018e6:	183b      	adds	r3, r7, r0
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ec:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_RCC_OscConfig+0x338>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4013      	ands	r3, r2
 80018f6:	d11a      	bne.n	800192e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_RCC_OscConfig+0x338>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_RCC_OscConfig+0x338>)
 80018fe:	2180      	movs	r1, #128	; 0x80
 8001900:	0049      	lsls	r1, r1, #1
 8001902:	430a      	orrs	r2, r1
 8001904:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001906:	f7ff fbb5 	bl	8001074 <HAL_GetTick>
 800190a:	0003      	movs	r3, r0
 800190c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001910:	f7ff fbb0 	bl	8001074 <HAL_GetTick>
 8001914:	0002      	movs	r2, r0
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	; 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e185      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001922:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <HAL_RCC_OscConfig+0x338>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4013      	ands	r3, r2
 800192c:	d0f0      	beq.n	8001910 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d10e      	bne.n	8001954 <HAL_RCC_OscConfig+0x33c>
 8001936:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 8001938:	6a1a      	ldr	r2, [r3, #32]
 800193a:	4b02      	ldr	r3, [pc, #8]	; (8001944 <HAL_RCC_OscConfig+0x32c>)
 800193c:	2101      	movs	r1, #1
 800193e:	430a      	orrs	r2, r1
 8001940:	621a      	str	r2, [r3, #32]
 8001942:	e035      	b.n	80019b0 <HAL_RCC_OscConfig+0x398>
 8001944:	40021000 	.word	0x40021000
 8001948:	fffeffff 	.word	0xfffeffff
 800194c:	fffbffff 	.word	0xfffbffff
 8001950:	40007000 	.word	0x40007000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d10c      	bne.n	8001976 <HAL_RCC_OscConfig+0x35e>
 800195c:	4bb6      	ldr	r3, [pc, #728]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 800195e:	6a1a      	ldr	r2, [r3, #32]
 8001960:	4bb5      	ldr	r3, [pc, #724]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001962:	2101      	movs	r1, #1
 8001964:	438a      	bics	r2, r1
 8001966:	621a      	str	r2, [r3, #32]
 8001968:	4bb3      	ldr	r3, [pc, #716]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 800196a:	6a1a      	ldr	r2, [r3, #32]
 800196c:	4bb2      	ldr	r3, [pc, #712]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 800196e:	2104      	movs	r1, #4
 8001970:	438a      	bics	r2, r1
 8001972:	621a      	str	r2, [r3, #32]
 8001974:	e01c      	b.n	80019b0 <HAL_RCC_OscConfig+0x398>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b05      	cmp	r3, #5
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x380>
 800197e:	4bae      	ldr	r3, [pc, #696]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001980:	6a1a      	ldr	r2, [r3, #32]
 8001982:	4bad      	ldr	r3, [pc, #692]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001984:	2104      	movs	r1, #4
 8001986:	430a      	orrs	r2, r1
 8001988:	621a      	str	r2, [r3, #32]
 800198a:	4bab      	ldr	r3, [pc, #684]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 800198c:	6a1a      	ldr	r2, [r3, #32]
 800198e:	4baa      	ldr	r3, [pc, #680]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001990:	2101      	movs	r1, #1
 8001992:	430a      	orrs	r2, r1
 8001994:	621a      	str	r2, [r3, #32]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0x398>
 8001998:	4ba7      	ldr	r3, [pc, #668]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 800199a:	6a1a      	ldr	r2, [r3, #32]
 800199c:	4ba6      	ldr	r3, [pc, #664]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 800199e:	2101      	movs	r1, #1
 80019a0:	438a      	bics	r2, r1
 80019a2:	621a      	str	r2, [r3, #32]
 80019a4:	4ba4      	ldr	r3, [pc, #656]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 80019a6:	6a1a      	ldr	r2, [r3, #32]
 80019a8:	4ba3      	ldr	r3, [pc, #652]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 80019aa:	2104      	movs	r1, #4
 80019ac:	438a      	bics	r2, r1
 80019ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d014      	beq.n	80019e2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff fb5c 	bl	8001074 <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	e009      	b.n	80019d6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff fb57 	bl	8001074 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	4a9b      	ldr	r2, [pc, #620]	; (8001c3c <HAL_RCC_OscConfig+0x624>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e12b      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d6:	4b98      	ldr	r3, [pc, #608]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	2202      	movs	r2, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	d0f0      	beq.n	80019c2 <HAL_RCC_OscConfig+0x3aa>
 80019e0:	e013      	b.n	8001a0a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e2:	f7ff fb47 	bl	8001074 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ea:	e009      	b.n	8001a00 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ec:	f7ff fb42 	bl	8001074 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	4a91      	ldr	r2, [pc, #580]	; (8001c3c <HAL_RCC_OscConfig+0x624>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e116      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a00:	4b8d      	ldr	r3, [pc, #564]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	2202      	movs	r2, #2
 8001a06:	4013      	ands	r3, r2
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a0a:	231f      	movs	r3, #31
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a14:	4b88      	ldr	r3, [pc, #544]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a16:	69da      	ldr	r2, [r3, #28]
 8001a18:	4b87      	ldr	r3, [pc, #540]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a1a:	4989      	ldr	r1, [pc, #548]	; (8001c40 <HAL_RCC_OscConfig+0x628>)
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2210      	movs	r2, #16
 8001a26:	4013      	ands	r3, r2
 8001a28:	d063      	beq.n	8001af2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d12a      	bne.n	8001a88 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a32:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a36:	4b80      	ldr	r3, [pc, #512]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a38:	2104      	movs	r1, #4
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a3e:	4b7e      	ldr	r3, [pc, #504]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a42:	4b7d      	ldr	r3, [pc, #500]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a44:	2101      	movs	r1, #1
 8001a46:	430a      	orrs	r2, r1
 8001a48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fb13 	bl	8001074 <HAL_GetTick>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a54:	f7ff fb0e 	bl	8001074 <HAL_GetTick>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e0e3      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a66:	4b74      	ldr	r3, [pc, #464]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d0f1      	beq.n	8001a54 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a70:	4b71      	ldr	r3, [pc, #452]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a74:	22f8      	movs	r2, #248	; 0xf8
 8001a76:	4393      	bics	r3, r2
 8001a78:	0019      	movs	r1, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	00da      	lsls	r2, r3, #3
 8001a80:	4b6d      	ldr	r3, [pc, #436]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a82:	430a      	orrs	r2, r1
 8001a84:	635a      	str	r2, [r3, #52]	; 0x34
 8001a86:	e034      	b.n	8001af2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	3305      	adds	r3, #5
 8001a8e:	d111      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a90:	4b69      	ldr	r3, [pc, #420]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a94:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a96:	2104      	movs	r1, #4
 8001a98:	438a      	bics	r2, r1
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a9c:	4b66      	ldr	r3, [pc, #408]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa0:	22f8      	movs	r2, #248	; 0xf8
 8001aa2:	4393      	bics	r3, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	00da      	lsls	r2, r3, #3
 8001aac:	4b62      	ldr	r3, [pc, #392]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ab2:	e01e      	b.n	8001af2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ab4:	4b60      	ldr	r3, [pc, #384]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab8:	4b5f      	ldr	r3, [pc, #380]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001aba:	2104      	movs	r1, #4
 8001abc:	430a      	orrs	r2, r1
 8001abe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001ac0:	4b5d      	ldr	r3, [pc, #372]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ac4:	4b5c      	ldr	r3, [pc, #368]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	438a      	bics	r2, r1
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001acc:	f7ff fad2 	bl	8001074 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ad6:	f7ff facd 	bl	8001074 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0a2      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ae8:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aec:	2202      	movs	r2, #2
 8001aee:	4013      	ands	r3, r2
 8001af0:	d1f1      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d100      	bne.n	8001afc <HAL_RCC_OscConfig+0x4e4>
 8001afa:	e097      	b.n	8001c2c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001afc:	4b4e      	ldr	r3, [pc, #312]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	220c      	movs	r2, #12
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d100      	bne.n	8001b0a <HAL_RCC_OscConfig+0x4f2>
 8001b08:	e06b      	b.n	8001be2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d14c      	bne.n	8001bac <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b12:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	4b48      	ldr	r3, [pc, #288]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001b18:	494a      	ldr	r1, [pc, #296]	; (8001c44 <HAL_RCC_OscConfig+0x62c>)
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1e:	f7ff faa9 	bl	8001074 <HAL_GetTick>
 8001b22:	0003      	movs	r3, r0
 8001b24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b28:	f7ff faa4 	bl	8001074 <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e079      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	049b      	lsls	r3, r3, #18
 8001b42:	4013      	ands	r3, r2
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b46:	4b3c      	ldr	r3, [pc, #240]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	4393      	bics	r3, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b54:	4b38      	ldr	r3, [pc, #224]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001b56:	430a      	orrs	r2, r1
 8001b58:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b5a:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4a3a      	ldr	r2, [pc, #232]	; (8001c48 <HAL_RCC_OscConfig+0x630>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	0019      	movs	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001b70:	430a      	orrs	r2, r1
 8001b72:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b74:	4b30      	ldr	r3, [pc, #192]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b2f      	ldr	r3, [pc, #188]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001b7a:	2180      	movs	r1, #128	; 0x80
 8001b7c:	0449      	lsls	r1, r1, #17
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b82:	f7ff fa77 	bl	8001074 <HAL_GetTick>
 8001b86:	0003      	movs	r3, r0
 8001b88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b8c:	f7ff fa72 	bl	8001074 <HAL_GetTick>
 8001b90:	0002      	movs	r2, r0
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e047      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b9e:	4b26      	ldr	r3, [pc, #152]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	049b      	lsls	r3, r3, #18
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d0f0      	beq.n	8001b8c <HAL_RCC_OscConfig+0x574>
 8001baa:	e03f      	b.n	8001c2c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001bb2:	4924      	ldr	r1, [pc, #144]	; (8001c44 <HAL_RCC_OscConfig+0x62c>)
 8001bb4:	400a      	ands	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fa5c 	bl	8001074 <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7ff fa57 	bl	8001074 <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e02c      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd4:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	049b      	lsls	r3, r3, #18
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d1f0      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5aa>
 8001be0:	e024      	b.n	8001c2c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e01f      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <HAL_RCC_OscConfig+0x620>)
 8001bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	025b      	lsls	r3, r3, #9
 8001c00:	401a      	ands	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d10e      	bne.n	8001c28 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	401a      	ands	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	23f0      	movs	r3, #240	; 0xf0
 8001c1c:	039b      	lsls	r3, r3, #14
 8001c1e:	401a      	ands	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b008      	add	sp, #32
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			; (mov r8, r8)
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	00001388 	.word	0x00001388
 8001c40:	efffffff 	.word	0xefffffff
 8001c44:	feffffff 	.word	0xfeffffff
 8001c48:	ffc2ffff 	.word	0xffc2ffff

08001c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0b3      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c60:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_RCC_ClockConfig+0x184>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2201      	movs	r2, #1
 8001c66:	4013      	ands	r3, r2
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d911      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b58      	ldr	r3, [pc, #352]	; (8001dd0 <HAL_RCC_ClockConfig+0x184>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2201      	movs	r2, #1
 8001c74:	4393      	bics	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <HAL_RCC_ClockConfig+0x184>)
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_ClockConfig+0x184>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2201      	movs	r2, #1
 8001c86:	4013      	ands	r3, r2
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d001      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e09a      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2202      	movs	r2, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d015      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d006      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ca6:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4b4a      	ldr	r3, [pc, #296]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001cac:	21e0      	movs	r1, #224	; 0xe0
 8001cae:	00c9      	lsls	r1, r1, #3
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cb4:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	22f0      	movs	r2, #240	; 0xf0
 8001cba:	4393      	bics	r3, r2
 8001cbc:	0019      	movs	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	4b44      	ldr	r3, [pc, #272]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d040      	beq.n	8001d54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	4b3e      	ldr	r3, [pc, #248]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	029b      	lsls	r3, r3, #10
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d114      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e06e      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d107      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf2:	4b38      	ldr	r3, [pc, #224]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	049b      	lsls	r3, r3, #18
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d108      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e062      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d02:	4b34      	ldr	r3, [pc, #208]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e05b      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d10:	4b30      	ldr	r3, [pc, #192]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2203      	movs	r2, #3
 8001d16:	4393      	bics	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	4b2d      	ldr	r3, [pc, #180]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001d20:	430a      	orrs	r2, r1
 8001d22:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d24:	f7ff f9a6 	bl	8001074 <HAL_GetTick>
 8001d28:	0003      	movs	r3, r0
 8001d2a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2c:	e009      	b.n	8001d42 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d2e:	f7ff f9a1 	bl	8001074 <HAL_GetTick>
 8001d32:	0002      	movs	r2, r0
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4a27      	ldr	r2, [pc, #156]	; (8001dd8 <HAL_RCC_ClockConfig+0x18c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e042      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	220c      	movs	r2, #12
 8001d48:	401a      	ands	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d1ec      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d54:	4b1e      	ldr	r3, [pc, #120]	; (8001dd0 <HAL_RCC_ClockConfig+0x184>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d211      	bcs.n	8001d86 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b1b      	ldr	r3, [pc, #108]	; (8001dd0 <HAL_RCC_ClockConfig+0x184>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4393      	bics	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_RCC_ClockConfig+0x184>)
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <HAL_RCC_ClockConfig+0x184>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e020      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d90:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a11      	ldr	r2, [pc, #68]	; (8001ddc <HAL_RCC_ClockConfig+0x190>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001da0:	430a      	orrs	r2, r1
 8001da2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001da4:	f000 f820 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001da8:	0001      	movs	r1, r0
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_RCC_ClockConfig+0x188>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	220f      	movs	r2, #15
 8001db2:	4013      	ands	r3, r2
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_RCC_ClockConfig+0x194>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	000a      	movs	r2, r1
 8001dba:	40da      	lsrs	r2, r3
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x198>)
 8001dbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f7ff f911 	bl	8000fe8 <HAL_InitTick>
  
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b004      	add	sp, #16
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40022000 	.word	0x40022000
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	00001388 	.word	0x00001388
 8001ddc:	fffff8ff 	.word	0xfffff8ff
 8001de0:	0800271c 	.word	0x0800271c
 8001de4:	20000000 	.word	0x20000000

08001de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de8:	b590      	push	{r4, r7, lr}
 8001dea:	b08f      	sub	sp, #60	; 0x3c
 8001dec:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001dee:	2314      	movs	r3, #20
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	4a2b      	ldr	r2, [pc, #172]	; (8001ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001df6:	c313      	stmia	r3!, {r0, r1, r4}
 8001df8:	6812      	ldr	r2, [r2, #0]
 8001dfa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4a29      	ldr	r2, [pc, #164]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001e02:	c313      	stmia	r3!, {r0, r1, r4}
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e10:	2300      	movs	r3, #0
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e1c:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e24:	220c      	movs	r2, #12
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d002      	beq.n	8001e32 <HAL_RCC_GetSysClockFreq+0x4a>
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d003      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x50>
 8001e30:	e02d      	b.n	8001e8e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e36:	e02d      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3a:	0c9b      	lsrs	r3, r3, #18
 8001e3c:	220f      	movs	r2, #15
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2214      	movs	r2, #20
 8001e42:	18ba      	adds	r2, r7, r2
 8001e44:	5cd3      	ldrb	r3, [r2, r3]
 8001e46:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	4013      	ands	r3, r2
 8001e50:	1d3a      	adds	r2, r7, #4
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e62:	4812      	ldr	r0, [pc, #72]	; (8001eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e64:	f7fe f950 	bl	8000108 <__udivsi3>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	001a      	movs	r2, r3
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	4353      	muls	r3, r2
 8001e70:	637b      	str	r3, [r7, #52]	; 0x34
 8001e72:	e009      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e76:	000a      	movs	r2, r1
 8001e78:	0152      	lsls	r2, r2, #5
 8001e7a:	1a52      	subs	r2, r2, r1
 8001e7c:	0193      	lsls	r3, r2, #6
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	185b      	adds	r3, r3, r1
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e8c:	e002      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e92:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e96:	0018      	movs	r0, r3
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b00f      	add	sp, #60	; 0x3c
 8001e9c:	bd90      	pop	{r4, r7, pc}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	080026b8 	.word	0x080026b8
 8001ea4:	080026c8 	.word	0x080026c8
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	007a1200 	.word	0x007a1200

08001eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	025b      	lsls	r3, r3, #9
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d100      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ecc:	e08e      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ece:	2017      	movs	r0, #23
 8001ed0:	183b      	adds	r3, r7, r0
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed6:	4b57      	ldr	r3, [pc, #348]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ed8:	69da      	ldr	r2, [r3, #28]
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	055b      	lsls	r3, r3, #21
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d110      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ee2:	4b54      	ldr	r3, [pc, #336]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ee4:	69da      	ldr	r2, [r3, #28]
 8001ee6:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	0549      	lsls	r1, r1, #21
 8001eec:	430a      	orrs	r2, r1
 8001eee:	61da      	str	r2, [r3, #28]
 8001ef0:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ef2:	69da      	ldr	r2, [r3, #28]
 8001ef4:	2380      	movs	r3, #128	; 0x80
 8001ef6:	055b      	lsls	r3, r3, #21
 8001ef8:	4013      	ands	r3, r2
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efe:	183b      	adds	r3, r7, r0
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d11a      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f10:	4b49      	ldr	r3, [pc, #292]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b48      	ldr	r3, [pc, #288]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f16:	2180      	movs	r1, #128	; 0x80
 8001f18:	0049      	lsls	r1, r1, #1
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1e:	f7ff f8a9 	bl	8001074 <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f26:	e008      	b.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f28:	f7ff f8a4 	bl	8001074 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e077      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b3f      	ldr	r3, [pc, #252]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f46:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f48:	6a1a      	ldr	r2, [r3, #32]
 8001f4a:	23c0      	movs	r3, #192	; 0xc0
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d034      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	23c0      	movs	r3, #192	; 0xc0
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4013      	ands	r3, r2
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d02c      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f68:	4b32      	ldr	r3, [pc, #200]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a33      	ldr	r2, [pc, #204]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001f6e:	4013      	ands	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f72:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	4b2f      	ldr	r3, [pc, #188]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	0249      	lsls	r1, r1, #9
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f80:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f82:	6a1a      	ldr	r2, [r3, #32]
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f86:	492e      	ldr	r1, [pc, #184]	; (8002040 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001f88:	400a      	ands	r2, r1
 8001f8a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f8c:	4b29      	ldr	r3, [pc, #164]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	4013      	ands	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff f86b 	bl	8001074 <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa2:	e009      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7ff f866 	bl	8001074 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	4a25      	ldr	r2, [pc, #148]	; (8002044 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e038      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	4a1d      	ldr	r2, [pc, #116]	; (800203c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4b18      	ldr	r3, [pc, #96]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fd6:	2317      	movs	r3, #23
 8001fd8:	18fb      	adds	r3, r7, r3
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d105      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	4b13      	ldr	r3, [pc, #76]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001fe6:	4918      	ldr	r1, [pc, #96]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001fe8:	400a      	ands	r2, r1
 8001fea:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d009      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	4393      	bics	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002006:	430a      	orrs	r2, r1
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2220      	movs	r2, #32
 8002010:	4013      	ands	r3, r2
 8002012:	d009      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002014:	4b07      	ldr	r3, [pc, #28]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	2210      	movs	r2, #16
 800201a:	4393      	bics	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002024:	430a      	orrs	r2, r1
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b006      	add	sp, #24
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	40021000 	.word	0x40021000
 8002038:	40007000 	.word	0x40007000
 800203c:	fffffcff 	.word	0xfffffcff
 8002040:	fffeffff 	.word	0xfffeffff
 8002044:	00001388 	.word	0x00001388
 8002048:	efffffff 	.word	0xefffffff

0800204c <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e081      	b.n	8002162 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7f5b      	ldrb	r3, [r3, #29]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d106      	bne.n	8002076 <HAL_RTC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0018      	movs	r0, r3
 8002072:	f7fe fec1 	bl	8000df8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2202      	movs	r2, #2
 800207a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	22ca      	movs	r2, #202	; 0xca
 8002082:	625a      	str	r2, [r3, #36]	; 0x24
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2253      	movs	r2, #83	; 0x53
 800208a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	0018      	movs	r0, r3
 8002090:	f000 f899 	bl	80021c6 <RTC_EnterInitMode>
 8002094:	1e03      	subs	r3, r0, #0
 8002096:	d008      	beq.n	80020aa <HAL_RTC_Init+0x5e>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	22ff      	movs	r2, #255	; 0xff
 800209e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2204      	movs	r2, #4
 80020a4:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e05b      	b.n	8002162 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	492d      	ldr	r1, [pc, #180]	; (800216c <HAL_RTC_Init+0x120>)
 80020b6:	400a      	ands	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6899      	ldr	r1, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	430a      	orrs	r2, r1
 80020d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68d2      	ldr	r2, [r2, #12]
 80020e0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6919      	ldr	r1, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	041a      	lsls	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68da      	ldr	r2, [r3, #12]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2180      	movs	r1, #128	; 0x80
 8002102:	438a      	bics	r2, r1
 8002104:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2220      	movs	r2, #32
 800210e:	4013      	ands	r3, r2
 8002110:	d10e      	bne.n	8002130 <HAL_RTC_Init+0xe4>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0018      	movs	r0, r3
 8002116:	f000 f82d 	bl	8002174 <HAL_RTC_WaitForSynchro>
 800211a:	1e03      	subs	r3, r0, #0
 800211c:	d008      	beq.n	8002130 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	22ff      	movs	r2, #255	; 0xff
 8002124:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2204      	movs	r2, #4
 800212a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e018      	b.n	8002162 <HAL_RTC_Init+0x116>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	490d      	ldr	r1, [pc, #52]	; (8002170 <HAL_RTC_Init+0x124>)
 800213c:	400a      	ands	r2, r1
 800213e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	22ff      	movs	r2, #255	; 0xff
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002160:	2300      	movs	r3, #0
  }
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b002      	add	sp, #8
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	ff8fffbf 	.word	0xff8fffbf
 8002170:	fffbffff 	.word	0xfffbffff

08002174 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	21a0      	movs	r1, #160	; 0xa0
 800218c:	438a      	bics	r2, r1
 800218e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002190:	f7fe ff70 	bl	8001074 <HAL_GetTick>
 8002194:	0003      	movs	r3, r0
 8002196:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8002198:	e00a      	b.n	80021b0 <HAL_RTC_WaitForSynchro+0x3c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800219a:	f7fe ff6b 	bl	8001074 <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad2      	subs	r2, r2, r3
 80021a4:	23fa      	movs	r3, #250	; 0xfa
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d901      	bls.n	80021b0 <HAL_RTC_WaitForSynchro+0x3c>
    {
      return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e006      	b.n	80021be <HAL_RTC_WaitForSynchro+0x4a>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2220      	movs	r2, #32
 80021b8:	4013      	ands	r3, r2
 80021ba:	d0ee      	beq.n	800219a <HAL_RTC_WaitForSynchro+0x26>
    }
  }

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b004      	add	sp, #16
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b084      	sub	sp, #16
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	2240      	movs	r2, #64	; 0x40
 80021da:	4013      	ands	r3, r2
 80021dc:	d11a      	bne.n	8002214 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2201      	movs	r2, #1
 80021e4:	4252      	negs	r2, r2
 80021e6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80021e8:	f7fe ff44 	bl	8001074 <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80021f0:	e00a      	b.n	8002208 <RTC_EnterInitMode+0x42>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021f2:	f7fe ff3f 	bl	8001074 <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad2      	subs	r2, r2, r3
 80021fc:	23fa      	movs	r3, #250	; 0xfa
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d901      	bls.n	8002208 <RTC_EnterInitMode+0x42>
      {
        return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e006      	b.n	8002216 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2240      	movs	r2, #64	; 0x40
 8002210:	4013      	ands	r3, r2
 8002212:	d0ee      	beq.n	80021f2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b004      	add	sp, #16
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e042      	b.n	80022b6 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	223d      	movs	r2, #61	; 0x3d
 8002234:	5c9b      	ldrb	r3, [r3, r2]
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d107      	bne.n	800224c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	223c      	movs	r2, #60	; 0x3c
 8002240:	2100      	movs	r1, #0
 8002242:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	0018      	movs	r0, r3
 8002248:	f7fe fdee 	bl	8000e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	223d      	movs	r2, #61	; 0x3d
 8002250:	2102      	movs	r1, #2
 8002252:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3304      	adds	r3, #4
 800225c:	0019      	movs	r1, r3
 800225e:	0010      	movs	r0, r2
 8002260:	f000 f96c 	bl	800253c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2246      	movs	r2, #70	; 0x46
 8002268:	2101      	movs	r1, #1
 800226a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	223e      	movs	r2, #62	; 0x3e
 8002270:	2101      	movs	r1, #1
 8002272:	5499      	strb	r1, [r3, r2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	223f      	movs	r2, #63	; 0x3f
 8002278:	2101      	movs	r1, #1
 800227a:	5499      	strb	r1, [r3, r2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	2101      	movs	r1, #1
 8002282:	5499      	strb	r1, [r3, r2]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2241      	movs	r2, #65	; 0x41
 8002288:	2101      	movs	r1, #1
 800228a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2242      	movs	r2, #66	; 0x42
 8002290:	2101      	movs	r1, #1
 8002292:	5499      	strb	r1, [r3, r2]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2243      	movs	r2, #67	; 0x43
 8002298:	2101      	movs	r1, #1
 800229a:	5499      	strb	r1, [r3, r2]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2244      	movs	r2, #68	; 0x44
 80022a0:	2101      	movs	r1, #1
 80022a2:	5499      	strb	r1, [r3, r2]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2245      	movs	r2, #69	; 0x45
 80022a8:	2101      	movs	r1, #1
 80022aa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	223d      	movs	r2, #61	; 0x3d
 80022b0:	2101      	movs	r1, #1
 80022b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b002      	add	sp, #8
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2202      	movs	r2, #2
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d124      	bne.n	800231e <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2202      	movs	r2, #2
 80022dc:	4013      	ands	r3, r2
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d11d      	bne.n	800231e <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2203      	movs	r2, #3
 80022e8:	4252      	negs	r2, r2
 80022ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	2203      	movs	r2, #3
 80022fa:	4013      	ands	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0018      	movs	r0, r3
 8002302:	f000 f902 	bl	800250a <HAL_TIM_IC_CaptureCallback>
 8002306:	e007      	b.n	8002318 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f8f5 	bl	80024fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0018      	movs	r0, r3
 8002314:	f000 f901 	bl	800251a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	2204      	movs	r2, #4
 8002326:	4013      	ands	r3, r2
 8002328:	2b04      	cmp	r3, #4
 800232a:	d125      	bne.n	8002378 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2204      	movs	r2, #4
 8002334:	4013      	ands	r3, r2
 8002336:	2b04      	cmp	r3, #4
 8002338:	d11e      	bne.n	8002378 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2205      	movs	r2, #5
 8002340:	4252      	negs	r2, r2
 8002342:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	23c0      	movs	r3, #192	; 0xc0
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4013      	ands	r3, r2
 8002356:	d004      	beq.n	8002362 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	0018      	movs	r0, r3
 800235c:	f000 f8d5 	bl	800250a <HAL_TIM_IC_CaptureCallback>
 8002360:	e007      	b.n	8002372 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	f000 f8c8 	bl	80024fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0018      	movs	r0, r3
 800236e:	f000 f8d4 	bl	800251a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2208      	movs	r2, #8
 8002380:	4013      	ands	r3, r2
 8002382:	2b08      	cmp	r3, #8
 8002384:	d124      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	2208      	movs	r2, #8
 800238e:	4013      	ands	r3, r2
 8002390:	2b08      	cmp	r3, #8
 8002392:	d11d      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2209      	movs	r2, #9
 800239a:	4252      	negs	r2, r2
 800239c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2204      	movs	r2, #4
 80023a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	2203      	movs	r2, #3
 80023ac:	4013      	ands	r3, r2
 80023ae:	d004      	beq.n	80023ba <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 f8a9 	bl	800250a <HAL_TIM_IC_CaptureCallback>
 80023b8:	e007      	b.n	80023ca <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	0018      	movs	r0, r3
 80023be:	f000 f89c 	bl	80024fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f8a8 	bl	800251a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	2210      	movs	r2, #16
 80023d8:	4013      	ands	r3, r2
 80023da:	2b10      	cmp	r3, #16
 80023dc:	d125      	bne.n	800242a <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2210      	movs	r2, #16
 80023e6:	4013      	ands	r3, r2
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	d11e      	bne.n	800242a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2211      	movs	r2, #17
 80023f2:	4252      	negs	r2, r2
 80023f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2208      	movs	r2, #8
 80023fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	23c0      	movs	r3, #192	; 0xc0
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4013      	ands	r3, r2
 8002408:	d004      	beq.n	8002414 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0018      	movs	r0, r3
 800240e:	f000 f87c 	bl	800250a <HAL_TIM_IC_CaptureCallback>
 8002412:	e007      	b.n	8002424 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	0018      	movs	r0, r3
 8002418:	f000 f86f 	bl	80024fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	0018      	movs	r0, r3
 8002420:	f000 f87b 	bl	800251a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	2201      	movs	r2, #1
 8002432:	4013      	ands	r3, r2
 8002434:	2b01      	cmp	r3, #1
 8002436:	d10f      	bne.n	8002458 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	4013      	ands	r3, r2
 8002442:	2b01      	cmp	r3, #1
 8002444:	d108      	bne.n	8002458 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2202      	movs	r2, #2
 800244c:	4252      	negs	r2, r2
 800244e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	0018      	movs	r0, r3
 8002454:	f000 f849 	bl	80024ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	2280      	movs	r2, #128	; 0x80
 8002460:	4013      	ands	r3, r2
 8002462:	2b80      	cmp	r3, #128	; 0x80
 8002464:	d10f      	bne.n	8002486 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2280      	movs	r2, #128	; 0x80
 800246e:	4013      	ands	r3, r2
 8002470:	2b80      	cmp	r3, #128	; 0x80
 8002472:	d108      	bne.n	8002486 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2281      	movs	r2, #129	; 0x81
 800247a:	4252      	negs	r2, r2
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	0018      	movs	r0, r3
 8002482:	f000 f8d9 	bl	8002638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	2240      	movs	r2, #64	; 0x40
 800248e:	4013      	ands	r3, r2
 8002490:	2b40      	cmp	r3, #64	; 0x40
 8002492:	d10f      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2240      	movs	r2, #64	; 0x40
 800249c:	4013      	ands	r3, r2
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d108      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2241      	movs	r2, #65	; 0x41
 80024a8:	4252      	negs	r2, r2
 80024aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 f83b 	bl	800252a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2220      	movs	r2, #32
 80024bc:	4013      	ands	r3, r2
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d10f      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	4013      	ands	r3, r2
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d108      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2221      	movs	r2, #33	; 0x21
 80024d6:	4252      	negs	r2, r2
 80024d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	0018      	movs	r0, r3
 80024de:	f000 f8a3 	bl	8002628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80024f2:	46c0      	nop			; (mov r8, r8)
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b002      	add	sp, #8
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	46bd      	mov	sp, r7
 8002506:	b002      	add	sp, #8
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	46bd      	mov	sp, r7
 8002516:	b002      	add	sp, #8
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b002      	add	sp, #8
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b002      	add	sp, #8
 8002538:	bd80      	pop	{r7, pc}
	...

0800253c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a2f      	ldr	r2, [pc, #188]	; (800260c <TIM_Base_SetConfig+0xd0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d003      	beq.n	800255c <TIM_Base_SetConfig+0x20>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a2e      	ldr	r2, [pc, #184]	; (8002610 <TIM_Base_SetConfig+0xd4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d108      	bne.n	800256e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2270      	movs	r2, #112	; 0x70
 8002560:	4393      	bics	r3, r2
 8002562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a26      	ldr	r2, [pc, #152]	; (800260c <TIM_Base_SetConfig+0xd0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <TIM_Base_SetConfig+0x62>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a25      	ldr	r2, [pc, #148]	; (8002610 <TIM_Base_SetConfig+0xd4>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00f      	beq.n	800259e <TIM_Base_SetConfig+0x62>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a24      	ldr	r2, [pc, #144]	; (8002614 <TIM_Base_SetConfig+0xd8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00b      	beq.n	800259e <TIM_Base_SetConfig+0x62>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a23      	ldr	r2, [pc, #140]	; (8002618 <TIM_Base_SetConfig+0xdc>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <TIM_Base_SetConfig+0x62>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a22      	ldr	r2, [pc, #136]	; (800261c <TIM_Base_SetConfig+0xe0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d003      	beq.n	800259e <TIM_Base_SetConfig+0x62>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a21      	ldr	r2, [pc, #132]	; (8002620 <TIM_Base_SetConfig+0xe4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d108      	bne.n	80025b0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4a20      	ldr	r2, [pc, #128]	; (8002624 <TIM_Base_SetConfig+0xe8>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	4393      	bics	r3, r2
 80025b6:	001a      	movs	r2, r3
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a0c      	ldr	r2, [pc, #48]	; (800260c <TIM_Base_SetConfig+0xd0>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00b      	beq.n	80025f6 <TIM_Base_SetConfig+0xba>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <TIM_Base_SetConfig+0xdc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d007      	beq.n	80025f6 <TIM_Base_SetConfig+0xba>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a0c      	ldr	r2, [pc, #48]	; (800261c <TIM_Base_SetConfig+0xe0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d003      	beq.n	80025f6 <TIM_Base_SetConfig+0xba>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a0b      	ldr	r2, [pc, #44]	; (8002620 <TIM_Base_SetConfig+0xe4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d103      	bne.n	80025fe <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	615a      	str	r2, [r3, #20]
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b004      	add	sp, #16
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40012c00 	.word	0x40012c00
 8002610:	40000400 	.word	0x40000400
 8002614:	40002000 	.word	0x40002000
 8002618:	40014000 	.word	0x40014000
 800261c:	40014400 	.word	0x40014400
 8002620:	40014800 	.word	0x40014800
 8002624:	fffffcff 	.word	0xfffffcff

08002628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46bd      	mov	sp, r7
 8002644:	b002      	add	sp, #8
 8002646:	bd80      	pop	{r7, pc}

08002648 <__libc_init_array>:
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	2600      	movs	r6, #0
 800264c:	4d0c      	ldr	r5, [pc, #48]	; (8002680 <__libc_init_array+0x38>)
 800264e:	4c0d      	ldr	r4, [pc, #52]	; (8002684 <__libc_init_array+0x3c>)
 8002650:	1b64      	subs	r4, r4, r5
 8002652:	10a4      	asrs	r4, r4, #2
 8002654:	42a6      	cmp	r6, r4
 8002656:	d109      	bne.n	800266c <__libc_init_array+0x24>
 8002658:	2600      	movs	r6, #0
 800265a:	f000 f821 	bl	80026a0 <_init>
 800265e:	4d0a      	ldr	r5, [pc, #40]	; (8002688 <__libc_init_array+0x40>)
 8002660:	4c0a      	ldr	r4, [pc, #40]	; (800268c <__libc_init_array+0x44>)
 8002662:	1b64      	subs	r4, r4, r5
 8002664:	10a4      	asrs	r4, r4, #2
 8002666:	42a6      	cmp	r6, r4
 8002668:	d105      	bne.n	8002676 <__libc_init_array+0x2e>
 800266a:	bd70      	pop	{r4, r5, r6, pc}
 800266c:	00b3      	lsls	r3, r6, #2
 800266e:	58eb      	ldr	r3, [r5, r3]
 8002670:	4798      	blx	r3
 8002672:	3601      	adds	r6, #1
 8002674:	e7ee      	b.n	8002654 <__libc_init_array+0xc>
 8002676:	00b3      	lsls	r3, r6, #2
 8002678:	58eb      	ldr	r3, [r5, r3]
 800267a:	4798      	blx	r3
 800267c:	3601      	adds	r6, #1
 800267e:	e7f2      	b.n	8002666 <__libc_init_array+0x1e>
 8002680:	0800272c 	.word	0x0800272c
 8002684:	0800272c 	.word	0x0800272c
 8002688:	0800272c 	.word	0x0800272c
 800268c:	08002730 	.word	0x08002730

08002690 <memset>:
 8002690:	0003      	movs	r3, r0
 8002692:	1882      	adds	r2, r0, r2
 8002694:	4293      	cmp	r3, r2
 8002696:	d100      	bne.n	800269a <memset+0xa>
 8002698:	4770      	bx	lr
 800269a:	7019      	strb	r1, [r3, #0]
 800269c:	3301      	adds	r3, #1
 800269e:	e7f9      	b.n	8002694 <memset+0x4>

080026a0 <_init>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	46c0      	nop			; (mov r8, r8)
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr

080026ac <_fini>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b2:	bc08      	pop	{r3}
 80026b4:	469e      	mov	lr, r3
 80026b6:	4770      	bx	lr
